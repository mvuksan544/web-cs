<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazorise</name>
    </assembly>
    <members>
        <member name="T:Blazorise.BreakpointActivatorAdapter">
            <summary>
            Middleman between the closable component and javascript.
            </summary>
        </member>
        <member name="M:Blazorise.BreakpointActivatorAdapter.#ctor(Blazorise.IBreakpointActivator)">
            <summary>
            Default constructor for <see cref="T:Blazorise.BreakpointActivatorAdapter"/>.
            </summary>
            <param name="component">Reference to the breakpoint activator.</param>
        </member>
        <member name="M:Blazorise.BreakpointActivatorAdapter.GetElementId">
            <summary>
            Gets the breakpoint element id.
            </summary>
            <returns>A breakpoint element id.</returns>
        </member>
        <member name="M:Blazorise.BreakpointActivatorAdapter.OnBreakpoint(System.String)">
            <summary>
            Notify us from JS that breakpoint has activated.
            </summary>
            <param name="breakpoint">Breakpoint name.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BreakpointActivatorAdapter.IsBroken(Blazorise.Breakpoint,System.String)">
            <summary>
            Indicates if breakpoint was broken.
            </summary>
            <param name="checkBreakpoint">A breakpoint to check.</param>
            <param name="currentBreakpointString">Current breakpoint name.</param>
            <returns>True if breakpoint was broken.</returns>
        </member>
        <member name="M:Blazorise.BreakpointActivatorAdapter.GetBreakpoint(System.String)">
            <summary>
            Gets the <see cref="T:Blazorise.Breakpoint"/> by its name.
            </summary>
            <param name="breakpoint">Breakpoint name.</param>
            <returns>Returns <see cref="T:Blazorise.Breakpoint"/>.</returns>
        </member>
        <member name="T:Blazorise.CloseableAdapter">
            <summary>
            Manages the <see cref="T:Blazorise.IHideableComponent"/> visibility and animation logic.
            </summary>
        </member>
        <member name="M:Blazorise.CloseableAdapter.#ctor(Blazorise.IHideableComponent)">
            <summary>
            Default constructor for <see cref="T:Blazorise.CloseableAdapter"/>.
            </summary>
            <param name="component">Reference to the close activator.</param>
        </member>
        <member name="M:Blazorise.CloseableAdapter.Run(System.Boolean)">
            <summary>
            Runs <see cref="T:Blazorise.IHideableComponent"/> procedure.
            </summary>
            <param name="visible">Visibility flag.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.CloseActivatorAdapter">
            <summary>
            Middleman between the closable component and javascript.
            </summary>
        </member>
        <member name="M:Blazorise.CloseActivatorAdapter.#ctor(Blazorise.ICloseActivator)">
            <summary>
            Default constructor for <see cref="T:Blazorise.CloseActivatorAdapter"/>.
            </summary>
            <param name="component">Reference to the close activator.</param>
        </member>
        <member name="M:Blazorise.CloseActivatorAdapter.GetElementId">
            <summary>
            Gets the closable element id.
            </summary>
            <returns>A closable element id.</returns>
        </member>
        <member name="M:Blazorise.CloseActivatorAdapter.SafeToClose(System.String,System.String,System.Boolean)">
            <summary>
            Checks if the closable component is safe to close.
            </summary>
            <param name="elementId">Element id that has trigger close.</param>
            <param name="reason">Reason for closing.</param>
            <param name="isChildClicked">True if child element was clicked.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.CloseActivatorAdapter.Close(System.String)">
            <summary>
            Closes the closable component.
            </summary>
            <param name="reason">Reason for closing.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.CloseActivatorAdapter.GetCloseReason(System.String)">
            <summary>
            Gets the <see cref="T:Blazorise.CloseReason"/> based on a name.
            </summary>
            <param name="reason">Close reason name.</param>
            <returns>Returns a close reason.</returns>
        </member>
        <member name="T:Blazorise.DatePickerAdapter">
            <summary>
            Middleman between the DatePicker component and javascript.
            </summary>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.#ctor(Blazorise.IDatePicker)">
            <summary>
            Default constructor for <see cref="T:Blazorise.DatePickerAdapter"/>.
            </summary>
            <param name="datePicker">Date input to which the adapter is referenced.</param>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePickerAdapter.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.FileEditAdapter">
            <summary>
            Middleman between the FileEdit component and javascript.
            </summary>
        </member>
        <member name="M:Blazorise.FileEditAdapter.#ctor(Blazorise.IFileEdit)">
            <summary>
            Default constructor for <see cref="T:Blazorise.FileEditAdapter"/>.
            </summary>
            <param name="fileEdit">File input to which the adapter is referenced.</param>
        </member>
        <member name="M:Blazorise.FileEditAdapter.NotifyChange(Blazorise.FileEntry[])">
            <summary>
            Notify us from JS that file(s) has changed.
            </summary>
            <param name="files">List of changed files.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.NumericPickerAdapter">
            <summary>
            Middleman between the NumericPicker component and javascript.
            </summary>
        </member>
        <member name="M:Blazorise.NumericPickerAdapter.#ctor(Blazorise.INumericPicker)">
            <summary>
            Default constructor for <see cref="T:Blazorise.NumericPickerAdapter"/>.
            </summary>
            <param name="numericEdit">Numeric input to which the adapter is referenced.</param>
        </member>
        <member name="M:Blazorise.NumericPickerAdapter.SetValue(System.String)">
            <summary>
            Notify us from JS that input value changed.
            </summary>
            <param name="value">New input value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.BaseAfterRenderComponent">
            <summary>
            Base render component that implements render-queue logic.
            </summary>
        </member>
        <member name="F:Blazorise.BaseAfterRenderComponent.executeAfterRenderQueue">
            <summary>
            A stack of functions to execute after the rendering.
            </summary>
        </member>
        <member name="F:Blazorise.BaseAfterRenderComponent.delayedExecuteAfterRenderQueue">
            <summary>
            A stack of functions to execute after the rendering. Used only during the component initialization.
            </summary>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.ExecuteAfterRender(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Pushes an action to the stack to be executed after the rendering is done.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.OnFirstAfterRenderAsync">
            <summary>
            Method is called only once when component is first rendered.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Blazorise.BaseComponent"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">True if the component is in the disposing process.</param>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseAfterRenderComponent.DisposeAsync(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Blazorise.BaseComponent"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">True if the component is in the disposing process.</param>
        </member>
        <member name="P:Blazorise.BaseAfterRenderComponent.Disposed">
            <summary>
            Indicates if the component is already fully disposed.
            </summary>
        </member>
        <member name="P:Blazorise.BaseAfterRenderComponent.AsyncDisposed">
            <summary>
            Indicates if the component is already fully disposed (asynchronously).
            </summary>
        </member>
        <member name="P:Blazorise.BaseAfterRenderComponent.Rendered">
            <summary>
            Indicates if component has been rendered in the browser.
            </summary>
        </member>
        <member name="P:Blazorise.BaseAfterRenderComponent.ComponentDisposer">
            <summary>
            Service that frees the component from the memory.
            </summary>
        </member>
        <member name="T:Blazorise.BaseCheckComponent`1">
            <summary>
            Base class for all check-able components.
            </summary>
            <typeparam name="TValue">Checked value type.</typeparam>
        </member>
        <member name="M:Blazorise.BaseCheckComponent`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the check input onchange event.
            </summary>
            <param name="eventArgs">Supplies information about an change event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseCheckComponent`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseCheckComponent`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.TrueValueName">
            <summary>
            Gets the string value that represents the checked state.
            </summary>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.Checked">
            <summary>
            Gets or sets the checked flag.
            </summary>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.CheckedChanged">
            <summary>
            Occurs when the check state is changed.
            </summary>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.CheckedExpression">
            <summary>
            Gets or sets an expression that identifies the checked value.
            </summary>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.Inline">
            <summary>
            Group checkboxes or radios on the same horizontal row.
            </summary>
        </member>
        <member name="P:Blazorise.BaseCheckComponent`1.Cursor">
            <summary>
            Defines the mouse cursor based on the behaviour by the current css framework.
            </summary>
        </member>
        <member name="T:Blazorise.BaseColumnComponent">
            <summary>
            Base class for components that are containers for other components.
            </summary>
        </member>
        <member name="M:Blazorise.BaseColumnComponent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseColumnComponent.PreventColumnSize">
            <summary>
            Indicates if the column size generator should be skipped. Used to override the use of column sizes by some of the providers.
            </summary>
        </member>
        <member name="P:Blazorise.BaseColumnComponent.InsideGrid">
            <summary>
            Indicates if the column is placed inside of <see cref="T:Blazorise.Grid"/> component as a direct descendant.
            </summary>
        </member>
        <member name="P:Blazorise.BaseColumnComponent.ParentRow">
            <summary>
            Cascaded <see cref="T:Blazorise.Row"/> component in which this <see cref="T:Blazorise.Column"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.BaseColumnComponent.ParentGrid">
            <summary>
            Cascaded <see cref="T:Blazorise.Grid"/> component in which this <see cref="T:Blazorise.Column"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.BaseColumnComponent.ColumnSize">
            <summary>
            Defines the column sizes.
            </summary>
        </member>
        <member name="P:Blazorise.BaseColumnComponent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BaseColumnComponent"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BaseComponent">
            <summary>
            Base class for all DOM based components.
            </summary>
        </member>
        <member name="M:Blazorise.BaseComponent.#ctor">
            <summary>
            Default constructor for <see cref="T:Blazorise.BaseComponent"/>.
            </summary>
        </member>
        <member name="M:Blazorise.BaseComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseComponent.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseComponent.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseComponent.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseComponent.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseComponent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for this component.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.BaseComponent.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <summary>
            Builds a list of styles for this component.
            </summary>
            <param name="builder">Style builder used to append the styles.</param>
        </member>
        <member name="M:Blazorise.BaseComponent.DirtyClasses">
            <summary>
            Clears the class-names and mark them to be regenerated.
            </summary>
        </member>
        <member name="M:Blazorise.BaseComponent.DirtyStyles">
            <summary>
            Clears the styles-names and mark them to be regenerated.
            </summary>
        </member>
        <member name="M:Blazorise.BaseComponent.CreateDotNetObjectRef``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.JSInterop.DotNetObjectReference`1"/>.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="value">The reference of the tracked object.</param>
            <returns>An instance of <see cref="T:Microsoft.JSInterop.DotNetObjectReference`1"/>.</returns>
        </member>
        <member name="M:Blazorise.BaseComponent.DisposeDotNetObjectRef``1(Microsoft.JSInterop.DotNetObjectReference{``0})">
            <summary>
            Destroys the instance of <see cref="T:Microsoft.JSInterop.DotNetObjectReference`1"/>.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="value">The reference of the tracked object.</param>
        </member>
        <member name="P:Blazorise.BaseComponent.ElementRef">
            <summary>
            Gets or sets the reference to the rendered element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.ElementId">
            <summary>
            Gets or sets the unique id of the element.
            </summary>
            <remarks>
            Note that this ID is not defined for the component but instead for the underlined element that it represents.
            eg: for the TextEdit the ID will be set on the input element.
            </remarks>
        </member>
        <member name="P:Blazorise.BaseComponent.ShouldAutoGenerateId">
            <summary>
            If true, <see cref="P:Blazorise.BaseComponent.ElementId"/> will be auto-generated on component initialize.
            </summary>
            <remarks>
            Override this in components that need to have an id defined before calling JSInterop.
            </remarks>
        </member>
        <member name="P:Blazorise.BaseComponent.ClassBuilder">
            <summary>
            Gets the class builder.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.ClassNames">
            <summary>
            Gets the built class-names based on all the rules set by the component parameters.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.StyleBuilder">
            <summary>
            Gets the style mapper.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.StyleNames">
            <summary>
            Gets the built styles based on all the rules set by the component parameters.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.IdGenerator">
            <summary>
            Gets or set the javascript runner.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.ClassProvider">
            <summary>
            Gets or sets the classname provider.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.StyleProvider">
            <summary>
            Gets or sets the style provider.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.JSUtilitiesModule">
            <summary>
            Gets or sets the IJSUtilitiesModule reference.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.LicenseChecker">
            <summary>
            Gets or sets the license checker for the user session.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Class">
            <summary>
            Custom css class name.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Style">
            <summary>
            Custom html style.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Float">
            <summary>
            Floats an element to the defined side.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Clearfix">
            <summary>
            Fixes an element's floating children.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Visibility">
            <summary>
            Controls the visibility, without modifying the display, of elements with visibility utilities.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Width">
            <summary>
            Defined the sizing for the element width attribute(s).
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Height">
            <summary>
            Defined the sizing for the element height attribute(s).
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Margin">
            <summary>
            Defines the element margin spacing.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Padding">
            <summary>
            Defines the element padding spacing.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Gap">
            <summary>
            Defines the element gap spacing.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Display">
            <summary>
            Specifies the display behavior of an element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Border">
            <summary>
            Specifies the border of an element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Flex">
            <summary>
            Specifies flexbox properties of an element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Position">
            <summary>
            The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Overflow">
            <summary>
            The overflow property controls what happens to content that is too big to fit into an area.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Casing">
            <summary>
            Changes the character casing of a element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.TextColor">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.TextTransform">
            <summary>
            Gets or sets the text transformation.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.TextWeight">
            <summary>
            Gets or sets the text weight.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.TextOverflow">
            <summary>
            Determines how the text will behave when it is larger than a parent container.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.TextSize">
            <summary>
            Determines the font size of an element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.VerticalAlignment">
            <summary>
            Changes the vertical alignment of inline, inline-block, inline-table, and table cell elements.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Background">
            <summary>
            Gets or sets the component background color.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Shadow">
            <summary>
            Gets or sets the component shadow box.
            </summary>
        </member>
        <member name="P:Blazorise.BaseComponent.Attributes">
            <summary>
            Captures all the custom attribute that are not part of Blazorise component.
            </summary>
        </member>
        <member name="T:Blazorise.BaseDraggableComponent">
            <summary>
            Base component for all the components that needs to have drag and drop support.
            </summary>
        </member>
        <member name="F:Blazorise.BaseDraggableComponent.dotNetObjectRef">
            <summary>
            Object reference that can be accessed through the JSInterop.
            </summary>
        </member>
        <member name="F:Blazorise.BaseDraggableComponent.jsEventsInitialized">
            <summary>
            Is <c>true</c> if the component needs to clean up the JS ThrottleDragEvent handler on <see cref="M:Blazorise.BaseDraggableComponent.Dispose(System.Boolean)"/> or <see cref="M:Blazorise.BaseDraggableComponent.DisposeAsync(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDragHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.Drag"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDragEndHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.DragEnd"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDragEnterHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.DragEnter"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDragLeaveHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.DragLeave"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDragOverHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.DragOver"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDragStartHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.DragStart"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnDropHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.Drop"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an drag event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseDraggableComponent.OnContextMenuHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Event handler for <see cref="P:Blazorise.BaseDraggableComponent.ContextMenu"/> event callback.
            </summary>
            <param name="eventArgs">Supplies information about an contextmenu event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DraggableString">
            <summary>
            Gets the valid draggable attribute value if <see cref="P:Blazorise.BaseDraggableComponent.Draggable"/> is enabled.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.JSDragDropModule">
            <summary>
            Gets or sets the <see cref="P:Blazorise.BaseDraggableComponent.JSDragDropModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.Draggable">
            <summary>
            Indicates whether the element can be dragged.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.Drag">
            <summary>
            The drag event is fired every few hundred milliseconds as an element or text selection is being dragged by the user.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.Drag"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragEnd">
            <summary>
            The DragEnd event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragEndPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.DragEnd"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragEnter">
            <summary>
            The DragEnter event is fired when a dragged element or text selection enters a valid drop target.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragEnterPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.DragEnter"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragLeave">
            <summary>
            The DragLeave event is fired when a dragged element or text selection leaves a valid drop target.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragLeavePreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.DragLeave"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragOver">
            <summary>
            The DragOver event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragOverPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.DragOver"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragStart">
            <summary>
            The DragStart event is fired when the user starts dragging an element or text selection.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DragStartPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.DragStart"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.Drop">
            <summary>
            The drop event is fired when an element or text selection is dropped on a valid drop target.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.DropPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.Drop"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.ContextMenu">
            <summary>
            The event is fired when an element or text selection is right clicked to show the context menu.
            </summary>
        </member>
        <member name="P:Blazorise.BaseDraggableComponent.ContextMenuPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="P:Blazorise.BaseDraggableComponent.ContextMenu"/> event.
            </summary>
        </member>
        <member name="T:Blazorise.BaseElementComponent">
            <summary>
            Base class for all basic html elements.
            </summary>
        </member>
        <member name="P:Blazorise.BaseElementComponent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this component.
            </summary>
        </member>
        <member name="T:Blazorise.BaseFocusableContainerComponent">
            <summary>
            Base component that is used as a container for focusable components.
            </summary>
        </member>
        <member name="F:Blazorise.BaseFocusableContainerComponent.focusableComponents">
            <summary>
            A focusable components placed inside of a modal.
            </summary>
            <remarks>
            Only one component can be focused, but the reason why we hold the list
            of components is in case we change Autofocus="true" from one component to the other.
            And because order of rendering is important, we must make sure that the last component
            does NOT set focusableComponent to null.
            </remarks>
        </member>
        <member name="M:Blazorise.BaseFocusableContainerComponent.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseFocusableContainerComponent.HandleFocusableComponent">
            <summary>
            Handles the focus of the nested component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.BaseFocusableContainerComponent.NotifyFocusableComponentInitialized(Blazorise.IFocusableComponent)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseFocusableContainerComponent.NotifyFocusableComponentRemoved(Blazorise.IFocusableComponent)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseFocusableContainerComponent.FocusableComponents">
            <summary>
            Gets the list of focusable components.
            </summary>
        </member>
        <member name="P:Blazorise.BaseFocusableContainerComponent.HasFocusableComponents">
            <summary>
            Returns true if modal contains and component that should be autofocused.
            </summary>
        </member>
        <member name="P:Blazorise.BaseFocusableContainerComponent.ParentFocusableContainer">
            <summary>
            Parent focusable container.
            </summary>
        </member>
        <member name="T:Blazorise.BaseGridComponent">
            <summary>
            Base class for components that are containers for column components.
            </summary>
        </member>
        <member name="P:Blazorise.BaseGridComponent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BaseGridComponent"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BaseInputComponent`1">
            <summary>
            Base component for all the input component types.
            </summary>
        </member>
        <member name="F:Blazorise.BaseInputComponent`1.size">
            <summary>
            Size of an input element.
            </summary>
        </member>
        <member name="F:Blazorise.BaseInputComponent`1.readOnly">
            <summary>
            Specifies that an input field is read-only.
            </summary>
        </member>
        <member name="F:Blazorise.BaseInputComponent`1.disabled">
            <summary>
            Specifies that the input element should be disabled.
            </summary>
        </member>
        <member name="F:Blazorise.BaseInputComponent`1.autofocus">
            <summary>
            Internal value for autofocus flag.
            </summary>
        </member>
        <member name="F:Blazorise.BaseInputComponent`1.validationInitialized">
            <summary>
            Flag that tells us validation is already being initialized so we don't do it more than once.
            </summary>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.ReleaseResources">
            <summary>
            Shared code to dispose of any internal resources.
            </summary>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.InitializeValidation">
            <summary>
            Initializes input component for validation.
            </summary>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.CurrentValueHandler(System.String)">
            <summary>
            Handles the parsing of an input value.
            </summary>
            <param name="value">Input value to be parsed.</param>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.ParseValueFromStringAsync(System.String)">
            <summary>
            Parses a string value and convert it to a <see cref="T:Blazorise.BaseInputComponent`1"/>.
            </summary>
            <param name="value">A string value to convert.</param>
            <returns>Returns the result of parse operation.</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.FormatValueAsString(`0)">
            <summary>
            Formats the supplied value to it's valid string representation.
            </summary>
            <param name="value">Value to format.</param>
            <returns>Returns value formatted as string.</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.PrepareValueForValidation(`0)">
            <summary>
            Prepares the right value to be sent for validation.
            </summary>
            <remarks>
            In some special cases we need to know what is the right value of the underline component.
            Like for example for <see cref="T:Blazorise.Select`1"/> component where we can have value represented as
            a single or multiple value, depending on the context where it is used.
            </remarks>
            <param name="value">Value to prepare for validation.</param>
            <returns>Returns the value that is going to be validated.</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.IsSameAsInternalValue(`0)">
            <summary>
            Check if the internal value is same as the new value.
            </summary>
            <param name="value">Value to check against the internal value.</param>
            <returns>True if the internal value matched the supplied value.</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnInternalValueChanged(`0)">
            <summary>
            Raises and event that handles the edit value of Text, Date, Numeric etc.
            </summary>
            <param name="value">New edit value.</param>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.Focus(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeydown event.
            </summary>
            <param name="eventArgs">Information about the keyboard down event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeypress event.
            </summary>
            <param name="eventArgs">Information about the keyboard pressed event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeyup event.
            </summary>
            <param name="eventArgs">Information about the keyboard up event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onblur event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onfocus event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onfocusin event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onfocusout event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.Revalidate">
            <summary>
            Forces the <see cref="T:Blazorise.Validation"/>(if any is used) to re-validate with the new custom or internal value.
            </summary>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnValidationStatusChanged(System.Object,Blazorise.ValidationStatusChangedEventArgs)">
            <summary>
            Handler for validation status change event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Information about the validation status.</param>
        </member>
        <member name="M:Blazorise.BaseInputComponent`1.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ValidationValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ParentIsFieldBody">
            <summary>
            Returns true if input belong to a <see cref="T:Blazorise.FieldBody"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ParentIsAddons">
            <summary>
            Returns true if input belong to a <see cref="T:Blazorise.Addons"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.DefaultValue">
            <summary>
            Returns the default value for the <typeparamref name="TValue"/> type.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.InternalValue">
            <summary>
            Gets or sets the internal edit value.
            </summary>
            <remarks>
            The reason for this to be abstract is so that input components can have
            their own specialized parameters that can be binded(Text, Date, Value etc.)
            </remarks>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.CurrentValue">
            <summary>
            Gets or sets the current input value.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.CurrentValueAsString">
            <summary>
            Gets or sets the current input value represented as a string.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ReadOnlyAsString">
            <summary>
            Gets the <see cref="P:Blazorise.BaseInputComponent`1.ReadOnly"/> value represented as a string.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ThemeSize">
            <summary>
            Gets the size based on the theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.JSUtilitiesModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSUtilitiesModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Options">
            <summary>
            Holds the information about the Blazorise global options.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Size">
            <summary>
            Sets the size of the input control.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ReadOnly">
            <summary>
            Add the readonly boolean attribute on an input to prevent modification of the input’s value.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Disabled">
            <summary>
            Add the disabled boolean attribute on an input to prevent user interactions and make it appear lighter.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Autofocus">
            <summary>
            Set's the focus to the component after the rendering is done.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Feedback">
            <summary>
            Placeholder for validation messages.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ChildContent">
            <summary>
            Input content.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.KeyDown">
            <summary>
            Occurs when a key is pressed down while the control has focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.KeyPress">
            <summary>
            Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.KeyUp">
            <summary>
            Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Blur">
            <summary>
            The blur event fires when an element has lost focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.OnFocus">
            <summary>
            Occurs when the input box gains or loses focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.FocusIn">
            <summary>
            Occurs when the input box gains focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.FocusOut">
            <summary>
            Occurs when the input box loses focus.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.TabIndex">
            <summary>
            If defined, indicates that its element can be focused and can participates in sequential keyboard navigation.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.CustomValidationValue">
            <summary>
            Used to provide custom validation value on which the validation will be processed with
            the <see cref="P:Blazorise.Validation.Validator"/> handler.
            </summary>
            <remarks>
            Should be used carefully as it's only meant for some special cases when input is used
            in a wrapper component, like Autocomplete or SelectList.
            </remarks>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ParentValidation">
            <summary>
            Parent validation container.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ParentFieldBody">
            <summary>
            Parent field body.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ParentAddons">
            <summary>
            Gets or sets the reference to the parent addons.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.ParentFocusableContainer">
            <summary>
            Parent focusable container.
            </summary>
        </member>
        <member name="P:Blazorise.BaseInputComponent`1.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.BaseLinkComponent">
            <summary>
            Base component that renders an anchor tag, automatically toggling its 'active'
            state based on whether its 'href' matches the current URI.
            </summary>
            <remarks>
            Any link styling must be applied by the implementation classes. 
            </remarks>
        </member>
        <member name="M:Blazorise.BaseLinkComponent.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseLinkComponent.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseLinkComponent.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseLinkComponent.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the link onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BaseLinkComponent.GetAbsoluteUri(System.String)">
            <summary>
            Converts a relative URI into an absolute one (by resolving it relative to the
            current absolute URI).
            </summary>
            <param name="relativeUri">The relative URI.</param>
            <returns>The absolute URI.</returns>
        </member>
        <member name="M:Blazorise.BaseLinkComponent.GetTo">
            <summary>
            Resolves the <see cref="P:Blazorise.BaseLinkComponent.To"/> value for the href attribute.
            </summary>
            <returns>Href value.</returns>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.PreventDefault">
            <summary>
            Indicates if the default behavior will be prevented.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.TargetName">
            <summary>
            Gets the link target name.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Active">
            <summary>
            True, if the <see cref="P:Blazorise.BaseLinkComponent.To"/> parameter is the same as the current route uri.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.AriaDisabledString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.BaseLinkComponent.Disabled"/> value for the aria-disabled attribute.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.JSUtilitiesModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSUtilitiesModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.NavigationManager">
            <summary>
            Gets or sets the navigation manager instance.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.To">
            <summary>
            Denotes the target route of the link.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Match">
            <summary>
            URL matching behavior for a link.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.CustomMatch">
            <summary>
            A callback function that is used to compare current uri with the user defined uri. Must enable <see cref="F:Blazorise.Match.Custom"/> to be used.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Target">
            <summary>
            The target attribute specifies where to open the linked document.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Title">
            <summary>
            Specify extra information about the element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Unstyled">
            <summary>
            Removes default color styles from the link.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Stretched">
            <summary>
            Makes any HTML element or component clickable by “stretching” a nested link.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Disabled">
            <summary>
            Makes the link look inactive by adding the disabled boolean attribute.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.Clicked">
            <summary>
            Occurs when the link is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.BaseLinkComponent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Link"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BaseRowComponent">
            <summary>
            Base class for components that are containers for column components.
            </summary>
        </member>
        <member name="P:Blazorise.BaseRowComponent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BaseRowComponent"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BaseSizableFieldComponent">
            <summary>
            Base class for field and input components that can be sized in grid layout.
            </summary>
        </member>
        <member name="M:Blazorise.BaseSizableFieldComponent.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseSizableFieldComponent.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseSizableFieldComponent.IsHorizontal">
            <summary>
            True if component is inside of a <see cref="T:Blazorise.Field"/> marked as horizontal.
            </summary>
        </member>
        <member name="P:Blazorise.BaseSizableFieldComponent.IsInsideField">
            <summary>
            True if component is inside of a <see cref="T:Blazorise.Field"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BaseSizableFieldComponent.ParentField">
            <summary>
            Cascaded parent <see cref="T:Blazorise.Field"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.BaseTemplateContext`1">
            <summary>
            Holds the template context for an Item based component.
            </summary>
            <typeparam name="TItem">Type of an item.</typeparam>
        </member>
        <member name="M:Blazorise.BaseTemplateContext`1.#ctor(`0)">
            <summary>
            Initializes BaseContext.
            </summary>
            <param name="item">Holds the Item.</param>
        </member>
        <member name="P:Blazorise.BaseTemplateContext`1.Item">
            <summary>
            The contextual Item.
            </summary>
        </member>
        <member name="T:Blazorise.BaseTextInput`1">
            <summary>
            Base component for inputs that are text-based.
            </summary>
            <typeparam name="TValue">Editable value type.</typeparam>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.ReleaseResources">
            <summary>
            Shared code to dispose of any internal resources.
            </summary>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handler for @onchange event.
            </summary>
            <param name="eventArgs">Information about the changed event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.OnInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handler for @oninput event.
            </summary>
            <param name="eventArgs">Information about the changed event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.OnInputValueDebounce(System.Object,System.String)">
            <summary>
            Event raised after the delayed value time has expired.
            </summary>
            <param name="sender">Object that raised an event.</param>
            <param name="value">Latest received value.</param>
        </member>
        <member name="M:Blazorise.BaseTextInput`1.Select(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.IsImmediate">
            <summary>
            Returns true if internal value should be updated with each key press.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.IsDebounce">
            <summary>
            Returns true if updating of internal value should be delayed.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.DebounceIntervalValue">
            <summary>
            Time in milliseconds by which internal value update should be delayed.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.BindValueEventName">
            <summary>
            the name of the event for the input element.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.InputValueDebouncer">
            <summary>
            Gets the debouncer reference.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.Placeholder">
            <summary>
            Sets the placeholder for the empty text.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.Plaintext">
            <summary>
            Sets the class to remove the default form field styling and preserve the correct margin and padding.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.Color">
            <summary>
            Sets the input text color.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.Pattern">
            <summary>
            The pattern attribute specifies a regular expression that the input element's value is checked against on form validation.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.Immediate">
            <summary>
            If true the text in will be changed after each key press.
            </summary>
            <remarks>
            Note that setting this will override global settings in <see cref="P:Blazorise.BlazoriseOptions.Immediate"/>.
            </remarks>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.Debounce">
            <summary>
            If true the entered text will be slightly delayed before submitting it to the internal value.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTextInput`1.DebounceInterval">
            <summary>
            Interval in milliseconds that entered text will be delayed from submitting to the internal value.
            </summary>
        </member>
        <member name="T:Blazorise.BaseTypographyComponent">
            <summary>
            Base class for all text-based components.
            </summary>
        </member>
        <member name="M:Blazorise.BaseTypographyComponent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseTypographyComponent.OnClickHandler">
            <summary>
            Handles the component click event.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blazorise.BaseTypographyComponent.JSUtilitiesModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSUtilitiesModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTypographyComponent.Italic">
            <summary>
            Italicize text if set to true.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTypographyComponent.CopyToClipboard">
            <summary>
            If true, the content of the component will be copied to clipboard on click event.
            </summary>
        </member>
        <member name="P:Blazorise.BaseTypographyComponent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this component.
            </summary>
        </member>
        <member name="T:Blazorise.BaseValidationResult">
            <summary>
            Base class for validation result messages.
            </summary>
        </member>
        <member name="M:Blazorise.BaseValidationResult.#ctor">
            <summary>
            A default constructors for <see cref="T:Blazorise.BaseValidationResult"/>.
            </summary>
        </member>
        <member name="M:Blazorise.BaseValidationResult.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseValidationResult.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BaseValidationResult.OnValidationStatusChanged(System.Object,Blazorise.ValidationStatusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BaseValidationResult.ParentValidation">
            <summary>
            Gets or sets the reference to the parent validation.
            </summary>
        </member>
        <member name="P:Blazorise.BaseValidationResult.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BaseValidationResult"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BlazoriseOptions">
            <summary>
            Defines the global Blazorise options.
            </summary>
        </member>
        <member name="M:Blazorise.BlazoriseOptions.#ctor(System.IServiceProvider,System.Action{Blazorise.BlazoriseOptions})">
            <summary>
            A default constructors for <see cref="T:Blazorise.BlazoriseOptions"/>.
            </summary>
            <param name="serviceProvider">Service provider.</param>
            <param name="configureOptions">A handler for setting the blazorise options.</param>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.LicenseKey">
            <summary>
            Defines the product token issued by the Blazorise licensing system.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.ProductToken">
            <summary>
            Defines the product token issued by the Blazorise licensing system.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.Immediate">
            <summary>
            If true the text in <see cref="T:Blazorise.TextEdit"/> will be changed after each key press.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.Debounce">
            <summary>
            If true the entered into <see cref="T:Blazorise.TextEdit"/> will be slightly delayed before submitting it to the internal value.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.DebounceInterval">
            <summary>
            Interval in milliseconds that entered text will be delayed from submitting to the <see cref="T:Blazorise.TextEdit"/> internal value.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.ChangeSliderOnHold">
            <summary>
            If true the value in <see cref="T:Blazorise.Slider`1"/> will be changed while holding and moving the slider.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.AutoCloseParent">
            <summary>
            If true, the component that can control it's parent will automatically close it.
            </summary>
            <remarks>
            This behavior can be seen on <see cref="T:Blazorise.CloseButton"/> that can auto-close it's <see cref="T:Blazorise.Alert"/>
            or it's <see cref="T:Blazorise.Modal"/> parent component.
            </remarks>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.ValidationMessageLocalizer">
            <summary>
            Global handler that can be used to override and localize validation messages before they
            are shown on the <see cref="T:Blazorise.ValidationError"/> or <see cref="T:Blazorise.ValidationSuccess"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.ThemeCacheSize">
            <summary>
            Maximum amount of <see cref="T:Blazorise.Theme">Themes</see> that are cached at the same time.
            When set to a value &lt; 1, the <see cref="T:Blazorise.Themes.ThemeCache">ThemeCache</see> is deactivated.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.ShowNumericStepButtons">
            <summary>
            If true, the spin buttons on <see cref="T:Blazorise.NumericPicker`1"/> will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.EnableNumericStep">
            <summary>
            If true, enables change of <see cref="T:Blazorise.NumericPicker`1"/> by pressing on step buttons or by keyboard up/down keys.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.ModalFocusTrap">
            <summary>
            If true, modal will keep input focus.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.IconStyle">
            <summary>
            Defines the default icon style. Can be overriden on an each individual icon.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.IconSize">
            <summary>
            Defines the default icon size. Can be overriden on an each individual icon.
            </summary>
        </member>
        <member name="P:Blazorise.BlazoriseOptions.Services">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="T:Blazorise.ComponentActivator">
            <summary>
            Blazorise implementation of <see cref="T:Microsoft.AspNetCore.Components.IComponentActivator"/> used to initialize components that
            are registered through the dependency injection.
            </summary>
        </member>
        <member name="M:Blazorise.ComponentActivator.#ctor(System.IServiceProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="serviceProvider">Service provider used to retrieve registered components.</param>
        </member>
        <member name="M:Blazorise.ComponentActivator.CreateInstance(System.Type)">
            <summary>
            Created the component for the specified type.
            </summary>
            <param name="componentType">Type of component to create.</param>
            <returns>Return the newly created component or raises an exception if the specified typo is invalid.</returns>
        </member>
        <member name="P:Blazorise.ComponentActivator.ServiceProvider">
            <summary>
            Gets the reference to the <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="T:Blazorise.IComponentDisposer">
            <summary>
            Handles the disposable transient components by freeing them from memory.
            </summary>
        </member>
        <member name="M:Blazorise.IComponentDisposer.Dispose``1(``0)">
            <summary>
            Frees the component from <see cref="T:System.IServiceProvider"/> disposable collection.
            </summary>
            <typeparam name="TComponent">Type of the component to free.</typeparam>
            <param name="component">Component to free.</param>
        </member>
        <member name="M:Blazorise.ComponentDisposer.#ctor(System.IServiceProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="serviceProvider">Service provider used to retrieve registered components.</param>
        </member>
        <member name="M:Blazorise.ComponentDisposer.LoadServiceProviderDisposableList">
            <summary>
            Loads the ServiceProvider's list of disposables
            </summary>
            <returns>List of object references the ServiceProvider uses to track disposables</returns>
        </member>
        <member name="P:Blazorise.ComponentDisposer.ServiceProvider">
            <summary>
            Gets the reference to the <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Accordion">
            <summary>
            An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
            </summary>
        </member>
        <member name="M:Blazorise.Accordion.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Accordion.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Accordion"/>.
            </summary>
        </member>
        <member name="T:Blazorise.AccordionBody">
            <summary>
            A wrapper for accordion content.
            </summary>
        </member>
        <member name="M:Blazorise.AccordionBody.#ctor">
            <summary>
            A default <see cref="T:Blazorise.AccordionBody"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.AccordionBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AccordionBody.BuildBodyClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a accordion body element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.AccordionBody.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.AccordionBody.ContentClassBuilder">
            <summary>
            Body container class builder.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionBody.ContentClassNames">
            <summary>
            Gets body container class-names.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionBody.Visible">
            <summary>
            Gets or sets the content visibility.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionBody.ParentAccordionItem">
            <summary>
            Gets or sets the cascaded parent accordion item component.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.AccordionBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.AccordionHeader">
            <summary>
            A wrapper for accordion header.
            </summary>
        </member>
        <member name="M:Blazorise.AccordionHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AccordionHeader.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the header onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.AccordionHeader.ParentAccordionItem">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.AccordionItem"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionHeader.Clicked">
            <summary>
            Occurs when the accordion header is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.AccordionHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.AccordionItem">
            <summary>
            Toggle visibility of almost any content on your pages in a vertically collapsing container.
            </summary>
        </member>
        <member name="M:Blazorise.AccordionItem.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AccordionItem.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AccordionItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AccordionItem.Toggle">
            <summary>
            Toggles the accordion item visibility state.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.AccordionItem.HandleVisibilityState(System.Boolean)">
            <summary>
            Sets the visibility state of this <see cref="T:Blazorise.AccordionItem"/> component.
            </summary>
            <param name="visible">True if <see cref="T:Blazorise.AccordionItem"/> is visible.</param>
        </member>
        <member name="M:Blazorise.AccordionItem.RaiseEvents(System.Boolean)">
            <summary>
            Raises all registered events for this <see cref="T:Blazorise.AccordionItem"/> component.
            </summary>
            <param name="visible">True if <see cref="T:Blazorise.AccordionItem"/> is visible.</param>
        </member>
        <member name="P:Blazorise.AccordionItem.FirstInAccordion">
            <summary>
            Determines if the accordion item is placed inside of accordion component as the first item.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionItem.LastInAccordion">
            <summary>
            Determines if the accordion item is placed inside of accordion component as the last item.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionItem.Visible">
            <summary>
            Gets or sets the accordion item visibility state.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionItem.VisibleChanged">
            <summary>
            Occurs when the accordion item visibility state changes.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionItem.ParentAccordion">
            <summary>
            Gets or sets the cascaded parent accordion component.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.AccordionItem"/>.
            </summary>
        </member>
        <member name="T:Blazorise.AccordionToggle">
            <summary>
            Button component used to toggle accordion collapse state.
            </summary>
        </member>
        <member name="M:Blazorise.AccordionToggle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AccordionToggle.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.AccordionToggle.ParentAccordion">
            <summary>
            Gets or sets the cascaded parent accordion component.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionToggle.ParentCollapse">
            <summary>
            Gets or sets the cascaded parent collapse component.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionToggle.ParentAccordionItem">
            <summary>
            Gets or sets the cascaded parent accordion item component.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionToggle.CollapseVisible">
            <summary>
            Gets or sets the content visibility.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionToggle.AccordionItemVisible">
            <summary>
            Gets or sets the content visibility.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionToggle.Clicked">
            <summary>
            Occurs when the toggle button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.AccordionToggle.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.AccordionToggle"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Addon">
            <summary>
            Wrapper for buttons, labels or inputs placed inside of <see cref="T:Blazorise.Addons"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.Addon.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Addon.AddonType">
            <summary>
            Defines the location and behaviour of addon container.
            </summary>
        </member>
        <member name="P:Blazorise.Addon.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Accordion"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Addon.ParentAddons">
            <summary>
            Gets or sets the reference to the parent addons.
            </summary>
        </member>
        <member name="T:Blazorise.AddonLabel">
            <summary>
            Static text that can be placed inside of an <see cref="T:Blazorise.Addon"/>.
            </summary>
        </member>
        <member name="M:Blazorise.AddonLabel.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.AddonLabel.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Addon"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Addons">
            <summary>
            Wrapper for text, buttons, or button groups on either side of textual inputs.
            </summary>
        </member>
        <member name="M:Blazorise.Addons.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Addons.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Addons.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Addons.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Addons.NotifyButtonInitialized(Blazorise.Button)">
            <summary>
            Notify addons that a button is placed inside of it.
            </summary>
            <param name="button">A button reference that is placed inside of the addons.</param>
        </member>
        <member name="M:Blazorise.Addons.NotifyButtonRemoved(Blazorise.Button)">
            <summary>
            Notify addons that a button is removed from it.
            </summary>
            <param name="button">A button reference that is placed inside of the addons.</param>
        </member>
        <member name="M:Blazorise.Addons.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.Addons.ParentIsHorizontal">
            <summary>
            True if <see cref="T:Blazorise.Addons"/> is placed inside of <see cref="T:Blazorise.Field"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Addons.ThemeSize">
            <summary>
            Gets the size based on the theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.Addons.Size">
            <summary>
            Changes the size of the elements placed inside of this <see cref="T:Blazorise.Accordion"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Addons.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Accordion"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Addons.ParentField">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Field"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Addons.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.Alert">
            <summary>
            Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.
            </summary>
        </member>
        <member name="F:Blazorise.Alert.state">
            <summary>
            Holds the state of the <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.Alert.hasMessage">
            <summary>
            Flag that indicates if <see cref="T:Blazorise.Alert"/> contains the <see cref="T:Blazorise.AlertMessage"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.Alert.hasDescription">
            <summary>
            Flag that indicates if <see cref="T:Blazorise.Alert"/> contains the <see cref="T:Blazorise.AlertDescription"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.Alert.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Alert.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Alert.Show">
            <summary>
            Displays the alert to the user.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Alert.Hide">
            <summary>
            Conceals the alert from the user.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Alert.Toggle">
            <summary>
            Toggles the visibility of the alert.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Alert.HandleVisibilityState(System.Boolean)">
            <summary>
            Sets the visibility state of this <see cref="T:Blazorise.Alert"/> component.
            </summary>
            <param name="visible">True if <see cref="T:Blazorise.Alert"/> is visible.</param>
        </member>
        <member name="M:Blazorise.Alert.RaiseEvents(System.Boolean)">
            <summary>
            Raises all registered events for this <see cref="T:Blazorise.Alert"/> component.
            </summary>
            <param name="visible">True if <see cref="T:Blazorise.Alert"/> is visible.</param>
        </member>
        <member name="M:Blazorise.Alert.NotifyHasMessage">
            <summary>
            Notifies the alert that one of the child components is a message.
            </summary>
        </member>
        <member name="M:Blazorise.Alert.NotifyHasDescription">
            <summary>
            Notifies the alert that one of the child components is a description.
            </summary>
        </member>
        <member name="P:Blazorise.Alert.State">
            <summary>
            Gets the reference to state object for this alert.
            </summary>
        </member>
        <member name="P:Blazorise.Alert.Dismisable">
            <summary>
            Enables the alert to be closed by placing the padding for close button.
            </summary>
        </member>
        <member name="P:Blazorise.Alert.Visible">
            <summary>
            Sets the alert visibility.
            </summary>
        </member>
        <member name="P:Blazorise.Alert.VisibleChanged">
            <summary>
            Occurs when the alert visibility state changes.
            </summary>
        </member>
        <member name="P:Blazorise.Alert.Color">
            <summary>
            Gets or sets the alert color.
            </summary>
        </member>
        <member name="P:Blazorise.Alert.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Alert"/>.
            </summary>
        </member>
        <member name="T:Blazorise.AlertDescription">
            <summary>
            Wrapper for longer text inside of <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.AlertDescription.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AlertDescription.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.AlertDescription.ParentAlert">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.AlertDescription.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.AlertDescription"/>.
            </summary>
        </member>
        <member name="T:Blazorise.AlertMessage">
            <summary>
            Wrapper for text or action buttons placed inside of <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.AlertMessage.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.AlertMessage.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.AlertMessage.ParentAlert">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.AlertMessage.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.AlertMessage"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Badge">
            <summary>
            Small and adaptive tag for adding context to just about any content.
            </summary>
        </member>
        <member name="M:Blazorise.Badge.#ctor">
            <summary>
            A default <see cref="T:Blazorise.Badge"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Badge.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Badge.BuildCloseClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a close button.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Badge.OnCloseClickedHandler">
            <summary>
            Handles the close button onclick event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Badge.OnCloseKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the close button onclick event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.Badge.Closable">
            <summary>
            Indicated if badge can have closable icon.
            </summary>
        </member>
        <member name="P:Blazorise.Badge.CloseClassBuilder">
            <summary>
            Close button class builder.
            </summary>
        </member>
        <member name="P:Blazorise.Badge.Pill">
            <summary>
            Make the badge more rounded.
            </summary>
        </member>
        <member name="P:Blazorise.Badge.Color">
            <summary>
            Sets the badge contextual color.
            </summary>
        </member>
        <member name="P:Blazorise.Badge.Link">
            <summary>
            Create a badge link and provide actionable badges with hover and focus states.
            </summary>
        </member>
        <member name="P:Blazorise.Badge.CloseClicked">
            <summary>
            Occurs on close button click.
            </summary>
        </member>
        <member name="P:Blazorise.Badge.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Badge"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Bar">
            <summary>
            The <see cref="T:Blazorise.Bar"/> component is a wrapper that positions branding, navigation, and other elements into a concise header or sidebar.
            </summary>
        </member>
        <member name="F:Blazorise.Bar.isBroken">
            <summary>
            Used to keep track of the breakpoint state for this component.
            </summary>
        </member>
        <member name="F:Blazorise.Bar.dotNetObjectRef">
            <summary>
            Reference to the object that should be accessed through JSInterop.
            </summary>
        </member>
        <member name="F:Blazorise.Bar.state">
            <summary>
            Holds the state for this bar component.
            </summary>
        </member>
        <member name="F:Blazorise.Bar.initial">
            <summary>
            Used to tell us that bar is initializing.
            </summary>
        </member>
        <member name="M:Blazorise.Bar.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Bar.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Bar.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Bar.Toggle">
            <summary>
            Toggles the <see cref="P:Blazorise.Bar.Visible"/> state of the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.Bar.OnBreakpoint(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Bar.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Bar.OnLocationChanged(System.Object,Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs)">
            <summary>
            An event that fires when the navigation location has changed.
            </summary>
            <param name="sender">Object the fired the notification.</param>
            <param name="args">New location arguments.</param>
        </member>
        <member name="M:Blazorise.Bar.HideAllExcept(Blazorise.BarItem)">
            <summary>
            Hides all items except the one that is passed as a parameter.
            </summary>
            <param name="barItem">A bar item</param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Bar.NotifyBarItemInitialized(Blazorise.BarItem)">
            <summary>
            Notifies the <see cref="T:Blazorise.Bar"/> of a new BarItem.
            </summary>
            <param name="barItem">Reference to the <see cref="T:Blazorise.BarItem"/> that is placed inside of this <see cref="T:Blazorise.Bar"/>.</param>
        </member>
        <member name="M:Blazorise.Bar.NotifyBarItemRemoved(Blazorise.BarItem)">
            <summary>
            Notifies the <see cref="T:Blazorise.Bar"/> of a BarItem to be removed.
            </summary>
            <param name="barItem">Reference to the <see cref="T:Blazorise.BarItem"/> that is placed inside of this <see cref="T:Blazorise.Bar"/>.</param>
        </member>
        <member name="P:Blazorise.Bar.BarItems">
            <summary>
            The Bar Items
            </summary>
        </member>
        <member name="P:Blazorise.Bar.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Bar.State">
            <summary>
            Gets the reference to the state object for this <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.BrokenStateString">
            <summary>
            Gets the string representation of the <see cref="F:Blazorise.Bar.isBroken"/> flag.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.CollapseModeString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.Bar.CollapseMode"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.JSBreakpointModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSBreakpointModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.NavigationManager">
            <summary>
            Injects the navigation manager.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.Visible">
            <summary>
            Controls the state of toggler and the menu.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.VisibleChanged">
            <summary>
            Occurs when the bar visibility changes.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.Breakpoint">
            <summary>
            Used for responsive collapsing.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.NavigationBreakpoint">
            <summary>
            Used for responsive collapsing after Navigation.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.ThemeContrast">
            <summary>
            Defines the preferred theme contrast for this <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.Alignment">
            <summary>
            Defines the alignment within bar.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.Mode">
            <summary>
            Defines the orientation for the bar. Vertical is required when using as a Sidebar.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.CollapseMode">
            <summary>
            Defines how the bar will be collapsed.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Bar"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.LayoutHeader">
            <summary>
            Cascaded layour header component.
            </summary>
        </member>
        <member name="P:Blazorise.Bar.MenuToggleBehavior">
            <summary>
            Defines how the bar menu will behave when toggled.
            </summary>
        </member>
        <member name="T:Blazorise.BarBrand">
            <summary>
            Part of the <see cref="T:Blazorise.Bar"/> component that is always visible, and which usually contains
            the logo and optionally some links or icons.
            </summary>
        </member>
        <member name="M:Blazorise.BarBrand.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarBrand.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarDropdownItem"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarBrand.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.BarDropdown">
            <summary>
            The dropdown menu, which can include bar items and dividers.
            </summary>
        </member>
        <member name="F:Blazorise.BarDropdown.state">
            <summary>
            State object used to holds the dropdown state.
            </summary>
        </member>
        <member name="F:Blazorise.BarDropdown.childBarDropdown">
            <summary>
            The direct BarDropdown child of this dropdown.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdown.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdown.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdown.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdown.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdown.Show">
            <summary>
            Shows the dropdown menu.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BarDropdown.Hide(System.Boolean)">
            <summary>
            Hides the dropdown menu.
            </summary>
            <param name="hideAll">Indicates if we need to hide current dropdown menu and all its parent dropdown menus.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BarDropdown.Toggle(System.String)">
            <summary>
            Toggles the visibility of the dropdown menu.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BarDropdown.SetVisibleState(System.Boolean)">
            <summary>
            Handles the internal visibility states.
            </summary>
            <param name="visible">Visible state.</param>
        </member>
        <member name="M:Blazorise.BarDropdown.RaiseEvents(System.Boolean)">
            <summary>
            Fires all the events for this dropdown.
            </summary>
            <param name="visible">Visible state.</param>
        </member>
        <member name="M:Blazorise.BarDropdown.SetWasJustToggled(System.Boolean)">
            <summary>
            Sets the WasToggled Flag on the current Dropdown and every existing ParentDropdown.
            </summary>
            <param name="wasToggled"></param>
        </member>
        <member name="M:Blazorise.BarDropdown.SetSelectedDropdownElementId(System.String)">
            <summary>
            Sets Selected Dropdown Toggle ElementId
            </summary>
            <param name="dropdownToggleElementId"></param>
        </member>
        <member name="M:Blazorise.BarDropdown.OnMouseEnterHandler">
            <summary>
            Handles the onmouseenter event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BarDropdown.OnMouseLeaveHandler">
            <summary>
            Handles the onmouseleave event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.BarDropdown.NotifyChildDropdownInitialized(Blazorise.BarDropdown)">
            <summary>
            Notifies the <see cref="T:Blazorise.BarDropdown"/> that it has a child BarDropdown component.
            </summary>
            <param name="barDropdown">Reference to the <see cref="T:Blazorise.BarDropdown"/> that is placed inside of this <see cref="T:Blazorise.BarDropdown"/>.</param>
        </member>
        <member name="M:Blazorise.BarDropdown.NotifyChildDropdownRemoved(Blazorise.BarDropdown)">
            <summary>
            Notifies the <see cref="T:Blazorise.BarDropdown"/> that it's a child BarDropdown component should be removed.
            </summary>
            <param name="barDropdown">Reference to the <see cref="T:Blazorise.BarDropdown"/> that is placed inside of this <see cref="T:Blazorise.BarDropdown"/>.</param>
        </member>
        <member name="M:Blazorise.BarDropdown.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarDropdown.IsUnderFirstMenu">
            <summary>
            Whether the dropdown is the first menu in the bar.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarDropdown.ShouldClose">
            <summary>
            Keeps track whether the Dropdown is in a state where it should close.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.WasJustToggled">
            <summary>
            Keeps track whether the Dropdown was just toggled, ignoring possible DropdownItem clicks which would otherwise close the dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.IsVisible">
            <summary>
            Indicates if the dropdown is visible.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.State">
            <summary>
            Gets the reference to the state object for this <see cref="T:Blazorise.BarDropdown"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.IsBarDropdownSubmenu">
            <summary>
            Returns true if the BarDropdown is placed inside of another BarDropdown.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.HasSubmenu">
            <summary>
            Returns true if this BarDropdown contains any child BarDropdown.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.VisibleString">
            <summary>
            Gets the <see cref="P:Blazorise.BarDropdown.Visible"/> flag represented as a string.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.SelectedBarDropdownElementId">
            <summary>
            Tracks the last BarDropdownToggle Element Id that acted.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.Visible">
            <summary>
            Sets a value indicating whether the dropdown menu and all its child controls are visible.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.VisibleChanged">
            <summary>
            Occurs when the component visibility changes.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.RightAligned">
            <summary>
            If true, a dropdown menu will be right aligned.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.ParentBarItem">
            <summary>
            Cascaded <see cref="T:Blazorise.BarItem"/> component in which this <see cref="T:Blazorise.BarDropdown"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.ParentBarItemState">
            <summary>
            Cascaded parent <see cref="T:Blazorise.BarItem"/> state.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.ParentBarDropdownState">
            <summary>
            Cascaded parent <see cref="T:Blazorise.BarDropdown"/> state.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.ParentBarDropdown">
            <summary>
            Gets or sets the cascaded parent BarDropdown component.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdown.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarDropdownItem"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BarDropdownDivider">
            <summary>
            Divider that can be placed between <see cref="T:Blazorise.BarDropdownItem"/>'s.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdownDivider.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarDropdownDivider.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.BarDropdownItem">
            <summary>
            A menu item for the <see cref="T:Blazorise.BarDropdownMenu"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdownItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownItem.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownItem.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.BarDropdownItem.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.To">
            <summary>
            Specifies the URL of the page the link goes to.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.Target">
            <summary>
            The target attribute specifies where to open the linked document.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.Match">
            <summary>
            URL matching behavior for a link.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.Title">
            <summary>
            Specify extra information about the link element.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.Indentation">
            <summary>
            Determines how much left padding will be applied to the dropdown item. (in rem unit)
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarDropdownItem"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.ParentDropdownState">
            <summary>
            Cascaded parent <see cref="T:Blazorise.BarDropdown"/> state.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownItem.ParentBarDropdown">
            <summary>
            Gets or sets the reference to the parent BarDropdown.
            </summary>
        </member>
        <member name="T:Blazorise.BarDropdownMenu">
            <summary>
            Main container for a <see cref="T:Blazorise.BarDropdown"/> menu that can contain or or more <see cref="T:Blazorise.BarDropdownItem"/>'s.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdownMenu.#ctor">
            <summary>
            A default <see cref="T:Blazorise.BarDropdownMenu"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdownMenu.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownMenu.BuildContainerClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a menu.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.BarDropdownMenu.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarDropdownMenu.ContainerClassNames">
            <summary>
            Gets the classnames for a dropdown-menu container.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownMenu.ContainerClassBuilder">
            <summary>
            Dropdown-menu container class builder.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownMenu.VisibleString">
            <summary>
            Gets the string representation of visibility flag.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownMenu.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarDropdownMenu"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownMenu.ParentDropdownState">
            <summary>
            Cascaded <see cref="T:Blazorise.Dropdown"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownMenu.ParentBarDropdown">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.BarDropdown"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.BarDropdownToggle">
            <summary>
            Toggles the visibility or collapse of <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the button click event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.KeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeydown event.
            </summary>
            <param name="eventArgs">Information about the keyboard down event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.IsSafeToClose(System.String,Blazorise.CloseReason,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.Close(Blazorise.CloseReason)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarDropdownToggle.HandleVisibilityStyles(System.Boolean)">
            <summary>
            Handles the visibility styles and JS interop states.
            </summary>
            <param name="visible">True if component is visible.</param>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.IsDisabled">
            <summary>
            Returns true if this BarDropdown should be disabled.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.JSClosableModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSClosableModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.Indentation">
            <summary>
            Determines how much left padding will be applied to the dropdown toggle. (in rem unit)
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.Disabled">
            <summary>
            Makes the toggle element look inactive.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.Clicked">
            <summary>
            Occurs when the toggle button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.ParentBarDropdownState">
            <summary>
            Gets or sets the parent dropdown state object.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.ParentBarDropdown">
            <summary>
            Gets or sets the reference to the parent dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.ParentBarItem">
            <summary>
            Cascaded <see cref="T:Blazorise.BarItem"/> component in which this <see cref="T:Blazorise.BarDropdownToggle"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.ParentBarItemState">
            <summary>
            Gets or sets the parent bar-item state object.
            </summary>
        </member>
        <member name="P:Blazorise.BarDropdownToggle.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarDropdownToggle"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BarEnd">
            <summary>
            The far part of the menu, which appears at the end of the navbar.
            </summary>
        </member>
        <member name="M:Blazorise.BarEnd.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarEnd.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.BarEnd"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarEnd.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.BarIcon">
            <summary>
            A wrapper component around <see cref="T:Blazorise.Icon"/> that is used by the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.BarIcon.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarIcon.IconName">
            <summary>
            Icon name that can be either a string or <see cref="P:Blazorise.BarIcon.IconName"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarIcon.IconStyle">
            <summary>
            Suggested icon style.
            </summary>
        </member>
        <member name="P:Blazorise.BarIcon.IconSize">
            <summary>
            Defines the icon size.
            </summary>
        </member>
        <member name="T:Blazorise.BarItem">
            <summary>
            Container for <see cref="T:Blazorise.BarLink"/> or <see cref="T:Blazorise.BarDropdown"/> components.
            </summary>
        </member>
        <member name="F:Blazorise.BarItem.parentBarState">
            <summary>
            Reference to the <see cref="T:Blazorise.Bar"/> state object.
            </summary>
        </member>
        <member name="F:Blazorise.BarItem.state">
            <summary>
            Holds the state for this <see cref="T:Blazorise.BarItem"/>.
            </summary>
        </member>
        <member name="F:Blazorise.BarItem.barDropdown">
            <summary>
            Reference to the <see cref="T:Blazorise.BarDropdown"/> placed inside of this <see cref="T:Blazorise.BarItem"/>.
            </summary>
        </member>
        <member name="M:Blazorise.BarItem.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarItem.OnDropdownVisible">
            <summary>
            The dropdown menu has been shown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.BarItem.HideDropdown">
            <summary>
            Hides the dropdown menu if it's visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.BarItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarItem.NotifyBarDropdownInitialized(Blazorise.BarDropdown)">
            <summary>
            Notifies this <see cref="T:Blazorise.BarItem"/> that one of it's child component is a <see cref="T:Blazorise.BarDropdown"/>.
            </summary>
            <param name="barDropdown">Reference to the <see cref="T:Blazorise.BarDropdown"/> placed inside of this <see cref="T:Blazorise.BarItem"/>.</param>
        </member>
        <member name="M:Blazorise.BarItem.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarItem.State">
            <summary>
            Gets the reference to the state object for this <see cref="T:Blazorise.BarItem"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarItem.HasDropdown">
            <summary>
            True if <see cref="T:Blazorise.BarDropdown"/> component is placed inside of this <see cref="T:Blazorise.BarItem"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarItem.Active">
            <summary>
            Gets or sets the flag to indicate if <see cref="T:Blazorise.BarItem"/> is active, or focused.
            </summary>
        </member>
        <member name="P:Blazorise.BarItem.Disabled">
            <summary>
            Gets or sets the disabled state to make <see cref="T:Blazorise.BarItem"/> inactive.
            </summary>
        </member>
        <member name="P:Blazorise.BarItem.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.BarItem.ParentBar">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarItem"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BarLabel">
            <summary>
            Small text that can appear next to the <see cref="T:Blazorise.DropdownItem"/>.
            </summary>
        </member>
        <member name="M:Blazorise.BarLabel.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarLabel.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.BarLabel.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.BarLabel"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.BarLink">
            <summary>
            A clickable link, the sibling of a <see cref="T:Blazorise.BarItem"/> or <see cref="T:Blazorise.BarDropdown"/>.
            </summary>
        </member>
        <member name="M:Blazorise.BarLink.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarLink.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the link onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.BarLink.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.BarLink.To">
            <summary>
            Specifies the URL of the page the link goes to.
            </summary>
        </member>
        <member name="P:Blazorise.BarLink.Target">
            <summary>
            The target attribute specifies where to open the linked document.
            </summary>
        </member>
        <member name="P:Blazorise.BarLink.Match">
            <summary>
            URL matching behavior for a link.
            </summary>
        </member>
        <member name="P:Blazorise.BarLink.Title">
            <summary>
            Specify extra information about the element.
            </summary>
        </member>
        <member name="P:Blazorise.BarLink.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarLink"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarLink.ParentBarItemState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.BarMenu">
            <summary>
            The main part of the <see cref="T:Blazorise.Bar"/>, hidden on touch devices, visible on desktop.
            </summary>
        </member>
        <member name="M:Blazorise.BarMenu.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarMenu.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.BarMenu"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarMenu.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.BarStart">
            <summary>
            The near part of the menu, which appears next to the navbar brand on desktop.
            </summary>
        </member>
        <member name="M:Blazorise.BarStart.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.BarStart.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.BarStart"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarStart.ParentBarState">
            <summary>
            Cascaded <see cref="T:Blazorise.Bar"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.BarToggler">
            <summary>
            Controls the visibility state of the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.BarToggler.state">
            <summary>
            Holds the state for this bar component.
            </summary>
        </member>
        <member name="M:Blazorise.BarToggler.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarToggler.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarToggler.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BarToggler.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the toggler onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.BarToggler.State">
            <summary>
            Gets the reference to the state object for this <see cref="T:Blazorise.BarToggler"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.BarToggler.Clicked">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.BarToggler.Mode">
            <summary>
            Provides options for inline or popout styles. Only supported by Vertical Bar. Uses inline by default.
            </summary>
        </member>
        <member name="P:Blazorise.BarToggler.Bar">
            <summary>
            Controls which <see cref="P:Blazorise.BarToggler.Bar"/> will be toggled. Uses parent <see cref="P:Blazorise.BarToggler.Bar"/> by default. 
            </summary>
        </member>
        <member name="P:Blazorise.BarToggler.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BarToggler"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BarToggler.ParentBarState">
            <summary>
            Cascaded <see cref="P:Blazorise.BarToggler.Bar"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.BarToggler.ParentBar">
            <summary>
            Cascaded <see cref="P:Blazorise.BarToggler.Bar"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Breadcrumb">
            <summary>
            Indicate the current page's location within a navigational hierarchy.
            </summary>
        </member>
        <member name="M:Blazorise.Breadcrumb.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Breadcrumb.Mode">
            <summary>
            Defines the breadcrumb activation mode.
            </summary>
        </member>
        <member name="P:Blazorise.Breadcrumb.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Alert"/>.
            </summary>
        </member>
        <member name="T:Blazorise.BreadcrumbItem">
            <summary>
            Wrapper for a breadcrumb link.
            </summary>
        </member>
        <member name="M:Blazorise.BreadcrumbItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BreadcrumbItem.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BreadcrumbItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BreadcrumbItem.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BreadcrumbItem.OnLocationChanged(System.Object,Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs)">
            <summary>
            Handles the navigation change event.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs">Location changed arguments.</param>
        </member>
        <member name="M:Blazorise.BreadcrumbItem.NotifyRelativeUriChanged(System.String)">
            <summary>
            Notify us that the link relative address has changed.
            </summary>
            <param name="relativeUri"></param>
        </member>
        <member name="P:Blazorise.BreadcrumbItem.Active">
            <summary>
            Gets or sets the item active state.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbItem.NavigationManager">
            <summary>
            Gets or sets the navigation manager.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BreadcrumbItem"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbItem.ParentBreadcrumb">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Breadcrumb"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.BreadcrumbLink">
            <summary>
            Links can be href's for anchor tags, or to's for router-links.
            </summary>
        </member>
        <member name="M:Blazorise.BreadcrumbLink.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BreadcrumbLink.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.BreadcrumbLink.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the link onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.IsActive">
            <summary>
            True if link should be in active state.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.Disabled">
            <summary>
            When set to 'true', disables the component's functionality and places it in a disabled state.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.To">
            <summary>
            Link to the destination page.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.Target">
            <summary>
            The target attribute specifies where to open the linked document.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.Match">
            <summary>
            URL matching behavior for a link.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.Title">
            <summary>
            Defines the title of a link, which appears to the user as a tooltip.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.BreadcrumbLink"/>.
            </summary>
        </member>
        <member name="P:Blazorise.BreadcrumbLink.ParentBreadcrumbItem">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.BreadcrumbItem"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Button">
            <summary>
            Clickable button for actions in forms, dialogs, and more with support for multiple sizes, states, and more.
            </summary>
        </member>
        <member name="M:Blazorise.Button.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Button.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Button.ProvideDefaultLoadingTemplate">
            <summary>
            Provides a default LoadingTemplate RenderFragment.
            </summary>
            <returns>Returns the RenderFragment consisting of a loading content.</returns>
        </member>
        <member name="M:Blazorise.Button.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Button.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Button.Focus(System.Boolean)">
            <summary>
            Sets focus on the button element, if it can be focused.
            </summary>
            <param name="scrollToElement">If true the browser should scroll the document to bring the newly-focused element into view.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Button.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Button.OnCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
            <param name="sender">Reference of the object that raised the event.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Blazorise.Button.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.Button.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Button.IsAddons">
            <summary>
            True if button is part of an addons or dropdown group.
            </summary>
        </member>
        <member name="P:Blazorise.Button.IsDisabled">
            <summary>
            True if button or it's parent dropdown is disabled.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ParentIsField">
            <summary>
            True if button is placed inside of a <see cref="T:Blazorise.Field"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ThemeSize">
            <summary>
            Gets the size based on the theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.Button.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSButtonModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Button.JSUtilitiesModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSUtilitiesModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Clicked">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Type">
            <summary>
            Defines the button type.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Color">
            <summary>
            Gets or sets the button color.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Size">
            <summary>
            Changes the size of a button.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Outline">
            <summary>
            Makes the button to have the outlines.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Disabled">
            <summary>
            When set to 'true', disables the component's functionality and places it in a disabled state.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Active">
            <summary>
            When set to 'true', places the component in the active state with active styling.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Block">
            <summary>
            Makes the button to span the full width of a parent.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Loading">
            <summary>
            Shows the loading spinner or a <see cref="P:Blazorise.Button.LoadingTemplate"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Button.LoadingTemplate">
            <summary>
            Gets or sets the component loading template.
            </summary>
        </member>
        <member name="P:Blazorise.Button.PreventDefaultOnSubmit">
            <summary>
            Prevents a default form-post when button type is set to <see cref="F:Blazorise.ButtonType.Submit"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ParentDropdown">
            <summary>
            Gets or sets the reference to the parent dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ParentButtons">
            <summary>
            Gets or sets the reference to the parent buttons.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ParentAddons">
            <summary>
            Gets or sets the reference to the parent addons.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ParentField">
            <summary>
            Gets or sets the reference to the parent field.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ParentDropdownState">
            <summary>
            Gets or sets the parent dropdown state object.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Command">
            <summary>
            Gets or sets the command to be executed when clicked on a button.
            </summary>
        </member>
        <member name="P:Blazorise.Button.CommandParameter">
            <summary>
            Reflects the parameter to pass to the CommandProperty upon execution.
            </summary>
        </member>
        <member name="P:Blazorise.Button.To">
            <summary>
            Denotes the target route of the <see cref="F:Blazorise.ButtonType.Link"/> button.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Target">
            <summary>
            The target attribute specifies where to open the linked document for a <see cref="F:Blazorise.ButtonType.Link"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Button.StretchedLink">
            <summary>
            Makes any HTML element or component clickable by “stretching” a nested link.
            </summary>
        </member>
        <member name="P:Blazorise.Button.TabIndex">
            <summary>
            If defined, indicates that its element can be focused and can participates in sequential keyboard navigation.
            </summary>
        </member>
        <member name="P:Blazorise.Button.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Button"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Button.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.Buttons">
            <summary>
            Group a series of buttons together on a single line.
            </summary>
        </member>
        <member name="M:Blazorise.Buttons.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Buttons.Role">
            <summary>
            Gets or sets the role of the button group.
            </summary>
        </member>
        <member name="P:Blazorise.Buttons.Orientation">
            <summary>
            Gets or sets the button group orientation mode.
            </summary>
        </member>
        <member name="P:Blazorise.Buttons.Size">
            <summary>
            Change the size of multiple buttons at once.
            </summary>
        </member>
        <member name="P:Blazorise.Buttons.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Buttons"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CloseButton">
            <summary>
            A generic close button for dismissing content like modals and alerts.
            </summary>
        </member>
        <member name="M:Blazorise.CloseButton.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CloseButton.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.CloseButton.IsAutoClose">
            <summary>
            Returns true if parent component should be automatically closed.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.DisabledString">
            <summary>
            Gets the string representing the disabled state.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.Options">
            <summary>
            Holds the information about the Blazorise global options.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.Disabled">
            <summary>
            Flag to indicate that the button is not responsive for user interaction.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.Clicked">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.AutoClose">
            <summary>
            If true, the parent <see cref="T:Blazorise.Alert"/> or <see cref="T:Blazorise.Modal"/> with be automatically closed
            when <see cref="T:Blazorise.CloseButton"/> button is placed inside of them.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.ParentAlert">
            <summary>
            Cascaded <see cref="T:Blazorise.Alert"/> component in which this <see cref="T:Blazorise.CloseButton"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.ParentModal">
            <summary>
            Cascaded <see cref="T:Blazorise.Modal"/> component in which this <see cref="T:Blazorise.CloseButton"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.ParentToast">
            <summary>
            Cascaded <see cref="T:Blazorise.Toast"/> component in which this <see cref="T:Blazorise.CloseButton"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.CloseButton.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CloseButton"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Card">
            <summary>
            A card is a flexible and extensible content container. It includes options for headers and footers,
            a wide variety of content, contextual background colors, and powerful display options.
            </summary>
        </member>
        <member name="M:Blazorise.Card.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Card.InsideDeck">
            <summary>
            True if card is placed inside of a deck.
            </summary>
        </member>
        <member name="P:Blazorise.Card.WhiteText">
            <summary>
            Sets the white text when using the darker background.
            </summary>
        </member>
        <member name="P:Blazorise.Card.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Card"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Card.ParentCardDeck">
            <summary>
            Gets or sets the reference to the parent deck component.
            </summary>
        </member>
        <member name="T:Blazorise.CardActions">
            <summary>
            Container for various card actions or commands.
            </summary>
        </member>
        <member name="M:Blazorise.CardActions.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardActions.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardActions"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardBody">
            <summary>
            The main block of a <see cref="T:Blazorise.Card"/>.
            </summary>
        </member>
        <member name="M:Blazorise.CardBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardDeck">
            <summary>
            Container for an identical width and height cards that aren't attached to one another.
            </summary>
        </member>
        <member name="M:Blazorise.CardDeck.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardDeck.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardDeck"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardFooter">
            <summary>
            An optional footer within a card.
            </summary>
        </member>
        <member name="M:Blazorise.CardFooter.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardFooter.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardFooter"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardGroup">
            <summary>
            Represent cards as a single, attached component with same width and height columns. Card groups use display: flex; to reach their sizing.
            </summary>
        </member>
        <member name="M:Blazorise.CardGroup.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardGroup.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardGroup"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardHeader">
            <summary>
            An optional header within a card.
            </summary>
        </member>
        <member name="M:Blazorise.CardHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardImage">
            <summary>
            A fullwidth container for a responsive image.
            </summary>
        </member>
        <member name="M:Blazorise.CardImage.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardImage.Source">
            <summary>
            Image url.
            </summary>
        </member>
        <member name="P:Blazorise.CardImage.Alt">
            <summary>
            Alternative image text.
            </summary>
        </member>
        <member name="P:Blazorise.CardImage.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CardImage"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CardLink">
            <summary>
            Wrapper for a card links.
            </summary>
        </member>
        <member name="M:Blazorise.CardLink.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CardLink.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardLink.Source">
            <summary>
            Link url.
            </summary>
        </member>
        <member name="P:Blazorise.CardLink.Alt">
            <summary>
            Alternative link text.
            </summary>
        </member>
        <member name="T:Blazorise.CardSubtitle">
            <summary>
            Card titles are used by adding subtitle to a heading tag. Subtitles are generally placed under the <see cref="T:Blazorise.CardTitle"/>.
            </summary>
        </member>
        <member name="M:Blazorise.CardSubtitle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardSubtitle.InsideHeader">
            <summary>
            Indicates if the subtitle is placed inside if card header.
            </summary>
        </member>
        <member name="P:Blazorise.CardSubtitle.Size">
            <summary>
            Number from 1 to 6 that defines the subtitle size where the smaller number means larger text.
            </summary>
            <remarks>
            todo: change to enum
            </remarks>
        </member>
        <member name="P:Blazorise.CardSubtitle.ParentCardHeader">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.CardHeader"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.CardText">
            <summary>
            Wrapper for all text inside of <see cref="T:Blazorise.Card"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.CardText.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.CardTitle">
            <summary>
            Card titles are used by adding title to a heading tag.
            </summary>
        </member>
        <member name="M:Blazorise.CardTitle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CardTitle.InsideHeader">
            <summary>
            Indicates if the title is placed inside if card header.
            </summary>
        </member>
        <member name="P:Blazorise.CardTitle.Size">
            <summary>
            Number from 1 to 6 that defines the title size where the smaller number means larger text.
            </summary>
            <remarks>
            TODO: change to enum
            </remarks>
        </member>
        <member name="P:Blazorise.CardTitle.ParentCardHeader">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.CardHeader"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Carousel">
            <summary>
            A slideshow component for cycling through elements - images or slides of text.
            </summary>
        </member>
        <member name="F:Blazorise.Carousel.state">
            <summary>
            Holds the state of this carousel.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.Timer">
            <summary>
            A times used to activate the slide animation.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.TransitionTimer">
            <summary>
            A times used to animate the slide transition.
            </summary>
        </member>
        <member name="F:Blazorise.Carousel.carouselSlides">
            <summary>
            A list of slides placed inside of this carousel.
            </summary>
        </member>
        <member name="M:Blazorise.Carousel.#ctor">
            <summary>
            A default carousel constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Carousel.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Carousel.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Carousel.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Carousel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Carousel.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Carousel.BuildIndicatorsClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the indicators container element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Carousel.BuildSlidesClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the slides element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Carousel.FindNextSlide(System.String)">
            <summary>
            Gets the next slide in sequence.
            </summary>
            <param name="slideName">Slide name from where the search will start.</param>
            <returns>Next slide in a sequence or first if not found.</returns>
        </member>
        <member name="M:Blazorise.Carousel.FindPreviousSlide(System.String)">
            <summary>
            Gets the previous slide in sequence.
            </summary>
            <param name="slideName">Slide name from where the search will start.</param>
            <returns>Previous slide in a sequence or last if not found.</returns>
        </member>
        <member name="M:Blazorise.Carousel.FindCarouselSlideIdxByName(System.String)">
            <summary>
            Gets the slide by name. Returns -1 if the slide does not exist. 
            </summary>
            <param name="slideName"></param>
        </member>
        <member name="M:Blazorise.Carousel.GetCarouselSlide(System.Int32)">
            <summary>
            Gets the slide by index. Returns null if no slide has been found.
            </summary>
            <param name="slideIndex"></param>
        </member>
        <member name="M:Blazorise.Carousel.GetSelectedCarouselSlide">
            <summary>
            Gets the currently selected slide by index.
            </summary>
        </member>
        <member name="M:Blazorise.Carousel.GetPreviouslySelectedCarouselSlide">
            <summary>
            Gets the slide by index.
            </summary>
        </member>
        <member name="M:Blazorise.Carousel.AddSlide(Blazorise.CarouselSlide)">
            <summary>
            Adds the slide to the list of running slides.
            </summary>
            <param name="slide">Slide to add.</param>
        </member>
        <member name="M:Blazorise.Carousel.RemoveSlide(Blazorise.CarouselSlide)">
            <summary>
            Removes the slide from the list of running slides.
            </summary>
            <param name="slide">Slide to remove.</param>
        </member>
        <member name="M:Blazorise.Carousel.SelectNext">
            <summary>
            Selects the next slide in a sequence, relative to the current slide.
            </summary>
        </member>
        <member name="M:Blazorise.Carousel.SelectPrevious">
            <summary>
            Selects the previous slide in a sequence, relative to the current slide.
            </summary>
        </member>
        <member name="M:Blazorise.Carousel.Select(System.String)">
            <summary>
            Selects the slide by its name.
            </summary>
            <param name="name">Name of the slide.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Carousel.OnLocalizationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the localization changed event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the localization event.</param>
        </member>
        <member name="M:Blazorise.Carousel.AnimationEnd(Blazorise.CarouselSlide)">
            <summary>
            Finish the slide animation.
            </summary>
            <param name="slide">Target slide.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Carousel.RunAnimations">
            <summary>
            Runs the animation for the active slide.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Carousel.SlideIndex(System.String)">
            <summary>
            Gets the index of the slide with the specified name.
            </summary>
            <param name="slideName">Slide name.</param>
            <returns>An index of slide.</returns>
        </member>
        <member name="P:Blazorise.Carousel.Direction">
            <summary>
            Gets the direction of slide animation.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.NumberOfSlides">
            <summary>
            Gets the total number of slides in a carousel.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.TimerEnabled">
            <summary>
            Gets or sets the flag that indicates if the timer is running.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.AutoPlayEnabled">
            <summary>
            Gets or sets the flag that indicates if the timer is running and AutoPlay is enabled.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.State">
            <summary>
            Gets the carousel state.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.IndicatorsClassBuilder">
            <summary>
            Gets or sets the carousel indicator class-builder.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.SlidesClassBuilder">
            <summary>
            Gets or sets the carousel slides class-builder.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.IndicatorsClassNames">
            <summary>
            Gets the class-names for a carousel indicator.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.SlidesClassNames">
            <summary>
            Gets the class-names for a carousel slides.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.SelectedSlideIndex">
            <summary>
            Gets the index of the current active slide.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.PreviouslySelectedSlideIndex">
            <summary>
            Gets the index of the previously active slide.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.AnimationRunning">
            <summary>
            Indicates if slide animation is currently running.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.PreviousButtonString">
            <summary>
            Gets the localized previous button text.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.NextButtonString">
            <summary>
            Gets the localized next button text.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.Autoplay">
            <summary>
            Autoplays the carousel slides.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.AutoRepeat">
            <summary>
            Auto-repeats the carousel slides once they reach the end.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.Crossfade">
            <summary>
            Animate slides with a fade transition instead of a slide.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.Interval">
            <summary>
            Defines the interval(in milliseconds) after which the item will automatically slide.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.ShowIndicators">
            <summary>
            Specifies whether to show an indicator for each slide.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.ShowControls">
            <summary>
            Specifies whether to show the controls that allows the user to navigate to the next or previous slide.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.SelectedSlide">
            <summary>
            Gets or sets currently selected slide name.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.SelectedSlideChanged">
            <summary>
            Occurs after the selected slide has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.PreviousButtonLocalizer">
            <summary>
            Function used to handle custom localization for previous button that will override a default <see cref="T:Blazorise.Localization.ITextLocalizer"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.NextButtonLocalizer">
            <summary>
            Function used to handle custom localization for next button that will override a default <see cref="T:Blazorise.Localization.ITextLocalizer"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Carousel.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Carousel"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CarouselSlide">
            <summary>
            A container for placing content in a carousel slide.
            </summary>
        </member>
        <member name="F:Blazorise.CarouselSlide.parentCarouselState">
            <summary>
            Holds the reference to the parent carousel state object.
            </summary>
        </member>
        <member name="M:Blazorise.CarouselSlide.#ctor">
            <summary>
            A default carousel slide constructor.
            </summary>
        </member>
        <member name="M:Blazorise.CarouselSlide.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CarouselSlide.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CarouselSlide.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CarouselSlide.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CarouselSlide.BuildIndicatorClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the indicator element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.CarouselSlide.Activate">
            <summary>
            Makes this slide active.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.AnimationTime">
            <summary>
            The time it takes to animate the carousel slide transition.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.Interval">
            <summary>
            Defines the interval(in milliseconds) after which this item will automatically slide.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.IndicatorClassBuilder">
            <summary>
            Gets or sets the class builder for the indicator element.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.IndicatorClassNames">
            <summary>
            Gets the indicator element classnames.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.IndicatorStyleNames">
            <summary>
            Gets the indicator element styles.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.Name">
            <summary>
            Defines the slide name.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.ParentCarouselState">
            <summary>
            Cascaded <see cref="T:Blazorise.Carousel"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.ParentCarousel">
            <summary>
            Cascaded <see cref="T:Blazorise.Carousel"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.CarouselSlide.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CarouselSlide"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Check`1">
            <summary>
            Checkboxes allow the user to select one or more items from a set.
            </summary>
            <typeparam name="TValue">Checked value type.</typeparam>
        </member>
        <member name="M:Blazorise.Check`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Check`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Check`1.TrueValueName">
            <summary>
            Gets the string representation of a boolean "true" value.
            </summary>
        </member>
        <member name="P:Blazorise.Check`1.Indeterminate">
            <summary>
            The indeterminate property can help you to achieve a 'check all' effect.
            </summary>
        </member>
        <member name="T:Blazorise.Collapse">
            <summary>
            Toggle visibility of almost any content on your pages in a vertically collapsing container.
            </summary>
        </member>
        <member name="M:Blazorise.Collapse.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Collapse.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Collapse.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Collapse.Toggle">
            <summary>
            Toggles the collapse visibility state.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Collapse.HandleVisibilityState(System.Boolean)">
            <summary>
            Sets the visibility state of this <see cref="T:Blazorise.Collapse"/> component.
            </summary>
            <param name="visible">True if <see cref="T:Blazorise.Collapse"/> is visible.</param>
        </member>
        <member name="M:Blazorise.Collapse.RaiseEvents(System.Boolean)">
            <summary>
            Raises all registered events for this <see cref="T:Blazorise.Collapse"/> component.
            </summary>
            <param name="visible">True if <see cref="T:Blazorise.Collapse"/> is visible.</param>
        </member>
        <member name="P:Blazorise.Collapse.InsideAccordion">
            <summary>
            Determines if the collapse is placed inside of accordion component.
            </summary>
        </member>
        <member name="P:Blazorise.Collapse.FirstInAccordion">
            <summary>
            Determines if the collapse is placed inside of accordion component as the first item.
            </summary>
        </member>
        <member name="P:Blazorise.Collapse.LastInAccordion">
            <summary>
            Determines if the collapse is placed inside of accordion component as the last item.
            </summary>
        </member>
        <member name="P:Blazorise.Collapse.Visible">
            <summary>
            Gets or sets the collapse visibility state.
            </summary>
        </member>
        <member name="P:Blazorise.Collapse.VisibleChanged">
            <summary>
            Occurs when the collapse visibility state changes.
            </summary>
        </member>
        <member name="P:Blazorise.Collapse.ParentAccordion">
            <summary>
            Gets or sets the cascaded parent accordion component.
            </summary>
        </member>
        <member name="P:Blazorise.Collapse.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Collapse"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CollapseBody">
            <summary>
            A wrapper for collapse content.
            </summary>
        </member>
        <member name="M:Blazorise.CollapseBody.#ctor">
            <summary>
            A default <see cref="T:Blazorise.CollapseBody"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.CollapseBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CollapseBody.BuildBodyClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a collapse body element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.CollapseBody.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.CollapseBody.ContentClassBuilder">
            <summary>
            Body container class builder.
            </summary>
        </member>
        <member name="P:Blazorise.CollapseBody.ContentClassNames">
            <summary>
            Gets body container class-names.
            </summary>
        </member>
        <member name="P:Blazorise.CollapseBody.Visible">
            <summary>
            Gets or sets the content visibility.
            </summary>
        </member>
        <member name="P:Blazorise.CollapseBody.ParentCollapse">
            <summary>
            Gets or sets the cascaded parent collapse component.
            </summary>
        </member>
        <member name="P:Blazorise.CollapseBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CollapseBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.CollapseHeader">
            <summary>
            A wrapper for collapse header.
            </summary>
        </member>
        <member name="M:Blazorise.CollapseHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.CollapseHeader.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the header onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.CollapseHeader.Clicked">
            <summary>
            Occurs when the header is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.CollapseHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.CollapseHeader"/>.
            </summary>
        </member>
        <member name="P:Blazorise.CollapseHeader.ParentCollapse">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Collapse"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ColorEdit">
            <summary>
            The editor that allows you to select a color from a dropdown menu.
            </summary>
        </member>
        <member name="M:Blazorise.ColorEdit.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorEdit.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorEdit.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the input onchange event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ColorEdit.OnInternalValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorEdit.FormatValueAsString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorEdit.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorEdit.Select(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ColorEdit.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ColorEdit.Color">
            <summary>
            Gets or sets the input color value.
            </summary>
        </member>
        <member name="P:Blazorise.ColorEdit.ColorChanged">
            <summary>
            Occurs when the color has changed.
            </summary>
        </member>
        <member name="P:Blazorise.ColorEdit.ColorExpression">
            <summary>
            Gets or sets an expression that identifies the color value.
            </summary>
        </member>
        <member name="T:Blazorise.ColorPicker">
            <summary>
            The editor that allows you to select a color from a dropdown menu.
            </summary>
        </member>
        <member name="F:Blazorise.ColorPicker.dotNetObjectRef">
            <summary>
            Object reference that can be accessed through the JSInterop.
            </summary>
        </member>
        <member name="M:Blazorise.ColorPicker.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.OnLocalizationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the localization changed event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the localization event.</param>
        </member>
        <member name="M:Blazorise.ColorPicker.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the input onchange event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ColorPicker.OnInternalValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.FormatValueAsString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.Select(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ColorPicker.SetValue(System.String)">
            <summary>
            Updated the <see cref="T:Blazorise.ColorPicker"/> with the new value.
            </summary>
            <param name="value">New color value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.ColorPicker.ColorPreviewElementSelector">
            <summary>
            Gets the CSS selector for the color preview element.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ColorValueElementSelector">
            <summary>
            Gets the CSS selector for the color value element.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ColorPicker.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSColorPickerModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.Color">
            <summary>
            Gets or sets the input color value.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ColorChanged">
            <summary>
            Occurs when the color has changed.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ColorExpression">
            <summary>
            Gets or sets an expression that identifies the color value.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.Palette">
            <summary>
            List a colors below the colorpicker to make it convenient for users to choose from
            frequently or recently used colors.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ShowPalette">
            <summary>
            Controls the visibility of the palette below the colorpicker to make it convenient for users to
            choose from frequently or recently used colors.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.HideAfterPaletteSelect">
            <summary>
            Automatically hides the dropdown menu after a palette color is selected.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ShowClearButton">
            <summary>
            Controls the visibility of the clear buttons.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ShowCancelButton">
            <summary>
            Controls the visibility of the cancel buttons.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ShowOpacitySlider">
            <summary>
            Controls the visibility of the opacity slider.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ShowHueSlider">
            <summary>
            Controls the visibility of the hue slider.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.ShowInputField">
            <summary>
            Controls the visibility of the textbox which shows the selected color value.
            </summary>
        </member>
        <member name="P:Blazorise.ColorPicker.PickerLocalizer">
            <summary>
            Function used to handle custom localization that will override a default <see cref="T:Blazorise.Localization.ITextLocalizer"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Column">
            <summary>
            A wrapper that represents a column in a flexbox grid.
            </summary>
        </member>
        <member name="M:Blazorise.Column.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Column.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Column.Gutter">
            <summary>
            Column grid spacing, we recommend setting it to (16 + 8n). (n stands for natural number.)
            </summary>
        </member>
        <member name="T:Blazorise.Container">
            <summary>
            The container is a simple element that allows you to place content within a given device or viewport.
            </summary>
        </member>
        <member name="M:Blazorise.Container.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Container.Breakpoint">
            <summary>
            Makes a full width container that is 100% wide until the specified breakpoint is reached.
            </summary>
        </member>
        <member name="P:Blazorise.Container.Fluid">
            <summary>
            Makes a full width container, spanning the entire width of the viewport.
            </summary>
        </member>
        <member name="P:Blazorise.Container.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Container"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Control">
            <summary>
            Wrapper for input components.
            </summary>
        </member>
        <member name="M:Blazorise.Control.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Control.Inline">
            <summary>
            Determines if the check or radio control will be inlined.
            </summary>
        </member>
        <member name="P:Blazorise.Control.Role">
            <summary>
            Sets the role that affects the behaviour of the control container.
            </summary>
        </member>
        <member name="P:Blazorise.Control.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Control"/>.
            </summary>
        </member>
        <member name="T:Blazorise.DateEdit`1">
            <summary>
            An editor that displays a date value and allows a user to edit the value.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="T:Blazorise.DateEdit`1"/> property.</typeparam>
        </member>
        <member name="M:Blazorise.DateEdit`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.FormatValueAsString(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DateEdit`1.ShowPicker">
            <summary>
            Show a browser picker for the date input.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.DateEdit`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DateEdit`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DateEdit`1.Mode">
            <summary>
            Gets the string representation of the input mode.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.DateFormat">
            <summary>
            Gets the date format based on the current <see cref="P:Blazorise.DateEdit`1.InputMode"/> settings.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.InputMode">
            <summary>
            Hints at the type of data that might be entered by the user while editing the element or its contents.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.Date">
            <summary>
            Gets or sets the input date value.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.DateChanged">
            <summary>
            Occurs when the date has changed.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.DateExpression">
            <summary>
            Gets or sets an expression that identifies the date value.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.Min">
            <summary>
            The earliest date to accept.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.Max">
            <summary>
            The latest date to accept.
            </summary>
        </member>
        <member name="P:Blazorise.DateEdit`1.Step">
             <summary>
             The step attribute specifies the legal day intervals to choose from when the user opens the calendar in a date field.
            
             For example, if step = "2", you can only select every second day in the calendar.
             </summary>
        </member>
        <member name="T:Blazorise.DatePicker`1">
            <summary>
            An editor that displays a date value and allows a user to edit the value.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="T:Blazorise.DatePicker`1"/> property.</typeparam>
        </member>
        <member name="M:Blazorise.DatePicker`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnInternalValueChanged(System.Collections.Generic.IReadOnlyList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.FormatValueAsString(System.Collections.Generic.IReadOnlyList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OpenAsync">
            <summary>
            Opens the calendar dropdown.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DatePicker`1.CloseAsync">
            <summary>
            Closes the calendar dropdown.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DatePicker`1.ToggleAsync">
            <summary>
            Shows/opens the calendar if its closed, hides/closes it otherwise.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DatePicker`1.Focus(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.Select(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DatePicker`1.OnLocalizationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the localization changed event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the localization event.</param>
        </member>
        <member name="M:Blazorise.DatePicker`1.IsSameAsInternalValue(System.Collections.Generic.IReadOnlyList{`0})">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DatePicker`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DatePicker`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DatePicker`1.CurrentRangeSeparator">
            <summary>
            Gets the range separator based on the current locale settings.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Mode">
            <summary>
            Gets the string representation of the input mode.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DateFormat">
            <summary>
            Gets the date format based on the current <see cref="P:Blazorise.DatePicker`1.InputMode"/> settings.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSDatePickerModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DisplayFormatConverter">
            <summary>
            Converts the supplied date format into the internal date format used by the <see cref="P:Blazorise.DatePicker`1.DisplayFormat"/> mask.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.InputFormatConverter">
            <summary>
            Converts the supplied date format into the internal date format used by the <see cref="P:Blazorise.DatePicker`1.InputFormat"/> mask.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.InputMode">
            <summary>
            Hints at the type of data that might be entered by the user while editing the element or its contents.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.SelectionMode">
            <summary>
            Defines the mode in which the dates can be selected.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.RangeSeparator">
            <summary>
            Overrides the range separator that is used to separate date values when <see cref="P:Blazorise.DatePicker`1.SelectionMode"/> is set to <see cref="F:Blazorise.DateInputSelectionMode.Range"/>.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Date">
            <summary>
            Gets or sets the input date value.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DateChanged">
            <summary>
            Occurs when the date has changed.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DateExpression">
            <summary>
            Gets or sets an expression that identifies the date value.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Dates">
            <summary>
            Gets or sets the input date value.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DatesChanged">
            <summary>
            Occurs when the date has changed.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DatesExpression">
            <summary>
            Gets or sets an expression that identifies the date value.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Min">
            <summary>
            The earliest date to accept.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Max">
            <summary>
            The latest date to accept.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.FirstDayOfWeek">
            <summary>
            Defines the first day of the week.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DisplayFormat">
            <summary>
            Defines the display format of the date input.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.InputFormat">
            <summary>
            Defines the input format mask of the date input.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.TimeAs24hr">
            <summary>
            Displays time picker in 24 hour mode without AM/PM selection when enabled.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DisabledDates">
            <summary>
            List of disabled dates that the user should not be able to pick.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.Inline">
            <summary>
            Display the calendar in an always-open state with the inline option.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.DisableMobile">
            <summary>
            If enabled, it disables the native input on mobile devices.
            </summary>
        </member>
        <member name="P:Blazorise.DatePicker`1.StaticPicker">
            <summary>
            If enabled, the calendar menu will be positioned as static.
            </summary>
        </member>
        <member name="T:Blazorise.IDatePicker">
            <summary>
            Base interface for <see cref="T:Blazorise.DatePicker`1"/> to be updated from javascript.
            </summary>
            <remarks>
            This is needed to set the value from javascript because calling generic component directly is not supported by Blazor.
            </remarks>
        </member>
        <member name="M:Blazorise.IDatePicker.OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeydown event.
            </summary>
            <param name="eventArgs">Information about the keyboard down event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.IDatePicker.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeypress event.
            </summary>
            <param name="eventArgs">Information about the keyboard pressed event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.IDatePicker.OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handler for @onkeyup event.
            </summary>
            <param name="eventArgs">Information about the keyboard up event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.IDatePicker.OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onfocus event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.IDatePicker.OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onfocusin event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.IDatePicker.OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onfocusout event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.IDatePicker.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handler for @onblur event.
            </summary>
            <param name="eventArgs">Information about the focus event.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="T:Blazorise.Divider">
            <summary>
            A divider is a thin line that groups content in lists and layouts.
            </summary>
        </member>
        <member name="F:Blazorise.Divider.type">
            <summary>
            Defines the type and style of the divider.
            </summary>
        </member>
        <member name="M:Blazorise.Divider.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Divider.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Divider.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Divider.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.Divider.ApplyDividerType">
            <summary>
            Gets the divider type to apply, based on current theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.Divider.DividerType">
            <summary>
            Defines the type and style of the divider.
            </summary>
        </member>
        <member name="P:Blazorise.Divider.Text">
            <summary>
            Defines the text of the divider when it's set as <see cref="F:Blazorise.DividerType.TextContent"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Divider.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.Dropdown">
            <summary>
            Dropdown is toggleable, contextual overlay for displaying lists of links and more.
            </summary>
        </member>
        <member name="F:Blazorise.Dropdown.state">
            <summary>
            State object used to holds the dropdown state.
            </summary>
        </member>
        <member name="F:Blazorise.Dropdown.childDropdown">
            <summary>
            The direct Dropdown child of this dropdown.
            </summary>
        </member>
        <member name="F:Blazorise.Dropdown.childrenDropdownMenus">
            <summary>
            A list of all DropdownMenu placed inside of this dropdown.
            </summary>
        </member>
        <member name="F:Blazorise.Dropdown.childrenDropdownToggles">
            <summary>
            A list of all DropdownToggle placed inside of this dropdown.
            </summary>
        </member>
        <member name="F:Blazorise.Dropdown.childrenButtonList">
            <summary>
            A list of all buttons placed inside of this dropdown, usually done in split mode.
            </summary>
        </member>
        <member name="M:Blazorise.Dropdown.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Dropdown.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Dropdown.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Dropdown.IsChildButton(System.String)">
            <summary>
            Whether the <paramref name="elementId"/> belongs to a child button of this dropdown.
            </summary>
            <param name="elementId">An element id to check.</param>
            <returns>True if the child element is a button.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.GetDropdownDirection">
            <summary>
            Gets the dropdown menu direction.
            </summary>
            <returns>Dropdown menu direction.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Dropdown.Show">
            <summary>
            Show the dropdown menu.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.Hide(System.Boolean)">
            <summary>
            Hide the dropdown menu.
            </summary>
            <param name="hideAll">Indicates if we need to hide current dropdown menu and all its parent dropdown menus.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.OnMouseLeaveHandler">
            <summary>
            Handles the onmouseleave event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.OnMouseEnterHandler">
            <summary>
            Handles the onmouseenter event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.Toggle(System.String)">
            <summary>
            Toggle the visibility of the dropdown menu.
            </summary>
            <param name="dropdownToggleElementId"></param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Dropdown.SetWasJustToggled(System.Boolean)">
            <summary>
            Sets the WasToggled Flag on the current Dropdown and every existing ParentDropdown.
            </summary>
            <param name="wasToggled"></param>
        </member>
        <member name="M:Blazorise.Dropdown.SetSelectedDropdownElementId(System.String)">
            <summary>
            Sets Selected Dropdown Toggle ElementId
            </summary>
            <param name="dropdownToggleElementId"></param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyButtonInitialized(Blazorise.Button)">
            <summary>
            Notifies the <see cref="T:Blazorise.Dropdown"/> that it has a child button component.
            </summary>
            <param name="button">Reference to the <see cref="T:Blazorise.Button"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyButtonRemoved(Blazorise.Button)">
            <summary>
            Notifies the <see cref="T:Blazorise.Dropdown"/> that it's a child button component should be removed.
            </summary>
            <param name="button">Reference to the <see cref="T:Blazorise.Button"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyChildDropdownInitialized(Blazorise.Dropdown)">
            <summary>
            Notifies the <see cref="T:Blazorise.Dropdown"/> that it has a child dropdown component.
            </summary>
            <param name="dropdown">Reference to the <see cref="T:Blazorise.Dropdown"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyChildDropdownRemoved(Blazorise.Dropdown)">
            <summary>
            Notifies the <see cref="T:Blazorise.Dropdown"/> that it's a child dropdown component should be removed.
            </summary>
            <param name="dropdown">Reference to the <see cref="T:Blazorise.Dropdown"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyDropdownMenuInitialized(Blazorise.DropdownMenu)">
            <summary>
            Adds child DropdownMenu to internal collection.
            </summary>
            <param name="dropdownMenu">Reference to the <see cref="T:Blazorise.DropdownMenu"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyDropdownMenuRemoved(Blazorise.DropdownMenu)">
            <summary>
            Removes child DropdownMenu from internal collection.
            </summary>
            <param name="dropdownMenu">Reference to the <see cref="T:Blazorise.DropdownMenu"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyDropdownToggleInitialized(Blazorise.DropdownToggle)">
            <summary>
            Adds child DropdownToggle to internal collection.
            </summary>
            <param name="dropdownToggle">Reference to the <see cref="T:Blazorise.DropdownToggle"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.NotifyDropdownToggleRemoved(Blazorise.DropdownToggle)">
            <summary>
            Removes child DropdownToggle from internal collection.
            </summary>
            <param name="dropdownToggle">Reference to the <see cref="T:Blazorise.DropdownToggle"/> that is placed inside of this <see cref="T:Blazorise.Dropdown"/>.</param>
        </member>
        <member name="M:Blazorise.Dropdown.HandleVisibilityStyles(System.Boolean)">
            <summary>
            Handles the styles based on the visibility flag.
            </summary>
            <param name="visible">Dropdown menu visibility flag.</param>
        </member>
        <member name="M:Blazorise.Dropdown.HandleVisibilityEvents(System.Boolean)">
            <summary>
            Handles all the events in this <see cref="T:Blazorise.Dropdown"/> based on the visibility flag.
            </summary>
            <param name="visible">Dropdown menu visibility flag.</param>
        </member>
        <member name="P:Blazorise.Dropdown.ShouldClose">
            <summary>
            Keeps track whether the Dropdown is in a state where it should close.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.WasJustToggled">
            <summary>
            Keeps track whether the Dropdown was just toggled, ignoring possible DropdownItem clicks which would otherwise close the dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Dropdown.State">
            <summary>
            Gets the reference to the <see cref="T:Blazorise.States.DropdownState"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.IsGroup">
            <summary>
            Makes the drop down to behave as a group for buttons(used for the split-button behaviour).
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.IsDropdownSubmenu">
            <summary>
            Returns true if the dropdown is placed inside of another dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.HasSubmenu">
            <summary>
            Returns true if this dropdown contains any child dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.SelectedDropdownElementId">
            <summary>
            Tracks the last DropdownToggle Element Id that acted.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSDropdownModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.Visible">
            <summary>
            If true, a dropdown menu will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.RightAligned">
            <summary>
            If true, a dropdown menu will be right aligned.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.Disabled">
            <summary>
            If true, dropdown would not react to button click.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.Direction">
            <summary>
            Dropdown-menu slide direction.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.VisibleChanged">
            <summary>
            Occurs after the dropdown menu visibility has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.ParentButtons">
            <summary>
            Gets or sets the cascaded parent buttons component.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.ParentTable">
            <summary>
            Gets or sets the cascaded parent table component.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.ParentDropdown">
            <summary>
            Gets or sets the cascaded parent Dropdown component.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Dropdown"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.PositionStrategy">
            <summary>
            Defines the positioning strategy of the dropdown menu as a 'floating' element.
            </summary>
        </member>
        <member name="P:Blazorise.Dropdown.DropdownMenuTargetId">
            <summary>
            Provides an alternative, or custom anchor element id for the dropdown menu.
            <para>This is useful when you want the dropdown menu to be anchored from a different element than the toggle.</para>
            </summary>
        </member>
        <member name="T:Blazorise.DropdownDivider">
            <summary>
            Divider that can be placed between <see cref="T:Blazorise.DropdownItem"/>'s.
            </summary>
        </member>
        <member name="M:Blazorise.DropdownDivider.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.DropdownHeader">
            <summary>
            Add a header to label sections of actions in any dropdown menu.
            </summary>
        </member>
        <member name="M:Blazorise.DropdownHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DropdownHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.DropdownHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.DropdownItem">
            <summary>
            A menu item for the <see cref="T:Blazorise.DropdownMenu"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.DropdownItem.checked">
            <summary>
            Internal Checked Value
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.checkedExpression">
            <summary>
            Internal Checked Expression
            </summary>
        </member>
        <member name="M:Blazorise.DropdownItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownItem.ClickHandler">
            <summary>
            Handles the onclick event, if not disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.DropdownItem.CheckedChangedHandler(System.Boolean)">
            <summary>
            Handles the oncheck event, if not disabled.
            </summary>
            <param name="isChecked"></param>
            <returns></returns>
        </member>
        <member name="P:Blazorise.DropdownItem.Value">
            <summary>
            Holds the item value.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.Active">
            <summary>
            Indicate the currently active item.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.Disabled">
            <summary>
            Indicate the currently disabled item.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.DropdownItem"/>.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.ParentDropdown">
            <summary>
            Gets or sets the reference to the parent dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.ShowCheckbox">
            <summary>
            The dropdown renders a checkbox.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.Checked">
            <summary>
            Tracks the Checked state whenever the DropdownItem is in checkbox mode.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownItem.CheckedChanged">
            <summary>
            Occurs after the Checked state is changed, whenever the DropdownItem is in checkbox mode.
            </summary>
        </member>
        <member name="T:Blazorise.DropdownMenu">
            <summary>
            Main container for a <see cref="T:Blazorise.Dropdown"/> menu that can contain or or more <see cref="T:Blazorise.DropdownItem"/>'s.
            </summary>
        </member>
        <member name="M:Blazorise.DropdownMenu.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownMenu.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownMenu.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownMenu.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownMenu.OnVisibleChanged(System.Boolean)">
            <summary>
            Handles the dropdown visibility state change.
            </summary>
            <param name="visible">Visibility flag.</param>
        </member>
        <member name="P:Blazorise.DropdownMenu.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DropdownMenu.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Container"/>.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownMenu.ParentDropdownState">
            <summary>
            Cascaded <see cref="T:Blazorise.Dropdown"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownMenu.MaxMenuHeight">
            <summary>
            Sets the maximum height of the dropdown menu.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownMenu.ParentDropdown">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Dropdown"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.DropdownToggle">
            <summary>
            Toggles the dropdown menu visibility on or off.
            </summary>
        </member>
        <member name="M:Blazorise.DropdownToggle.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownToggle.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownToggle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropdownToggle.DisposeAsync(System.Boolean)">
            <summary>
            Disposes all the used resources.
            </summary>
            <param name="disposing">True if object is disposing.</param>
        </member>
        <member name="M:Blazorise.DropdownToggle.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DropdownToggle.IsSafeToClose(System.String,Blazorise.CloseReason,System.Boolean)">
            <summary>
            Returns true of the parent dropdown-menu is safe to be closed.
            </summary>
            <param name="elementId">Id of an element.</param>
            <param name="closeReason">Close reason.</param>
            <param name="isChildClicked">Indicates if the child element was clicked.</param>
            <returns>True if it's safe to be closed.</returns>
        </member>
        <member name="M:Blazorise.DropdownToggle.Close(Blazorise.CloseReason)">
            <summary>
            Forces the parent dropdown to close the dropdown-menu.
            </summary>
            <param name="closeReason">Reason for closing the parent.</param>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="M:Blazorise.DropdownToggle.Focus(System.Boolean)">
            <summary>
            Sets focus on the input element, if it can be focused.
            </summary>
            <param name="scrollToElement">If true the browser should scroll the document to bring the newly-focused element into view.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DropdownToggle.HandleVisibilityStyles(System.Boolean)">
            <summary>
            Handles the visibility styles and JS interop states.
            </summary>
            <param name="visible">True if component is visible.</param>
        </member>
        <member name="M:Blazorise.DropdownToggle.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.DropdownToggle.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DropdownToggle.IsGroup">
            <summary>
            True if parent dropdown is part of a button group.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.IsDisabled">
            <summary>
            True if the toggle button should be disabled.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.IsToggleIconVisible">
            <summary>
            Should the toggle icon be drawn
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.ThemeSize">
            <summary>
            Gets the size based on the theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.DataBoundary">
            <summary>
            Gets the data-boundary value.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.JSClosableModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSClosableModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.JSUtilitiesModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSUtilitiesModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Color">
            <summary>
            Gets or sets the dropdown color.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Size">
            <summary>
            Gets or sets the dropdown size.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Outline">
            <summary>
            Button outline.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Split">
            <summary>
            Indicates that a toggle should act as a split button.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Disabled">
            <summary>
            Makes the toggle element look inactive.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.ParentDropdownState">
            <summary>
            Gets or sets the parent dropdown state object.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.ToggleIconVisible">
            <summary>
            Gets or sets a value indicating whether the dropdown toggle icon is visible.
            </summary>
            <value>
            <c>true</c> if [show toggle]; otherwise, <c>false</c>.
            </value>
            <remarks>Default: True</remarks>
        </member>
        <member name="P:Blazorise.DropdownToggle.TabIndex">
            <summary>
            If defined, indicates that its element can be focused and can participates in sequential keyboard navigation.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Clicked">
            <summary>
            Occurs when the toggle button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.Theme">
            <summary>
            The applied theme.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.ParentDropdown">
            <summary>
            Gets or sets the reference to the parent dropdown.
            </summary>
        </member>
        <member name="P:Blazorise.DropdownToggle.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.DropdownToggle"/>.
            </summary>
        </member>
        <member name="T:Blazorise.DraggableDroppedEventArgs`1">
            <summary>
            Defines the draggable item that is being dropped onto the dropzone.
            </summary>
            <typeparam name="TItem">Type of dropped item.</typeparam>
        </member>
        <member name="M:Blazorise.DraggableDroppedEventArgs`1.#ctor(`0,System.String,System.String,System.Int32)">
            <summary>
            A default <see cref="T:Blazorise.DraggableDroppedEventArgs`1"/> constructor.
            </summary>
            <param name="item">The dropped item during the transaction.</param>
            <param name="dropZoneName">Name of the zone where the transaction started.</param>
            <param name="sourceDropZoneName">Name of the zone where the item originated.</param>
            <param name="indexInZone">The index of the item within the dropzone.</param>
        </member>
        <member name="P:Blazorise.DraggableDroppedEventArgs`1.Item">
            <summary>
            Gets the dropped item during the transaction.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableDroppedEventArgs`1.DropZoneName">
            <summary>
            Gets the name of the zone where the transaction started.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableDroppedEventArgs`1.SourceDropZoneName">
            <summary>
            Gets the name of the zone where <see cref="P:Blazorise.DraggableDroppedEventArgs`1.Item"/> originated from.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableDroppedEventArgs`1.IndexInZone">
            <summary>
            The index of the item within the dropzone.
            </summary>
        </member>
        <member name="T:Blazorise.DraggableIndexChangedEventArgs">
            <summary>
            Defines the change drag&amp;drop transaction index.
            </summary>
        </member>
        <member name="M:Blazorise.DraggableIndexChangedEventArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            A default <see cref="T:Blazorise.DraggableIndexChangedEventArgs"/> constructor.
            </summary>
            <param name="zoneName">Name of the current zone.</param>
            <param name="oldZoneName">Name of the previous zone.</param>
            <param name="index">Index if the dragable item.</param>
        </member>
        <member name="P:Blazorise.DraggableIndexChangedEventArgs.ZoneName">
            <summary>
            Gets the current zone name.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableIndexChangedEventArgs.OldZoneName">
            <summary>
            Gets the previous zone name.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableIndexChangedEventArgs.Index">
            <summary>
            Gets the index if the dragable item.
            </summary>
        </member>
        <member name="T:Blazorise.DraggableTransaction`1">
            <summary>
            Defines the drag&amp;drop transaction.
            </summary>
            <typeparam name="TItem">Type of drag&amp;drop item.</typeparam>
        </member>
        <member name="M:Blazorise.DraggableTransaction`1.#ctor(`0,System.String,System.Int32,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            A default <see cref="T:Blazorise.DraggableTransaction`1"/> constructor.
            </summary>
            <param name="item">The dropped item during the transaction.</param>
            <param name="sourceZoneName">Name of the zone where the transaction started.</param>
            <param name="index">Index of the draggable item.</param>
            <param name="commited">Callback that will be called after the successful transaction.</param>
            <param name="canceled">Callback that will be called when the transaction has been cancelled.</param>
        </member>
        <member name="M:Blazorise.DraggableTransaction`1.Cancel">
            <summary>
            Cancel the transaction.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DraggableTransaction`1.Commit">
            <summary>
            Commit this transaction as succesful
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.DraggableTransaction`1.Item">
            <summary>
            Gets the item that is being dragged during the transaction.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransaction`1.Index">
            <summary>
            The index of the draggable item.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransaction`1.SourceIndex">
            <summary>
            The index of the item when the transaction started.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransaction`1.SourceZoneName">
            <summary>
            Gets the name of the drop zone where the transaction has started.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransaction`1.CurrentZoneName">
            <summary>
            Gets the name of the drop zone where the transaction is currently executing.
            </summary>
        </member>
        <member name="T:Blazorise.DraggableTransactionEnded`1">
            <summary>
            Defines the drag&amp;drop finished transaction.
            </summary>
            <typeparam name="TItem">Type of drag&amp;drop item.</typeparam>
        </member>
        <member name="M:Blazorise.DraggableTransactionEnded`1.#ctor(Blazorise.DraggableTransaction{`0})">
            <summary>
            A default <see cref="T:Blazorise.DraggableTransactionEnded`1"/> constructor.
            </summary>
            <param name="transaction">Transaction that is finished.</param>
        </member>
        <member name="M:Blazorise.DraggableTransactionEnded`1.#ctor(System.String,System.Boolean,Blazorise.DraggableTransaction{`0})">
            <summary>
            A manual <see cref="T:Blazorise.DraggableTransactionEnded`1"/> constructor.
            </summary>
            <param name="destinationDropZoneName">Name of the zone where the transaction has ended.</param>
            <param name="success">Flag that indicated if the transaction was successful.</param>
            <param name="transaction">Transaction that is finished.</param>
        </member>
        <member name="P:Blazorise.DraggableTransactionEnded`1.Item">
            <summary>
            Gets the item that is being dragged during the transaction.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransactionEnded`1.Success">
            <summary>
            Gets the flag that indicated if the transaction was successful.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransactionEnded`1.OriginDropZoneName">
            <summary>
            Gets the name of the drop zone where the transaction has started.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransactionEnded`1.DestinationDropZoneName">
            <summary>
            Gets the name of the zone where the transaction has ended.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransactionEnded`1.OriginIndex">
            <summary>
            Gets the index of the drop item where the transaction has started.
            </summary>
        </member>
        <member name="P:Blazorise.DraggableTransactionEnded`1.DestinationIndex">
            <summary>
            Gets the index of the drop item where the transaction has ended.
            </summary>
        </member>
        <member name="T:Blazorise.DropContainer`1">
            <summary>
            Wrapper component for the draggable items and dropzones.
            </summary>
            <typeparam name="TItem">Type of the draggable item.</typeparam>
        </member>
        <member name="E:Blazorise.DropContainer`1.TransactionStarted">
            <summary>
            An event that occurs after the drag transaction has started.
            </summary>
        </member>
        <member name="E:Blazorise.DropContainer`1.TransactionIndexChanged">
            <summary>
            An event that occurs after the drag item index has changed.
            </summary>
        </member>
        <member name="E:Blazorise.DropContainer`1.TransactionEnded">
            <summary>
            An event that occurs after the drag transaction has ended.
            </summary>
        </member>
        <member name="E:Blazorise.DropContainer`1.RefreshRequested">
            <summary>
            An event that occurs after the refresh has been requested.
            </summary>
        </member>
        <member name="M:Blazorise.DropContainer`1.StartTransaction(`0,System.String,System.Int32,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Starts the new drag &amp; drop transaction for the specified item and dropzone.
            </summary>
            <param name="item">Item that is being dragged.</param>
            <param name="sourceZoneName">Dropzone name that is the source of the drag operation.</param>
            <param name="draggableIndex">Index of the draggable item.</param>
            <param name="commited">Callback that will be called after the successful transaction.</param>
            <param name="canceled">Callback that will be called when the transaction has been cancelled.</param>
        </member>
        <member name="M:Blazorise.DropContainer`1.CommitTransaction(System.String,System.Boolean)">
            <summary>
            Commits the drag &amp; drop transaction.
            </summary>
            <param name="dropZoneName">Dropzone name that is the source of the drag operation.</param>
            <param name="reorderIsAllowed">Indicates if the draggable items is allowed to be reordered.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DropContainer`1.CancelTransaction">
            <summary>
            Cancels the drag &amp; drop transaction.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.DropContainer`1.UpdateTransactionIndex(System.Int32)">
            <summary>
            Updates the draggable index for the current transaction.
            </summary>
            <param name="index">Draggable index.</param>
        </member>
        <member name="M:Blazorise.DropContainer`1.UpdateTransactionZone(System.String)">
            <summary>
            Updates the zone name for the current transaction.
            </summary>
            <param name="name">Zone name.</param>
        </member>
        <member name="M:Blazorise.DropContainer`1.GetTransactionItem">
            <summary>
            Gets the item that is currently in the transaction.
            </summary>
            <returns>Current transaction item.</returns>
        </member>
        <member name="M:Blazorise.DropContainer`1.Refresh">
            <summary>
            Request the refresh of the drag container.
            </summary>
        </member>
        <member name="M:Blazorise.DropContainer`1.GetTransactionIndex">
            <summary>
            Gets the current transaction index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blazorise.DropContainer`1.IsItemMovedDownwards">
            <summary>
            True if the draggable item is going downwards.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.IsItemMovedDownwardsOrSame">
            <summary>
            True if the draggable item is going downwards or the draggable is the same.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.HasTransactionIndexChanged">
            <summary>
            True if the transaction index has changed.
            </summary>
        </member>
        <member name="M:Blazorise.DropContainer`1.IsOrigin(System.Int32,System.String)">
            <summary>
            Indicates if the supplied name and transaction index are in the current transaction.
            </summary>
            <param name="index">Draggable index.</param>
            <param name="zoneName">Zone name to check.</param>
            <returns>True if the zone and index matches the current transaction.</returns>
        </member>
        <member name="P:Blazorise.DropContainer`1.TransactionCurrentZoneName">
            <summary>
            Gets the name of the current zone.
            </summary>
        </member>
        <member name="M:Blazorise.DropContainer`1.IsTransactionOriginatedFromInside(System.String)">
            <summary>
            Gets the name of the zone where the transaction has started.
            </summary>
            <param name="zoneName"></param>
            <returns></returns>
        </member>
        <member name="P:Blazorise.DropContainer`1.TransactionInProgress">
            <summary>
            True if the drag transaction is in process.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.TransactionSourceZoneName">
            <summary>
            Gets the name of the dropzone that started the transaction.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.Items">
            <summary>
            Items that are used for the drag&amp;drop withing the container.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ItemsFilter">
            <summary>
            The method used to determine if the item belongs to the dropzone.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ItemTemplate">
            <summary>
            The render method that is used to render the items withing the dropzone.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ItemDropped">
            <summary>
            Callback that indicates that an item has been dropped on a drop zone. Should be used to update the "status" of the data item.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.DropAllowed">
            <summary>
            Determines if the item is allowed to be dropped to the specified zone.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.DropAllowedClass">
            <summary>
            Classname that is applied if dropping to the current zone is allowed.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.DropNotAllowedClass">
            <summary>
            Classname that is applied if dropping to the current zone is not allowed.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ApplyDropClassesOnDragStarted">
            <summary>
            When true, <see cref="P:Blazorise.DropContainer`1.DropAllowedClass"/> or <see cref="P:Blazorise.DropContainer`1.DropNotAllowedClass"/> drop classes are applied as soon as a transaction has started.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ItemDisabled">
            <summary>
            Determines if the item is disabled for dragging and dropping.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.DisabledClass">
            <summary>
            Classname that is applied to the dropzone if the result of <see cref="P:Blazorise.DropContainer`1.ItemDisabled"/> is false.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.DraggingClass">
            <summary>
            Classname that is applied to the dropzone when the drag operation has started.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ItemDraggingClass">
            <summary>
            Classname that is applied to the drag item when it is being dragged.
            </summary>
        </member>
        <member name="P:Blazorise.DropContainer`1.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.DropContainer`1"/>.
            </summary>
        </member>
        <member name="T:Blazorise.DropZone`1">
            <summary>
            Wrapper component that are acting as a drop area for the drop items.
            </summary>
            <typeparam name="TItem">Type of the draggable item.</typeparam>
        </member>
        <member name="F:Blazorise.DropZone`1.dropAllowed">
            <summary>
            Indicates that the drop operation is allowed.
            </summary>
        </member>
        <member name="F:Blazorise.DropZone`1.dragging">
            <summary>
            Indicates that the dragging operation is in process.
            </summary>
        </member>
        <member name="M:Blazorise.DropZone`1.#ctor">
            <summary>
            A default <see cref="T:Blazorise.DropZone`1"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.DropZone`1.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropZone`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropZone`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropZone`1.BuildPlaceholderClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a placeholder.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.DropZone`1.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropZone`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DropZone`1.ShouldRender">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DropZone`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DropZone`1.TransactionSourceZoneName">
            <summary>
            Gets the name of the dropzone that started the transaction.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.PlaceholderClassBuilder">
            <summary>
            Placeholder class builder.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSDragDropModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.Name">
            <summary>
            Gets or sets the unique name of the dropzone.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ItemsFilter">
            <summary>
            The method used to determine if the item belongs to the dropzone.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ItemTemplate">
            <summary>
            The render method that is used to render the items withing the dropzone.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.DropAllowed">
            <summary>
            Determines if the item is allowed to be dropped to this zone.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.DropAllowedClass">
            <summary>
            Classname that is applied if dropping to the current zone is allowed.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.DropNotAllowedClass">
            <summary>
            Classname that is applied if dropping to the current zone is not allowed.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ApplyDropClassesOnDragStarted">
            <summary>
            When true, <see cref="P:Blazorise.DropZone`1.DropAllowedClass"/> or <see cref="P:Blazorise.DropZone`1.DropNotAllowedClass"/> drop classes are applied as soon as a transaction has started.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ItemDisabled">
            <summary>
            Determines if the item is disabled for dragging and dropping.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.DisabledClass">
            <summary>
            Classname that is applied to the dropzone if the result of <see cref="P:Blazorise.DropZone`1.ItemDisabled"/> is false.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.DraggingClass">
            <summary>
            Classname that is applied to the dropzone when the drag operation has started.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ItemDraggingClass">
            <summary>
            Classname that is applied to the drag item when it is being dragged.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.AllowReorder">
            <summary>
            If true, the reordering of the items will be enabled.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.OnlyZone">
            <summary>
            If true, will only act as a dropable zone and not render any items.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.DropZone`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.DropZone`1.ParentContainer">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.DropContainer`1"/> component.
            </summary>
        </member>
        <member name="T:Blazorise._Draggable`1">
            <summary>
            Internal component that represents the drag item used by the <see cref="T:Blazorise.DropZone`1"/>.
            </summary>
            <typeparam name="TItem">Datatype of the item being dragged.</typeparam>
        </member>
        <member name="M:Blazorise._Draggable`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise._Draggable`1.ZoneName">
            <summary>
            The dropzone name this this draggable belongs to.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.Item">
            <summary>
            The data that is represented by this item.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.DragStarted">
            <summary>
            An event that is raised when a drag operation has started.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.DragEnded">
            <summary>
            An event that is raised when a drag operation has ended.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.Disabled">
            <summary>
            If true, the draggable item canot be dragged.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.DisabledClass">
            <summary>
            The classname that is applied when <see cref="P:Blazorise._Draggable`1.Disabled"/> is set to true.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.DraggingClass">
            <summary>
            The classname that is applied when a dragging operation is in progress.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.Index">
            <summary>
            Defines the index of the draggable item.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.HideContent">
            <summary>
            If true, the item content will not be rendered.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise._Draggable`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise._Draggable`1.ParentContainer">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.DropContainer`1"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Dynamic">
            <summary>
            Component used to dynamically build a DOM element based on its name.
            </summary>
        </member>
        <member name="M:Blazorise.Dynamic.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Dynamic.TagName">
            <summary>
            Gets or sets the name of the element to render.
            </summary>
        </member>
        <member name="P:Blazorise.Dynamic.ElementRef">
            <summary>
            Gets or sets the element reference.
            </summary>
        </member>
        <member name="P:Blazorise.Dynamic.ElementRefChanged">
            <summary>
            Notifies us that the element reference has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Dynamic.ClickPreventDefault">
            <summary>
            Set to true if click event need to be prevented.
            </summary>
        </member>
        <member name="P:Blazorise.Dynamic.ClickStopPropagation">
            <summary>
            Set to true if click event need to be prevented from propagation.
            </summary>
        </member>
        <member name="P:Blazorise.Dynamic.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Dynamic"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Dynamic.Attributes">
            <summary>
            Captures all the custom attribute that are not part of Blazorise component.
            </summary>
        </member>
        <member name="T:Blazorise.Field">
            <summary>
            Wrapper for form input components like label, text, button, etc.
            </summary>
        </member>
        <member name="M:Blazorise.Field.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Field.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Field.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Field.DetachValidationStatusChangedListener">
            <summary>
            Unsubscribe from <see cref="P:Blazorise.Validation.StatusChanged"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.Field.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Field.OnValidationStatusChanged(System.Object,Blazorise.ValidationStatusChangedEventArgs)">
            <summary>
            Handles the <see cref="P:Blazorise.Validation.StatusChanged"/> event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the <see cref="T:Blazorise.Validation"/> status change event.</param>
        </member>
        <member name="M:Blazorise.Field.Hook(Blazorise.BaseComponent)">
            <summary>
            Notifies the field that one of it's child components needs a special treatment.
            </summary>
            <param name="component">Reference to the child component.</param>
        </member>
        <member name="P:Blazorise.Field.IsFields">
            <summary>
            Determines if the field is inside of <see cref="T:Blazorise.Fields"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Field.Horizontal">
            <summary>
            Aligns the controls for horizontal form.
            </summary>
        </member>
        <member name="P:Blazorise.Field.JustifyContent">
            <summary>
            Aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
            </summary>
        </member>
        <member name="P:Blazorise.Field.ParentFields">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Fields"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Field.ParentValidation">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Validation"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.FieldBody">
            <summary>
            Container for input components when <see cref="T:Blazorise.Field"/> has <see cref="P:Blazorise.Field.Horizontal"/> set to true.
            </summary>
        </member>
        <member name="M:Blazorise.FieldBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.FieldHelp">
            <summary>
            Sets the field help-text positioned bellow the field.
            </summary>
        </member>
        <member name="M:Blazorise.FieldHelp.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FieldHelp.ParentIsFieldBody">
            <summary>
            True if the parent <see cref="T:Blazorise.Field"/> is in horizontal mode.
            </summary>
        </member>
        <member name="P:Blazorise.FieldHelp.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.FieldHelp"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FieldHelp.ParentFieldBody">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.FieldBody"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.FieldLabel">
            <summary>
            Label for a <see cref="T:Blazorise.Field"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.FieldLabel.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FieldLabel.For">
            <summary>
            Gets or sets the ID of an element that this label belongs to.
            </summary>
        </member>
        <member name="P:Blazorise.FieldLabel.RequiredIndicator">
            <summary>
            If defined, a required indicator will be shown next to the label.
            </summary>
        </member>
        <member name="P:Blazorise.FieldLabel.Screenreader">
            <summary>
            Defines the visibility for screen readers.
            </summary>
        </member>
        <member name="T:Blazorise.Fields">
            <summary>
            Container for multiple <see cref="T:Blazorise.Field"/> component that needs to be placed in a flexbox grid row.
            </summary>
        </member>
        <member name="M:Blazorise.Fields.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Fields.Label">
            <summary>
            Sets the field label.
            </summary>
        </member>
        <member name="P:Blazorise.Fields.Help">
            <summary>
            Sets the field help-text positioned bellow the field.
            </summary>
        </member>
        <member name="T:Blazorise.Figure">
            <summary>
            Wrapper for piece of content like images, than can display optional caption.
            </summary>
        </member>
        <member name="M:Blazorise.Figure.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Figure.Size">
            <summary>
            Gets or sets the figure size.
            </summary>
        </member>
        <member name="P:Blazorise.Figure.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Figure"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.FigureCaption">
            <summary>
            Optional caption for a <see cref="T:Blazorise.Figure"/> image.
            </summary>
        </member>
        <member name="M:Blazorise.FigureCaption.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FigureCaption.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.FigureCaption"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.FigureImage">
            <summary>
            Wrapper for a <see cref="T:Blazorise.Figure"/> image.
            </summary>
        </member>
        <member name="M:Blazorise.FigureImage.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FigureImage.Source">
            <summary>
            The absolute or relative URL of the image.
            </summary>
        </member>
        <member name="P:Blazorise.FigureImage.AlternateText">
            <summary>
            Alternate text for an image.
            </summary>
        </member>
        <member name="P:Blazorise.FigureImage.Rounded">
            <summary>
            True if container should have a rounded corners.
            </summary>
        </member>
        <member name="T:Blazorise.FileEdit">
            <summary>
            Input component with support for single of multi file upload.
            </summary>
        </member>
        <member name="M:Blazorise.FileEdit.GetCurrentProgress">
            <summary>
            Gets the internal progress state for the current item being processed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FileEdit.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.OnLocalizationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the localization changed event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the localization event.</param>
        </member>
        <member name="M:Blazorise.FileEdit.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.NotifyChange(Blazorise.FileEntry[])">
            <summary>
            Notifies the component that file input value has changed.
            </summary>
            <param name="files">List of changed file(s).</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FileEdit.OnInternalValueChanged(Blazorise.IFileEntry[])">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.UpdateFileStartedAsync(Blazorise.IFileEntry)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.UpdateFileEndedAsync(Blazorise.IFileEntry,System.Boolean,Blazorise.FileInvalidReason)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.UpdateFileWrittenAsync(Blazorise.IFileEntry,System.Int64,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.UpdateFileProgressAsync(Blazorise.IFileEntry,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.WriteToStreamAsync(Blazorise.FileEntry,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.OpenReadStream(Blazorise.FileEntry,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEdit.Reset">
            <summary>
            Manually resets the input file value.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FileEdit.RemoveFile(System.Int32)">
            <summary>
            Removes a file from the current file selection.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FileEdit.ShowPicker">
            <summary>
            Show a browser picker for the file input.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.FileEdit.Files">
            <summary>
            Gets the currently added files.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEdit.InternalValue">
            <inheritdoc/>
        </member>
        <member name="F:Blazorise.FileEdit.ProgressProgress">
            <summary>
            Number of processed bytes in current file.
            </summary>
        </member>
        <member name="F:Blazorise.FileEdit.ProgressTotal">
            <summary>
            Total number of bytes in currently processed file.
            </summary>
        </member>
        <member name="F:Blazorise.FileEdit.Progress">
            <summary>
            Percentage of the current file-read status.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.JSFileEditModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSFileEditModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.JSFileModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSFileModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.BrowseButtonString">
            <summary>
            Gets the localized browse button text.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.SelectedFileNames">
            <summary>
            Gets the list is selected filename
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Multiple">
            <summary>
            Enables the multiple file selection.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Directory">
            <summary>
            Gets or Sets whether file picker should upload directories.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Placeholder">
            <summary>
            Sets the placeholder for the empty file input.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Filter">
            <summary>
            Specifies the types of files that the input accepts. https://www.w3schools.com/tags/att_input_accept.asp"
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.MaxChunkSize">
            <summary>
            Gets or sets the max chunk size when uploading the file.
            Take note that if you're using <see cref="M:Blazorise.FileEdit.OpenReadStream(Blazorise.FileEntry,System.Threading.CancellationToken)"/> you're provided with a stream and should configure the chunk size when handling with the stream.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-6.0#stream-from-javascript-to-net
            </remarks>
        </member>
        <member name="P:Blazorise.FileEdit.MaxFileSize">
            <summary>
            Maximum file size in bytes, checked before starting upload (note: never trust client, always check file
            size at server-side). Defaults to <see cref="F:System.Int64.MaxValue"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.SegmentFetchTimeout">
            <summary>
            Gets or sets the Segment Fetch Timeout when uploading the file.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Changed">
            <summary>
            Occurs every time the selected file has changed, including when the reset operation is executed.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Started">
            <summary>
            Occurs when an individual file upload has started.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Ended">
            <summary>
            Occurs when an individual file upload has ended.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Written">
            <summary>
            Occurs every time the part of file has being written to the destination stream.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.Progressed">
            <summary>
            Notifies the progress of file being written to the destination stream.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.AutoReset">
            <summary>
            If true file input will be automatically reset after it has being uploaded.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.BrowseButtonLocalizer">
            <summary>
            Function used to handle custom localization that will override a default <see cref="T:Blazorise.Localization.ITextLocalizer"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FileEdit.DisableProgressReport">
            <summary>
            Gets or sets whether report progress should be disabled. By enabling this setting, Progressed and Written callbacks won't be called. Internal file progress won't be tracked.
            <para>This setting can speed up file transfer considerably.</para>
            </summary>
        </member>
        <member name="T:Blazorise.IFileEdit">
            <summary>
            This is needed to set the value from javascript because calling generic component directly is not supported by Blazor.
            </summary>
        </member>
        <member name="M:Blazorise.IFileEdit.NotifyChange(Blazorise.FileEntry[])">
            <summary>
            Notify us that one or more files has changed.
            </summary>
            <param name="files">List of changed files.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.FilePicker">
            <summary>
            A wrapper component build upon <see cref="F:Blazorise.FilePicker.FileEdit"/> component providing extra file uploading features.
            </summary>
        </member>
        <member name="F:Blazorise.FilePicker.fileBeingUploaded">
            <summary>
            Tracks the current file being uploaded.
            </summary>
        </member>
        <member name="F:Blazorise.FilePicker.filePickerConfirmModalRef">
            <summary>
            Holds the reference to the confirmation dialog component.
            </summary>
        </member>
        <member name="M:Blazorise.FilePicker.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FilePicker.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FilePicker.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FilePicker.OnLocalizationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the localization changed event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the localization event.</param>
        </member>
        <member name="M:Blazorise.FilePicker.GetProgressPercentage">
            <summary>
            Gets progress for percentage display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.IsFileBeingUploaded(Blazorise.IFileEntry)">
            <summary>
            Tracks whether the current file is being uploaded.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.IsBusy">
            <summary>
            Tracks whether the FilePicker is busy and user interaction should be disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.IsUploadReady">
            <summary>
            Tracks whether the FilePicker has files ready to upload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.GetFileSizeReadable(Blazorise.IFileEntry)">
            <summary>
            Converts the file size in bytes into a proper human readable format.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.GetFileStatus(Blazorise.IFileEntry)">
            <summary>
            Gets the File Status
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.GetLocalizedString(System.String)">
            <summary>
            Gets a FilePicker Localized string.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.RemoveFile(Blazorise.IFileEntry,System.Boolean)">
            <summary>
            Removes the file from FileEdit.
            </summary>
            <param name="file">The file entry to remove.</param>
            <param name="confirm">Wether to show a confirmation popup.</param>
        </member>
        <member name="M:Blazorise.FilePicker.Clear(System.Boolean)">
            <summary>
            Clears the FileEdit by resetting the state.
            </summary>
            <param name="confirm">Wether to show a confirmation popup.</param>
        </member>
        <member name="M:Blazorise.FilePicker.UploadAll">
            <summary>
            Uploads the current files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.UploadFile(Blazorise.IFileEntry,System.Boolean)">
            <summary>
            Uploads a single file if the status is set to ready.
            </summary>
            <param name="file">The file to upload.</param>
            <param name="forceUpload">Forces file upload attempt.</param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.Cancel(System.Boolean)">
            <summary>
            Cancels any ongoing upload operation.
            </summary>
            <param name="confirm">Wether to show a confirmation popup.</param>
        </member>
        <member name="M:Blazorise.FilePicker.RemoveFileWithConfirm(Blazorise.IFileEntry)">
            <summary>
            Internal method. Facilitates named binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.ClearWithConfirm">
            <summary>
            Internal method. Facilitates named binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.CancelWithConfirm">
            <summary>
            Internal method. Facilitates named binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.OnStarted(Blazorise.FileStartedEventArgs)">
            <summary>
            FilePicker's handling of the Started Event.
            </summary>
            <param name="fileStartedEventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.OnChanged(Blazorise.FileChangedEventArgs)">
            <summary>
            FilePicker's handling of the Changed Event.
            </summary>
            <param name="fileChangedEventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.OnEnded(Blazorise.FileEndedEventArgs)">
            <summary>
            FilePicker's handling of the Ended Event.
            </summary>
            <param name="fileEndedEventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.FilePicker.OnProgressed(Blazorise.FileProgressedEventArgs)">
            <summary>
            FilePicker's handling of the Progressed Event.
            </summary>
            <param name="fileProgressedEventArgs"></param>
            <returns></returns>
        </member>
        <member name="F:Blazorise.FilePicker.FileEdit">
            <summary>
            Accesses the FileEdit
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.ElementContainerId">
            <summary>
            Gets or sets the main container element id.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FilePicker.DragAndDropString">
            <summary>
            Gets the localized browse button text.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.JSFilePickerModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSFilePickerModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.ChildTemplate">
            <summary>
            Input content.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Feedback">
            <summary>
            Placeholder for validation messages.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Multiple">
            <summary>
            Enables the multiple file selection.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Placeholder">
            <summary>
            Sets the placeholder for the empty file input.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Filter">
            <summary>
            Specifies the types of files that the input accepts. https://www.w3schools.com/tags/att_input_accept.asp"
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.MaxChunkSize">
            <summary>
            Gets or sets the max chunk size when uploading the file.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.MaxFileSize">
            <summary>
            Maximum file size in bytes, checked before starting upload (note: never trust client, always check file
            size at server-side). Defaults to <see cref="F:System.Int64.MaxValue"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.SegmentFetchTimeout">
            <summary>
            Gets or sets the Segment Fetch Timeout when uploading the file.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Changed">
            <summary>
            Occurs every time the selected file has changed, including when the reset operation is executed.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Started">
            <summary>
            Occurs when an individual file upload has started.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Ended">
            <summary>
            Occurs when an individual file upload has ended.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Written">
            <summary>
            Occurs every time the part of file has being written to the destination stream.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Progressed">
            <summary>
            Notifies the progress of file being written to the destination stream.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Upload">
            <summary>
            Occurs once the FilePicker's Upload is triggered for every file.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.AutoReset">
            <summary>
            If true file input will be automatically reset after it has being uploaded.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.FilePickerLocalizer">
            <summary>
            Function used to handle custom localization that will override a default <see cref="T:Blazorise.Localization.ITextLocalizer"/>.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.FileTemplate">
            <summary>
            Provides a custom file content.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.ButtonsTemplate">
            <summary>
            Provides a custom content for upload, clear and cancel buttons.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.ShowMode">
            <summary>
            Gets or Sets FilePicker's show mode.
            Defaults to <see cref="F:Blazorise.FilePickerShowMode.List"/>
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.DisableProgressReport">
            <summary>
            Gets or sets whether report progress should be disabled. By enabling this setting, Progressed and Written callbacks won't be called. Internal file progress won't be tracked.
            <para>This setting can speed up file transfer considerably.</para>
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Directory">
            <summary>
            Gets or Sets whether file picker should upload directories.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.ReadOnly">
            <summary>
            Add the readonly boolean attribute on an input to prevent modification of the input’s value.
            </summary>
        </member>
        <member name="P:Blazorise.FilePicker.Disabled">
            <summary>
            Add the disabled boolean attribute on an input to prevent user interactions and make it appear lighter.
            </summary>
        </member>
        <member name="T:Blazorise.FilePickerButtonsContext">
            <summary>
            Context for File Picker's Buttons
            </summary>
        </member>
        <member name="M:Blazorise.FilePickerButtonsContext.#ctor">
            <summary>
            Default context constructor.
            </summary>
        </member>
        <member name="M:Blazorise.FilePickerButtonsContext.#ctor(Microsoft.AspNetCore.Components.EventCallback,Microsoft.AspNetCore.Components.EventCallback,Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Default context constructor.
            </summary>
            <param name="clear">The Clear EventCallback</param>
            <param name="upload">The Upload EventCallback</param>
            <param name="cancel">The Cancel EventCallback.</param>
        </member>
        <member name="P:Blazorise.FilePickerButtonsContext.Upload">
            <summary>
            Activates the upload event.
            </summary>
        </member>
        <member name="P:Blazorise.FilePickerButtonsContext.Clear">
            <summary>
            Activates the clear event.
            </summary>
        </member>
        <member name="P:Blazorise.FilePickerButtonsContext.Cancel">
            <summary>
            Cancels ongoing upload.
            </summary>
        </member>
        <member name="T:Blazorise.FilePickerFileContext">
            <summary>
            Context for File Picker's Files
            </summary>
        </member>
        <member name="P:Blazorise.FilePickerFileContext.RemoveFileEntry">
            <summary>
            Gets the RemoveFile event.
            </summary>
        </member>
        <member name="M:Blazorise.FilePickerFileContext.#ctor(Blazorise.IFileEntry,Microsoft.AspNetCore.Components.EventCallback{Blazorise.IFileEntry})">
            <summary>
            Default context constructor.
            </summary>
            <param name="fileEntry">The File Entry.</param>
            <param name="removeFile">The RemoveFile event.</param>
        </member>
        <member name="P:Blazorise.FilePickerFileContext.File">
            <summary>
            Gets the File Entry.
            </summary>
        </member>
        <member name="M:Blazorise.FilePickerFileContext.RemoveFile">
            <summary>
            Triggers the RemoveFile event.
            </summary>
        </member>
        <member name="T:Blazorise._FilePickerConfirmModal">
            <summary>
            Internal confirmation dialog used by the <see cref="T:Blazorise.FilePicker"/> component.
            </summary>
        </member>
        <member name="F:Blazorise._FilePickerConfirmModal.modalRef">
            <summary>
            Reference to the modal component.
            </summary>
        </member>
        <member name="F:Blazorise._FilePickerConfirmModal.confirmed">
            <summary>
            Callback action for the confirm button.
            </summary>
        </member>
        <member name="T:Blazorise._FilePickerConfirmModal.ConfirmOperation">
            <summary>
            Identifies the FilePicker's popup confirm operation.
            </summary>
        </member>
        <member name="F:Blazorise._FilePickerConfirmModal.ConfirmOperation.RemoveFile">
            <summary>
            Remove file confirm operation.
            </summary>
        </member>
        <member name="F:Blazorise._FilePickerConfirmModal.ConfirmOperation.Clear">
            <summary>
            Clear confirm operation.
            </summary>
        </member>
        <member name="F:Blazorise._FilePickerConfirmModal.ConfirmOperation.CancelUpload">
            <summary>
            Cancels ongoing upload.
            </summary>
        </member>
        <member name="M:Blazorise._FilePickerConfirmModal.OpenModal(Blazorise._FilePickerConfirmModal.ConfirmOperation,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Opens the modal.
            </summary>
            <param name="confirmOperation">Type of the confirm operation.</param>
            <param name="confirmed">Function to execute after the action was confirmed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise._FilePickerConfirmModal.OnCloseModalClicked">
            <summary>
            Closes the modal.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise._FilePickerConfirmModal.ParentFilePicker">
            <summary>
            Parent file picker.
            </summary>
        </member>
        <member name="T:Blazorise.FocusTrap">
            <summary>
            The focus trap component allows to restrict TAB key navigation inside the component.
            </summary>
        </member>
        <member name="M:Blazorise.FocusTrap.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FocusTrap.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FocusTrap.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FocusTrap.SetFocus">
            <summary>
            Sets the focus trap.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FocusTrap.OnFocusStartHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handles the focus start event.
            </summary>
            <param name="args">Supplies information about a focus event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FocusTrap.OnFocusEndHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Handles the focus end event.
            </summary>
            <param name="args">Supplies information about a focus event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FocusTrap.OnKeyPressedHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the keyboard events.
            </summary>
            <param name="args">Supplies information about a keyboard event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.FocusTrap.ShouldRender">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FocusTrap.FocusableTabIndex">
            <summary>
            Gets the focusable element tab index.
            </summary>
        </member>
        <member name="P:Blazorise.FocusTrap.Active">
            <summary>
            If true the TAB focus will be activated.
            </summary>
        </member>
        <member name="P:Blazorise.FocusTrap.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.FocusTrap"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Form">
            <summary>
            Wrapper for a regular html form element.
            </summary>
        </member>
        <member name="P:Blazorise.Form.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Form"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Grid">
            <summary>
            A wrapper that represents a row in a css grid.
            </summary>
        </member>
        <member name="M:Blazorise.Grid.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Grid.Rows">
            <summary>
            Defines the number of rows to show in a grid.
            </summary>
        </member>
        <member name="P:Blazorise.Grid.Columns">
            <summary>
            Defines the number of columns to show in a grid.
            </summary>
        </member>
        <member name="T:Blazorise.Help">
            <summary>
            Help text for text inside of form.
            </summary>
        </member>
        <member name="M:Blazorise.Help.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Help.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Help"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Highlighter">
            <summary>
            Highlights the part of the text based on a search term.
            </summary>
        </member>
        <member name="M:Blazorise.Highlighter.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Highlighter.Text">
            <summary>
            The whole text in which a <see cref="P:Blazorise.Highlighter.HighlightedText"/> will be highlighted.
            </summary>
        </member>
        <member name="P:Blazorise.Highlighter.HighlightedText">
            <summary>
            The search term to be highlighted.
            </summary>
        </member>
        <member name="P:Blazorise.Highlighter.CaseSensitive">
            <summary>
            Whether or not the search term will be case sensitive.
            </summary>
        </member>
        <member name="P:Blazorise.Highlighter.NextBoundary">
            <summary>
            A regex expression used for searching the word boundaries.
            </summary>
        </member>
        <member name="P:Blazorise.Highlighter.UntilNextBoundary">
            <summary>
            If true, highlights the text until the next word boundary.
            </summary>
        </member>
        <member name="T:Blazorise.Icon">
            <summary>
            Container for any type of icon font.
            </summary>
        </member>
        <member name="M:Blazorise.Icon.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Icon.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the icon onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Icon.OnMouseOverHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the icon onmouseover event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Icon.OnMouseOutHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the icon onmouseout event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Icon.GetIconStyle">
            <summary>
            Get the icon style based on the current settings.
            </summary>
            <returns>Icon style.</returns>
        </member>
        <member name="M:Blazorise.Icon.GetIconSize">
            <summary>
            Get the icon size based on the current settings.
            </summary>
            <returns>Icon size.</returns>
        </member>
        <member name="P:Blazorise.Icon.Options">
            <summary>
            Holds the information about the Blazorise global options.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.IconProvider">
            <summary>
            An icon provider that is responsible to give the icon a class-name.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.Name">
            <summary>
            Icon name that can be either a string or <see cref="T:Blazorise.IconName"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.IconStyle">
            <summary>
            Suggested icon style.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.IconSize">
            <summary>
            Defines the icon size.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.Clicked">
            <summary>
            Occurs when the icon is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.MouseOver">
            <summary>
            Occurs when the mouse has entered the icon area.
            </summary>
        </member>
        <member name="P:Blazorise.Icon.MouseOut">
            <summary>
            Occurs when the mouse has left the icon area.
            </summary>
        </member>
        <member name="T:Blazorise.Image">
            <summary>
            Container for an image element.
            </summary>
        </member>
        <member name="M:Blazorise.Image.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Image.LoadingString">
            <summary>
            Gets the string representing the img loading attribute.
            </summary>
        </member>
        <member name="P:Blazorise.Image.Source">
            <summary>
            The absolute or relative URL of the image.
            </summary>
        </member>
        <member name="P:Blazorise.Image.Text">
            <summary>
            Alternate text for an image.
            </summary>
        </member>
        <member name="P:Blazorise.Image.Fluid">
            <summary>
            Forces an image to take up the whole width.
            </summary>
        </member>
        <member name="P:Blazorise.Image.Loading">
            <summary>
            Deffers loading the image until it reaches a calculated distance from the viewport.
            </summary>
        </member>
        <member name="T:Blazorise.Inline">
            <summary>
            Wrapper for horizontally stacked input components.
            </summary>
        </member>
        <member name="M:Blazorise.Inline.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Inline.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Inline"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.InputMask">
            <summary>
            Format input text content when you are typing.
            </summary>
        </member>
        <member name="F:Blazorise.InputMask.dotNetObjectRef">
            <summary>
            Object reference that can be accessed through the JSInterop.
            </summary>
        </member>
        <member name="M:Blazorise.InputMask.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.OnInternalValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.FormatValueAsString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.InputMask.ExtendAliases(System.Object)">
            <summary>
            Extends the alias options with the custom settings.
            </summary>
            <param name="aliasOptions">Options for the alias initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.InputMask.NotifyCompleted(System.String)">
            <summary>
            Notifies the component that the input mask is completed.
            </summary>
            <param name="value">Completed value.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.InputMask.NotifyIncompleted(System.String)">
            <summary>
            Notifies the component that the input mask is incomplete.
            </summary>
            <param name="value">Incompleted value.</param>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="M:Blazorise.InputMask.NotifyCleared">
            <summary>
            Notifies the component that the input mask is cleared.
            </summary>
            <returns>Returns awaitable task</returns>
        </member>
        <member name="P:Blazorise.InputMask.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.InputMask.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.InputMask.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSInputMaskModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Value">
            <summary>
            Gets or sets the input time value.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.ValueChanged">
            <summary>
            Occurs when the time has changed.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the time field.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Mask">
            <summary>
            The mask to use for the input.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Regex">
            <summary>
            Use a regular expression as a mask.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Alias">
            <summary>
            With an alias, you can define a complex mask definition and call it by using an alias name.
            So this is mainly to simplify the use of your masks. Some aliases found in the extensions are email,
            currency, decimal, integer, date, DateTime, dd/mm/yyyy, etc.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.InputFormat">
            <summary>
            Defines the input format when the <see cref="P:Blazorise.InputMask.Alias"/> is used.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.OutputFormat">
            <summary>
            Defines the output format of the <see cref="P:Blazorise.InputMask.Value"/> when the <see cref="P:Blazorise.InputMask.Alias"/> is used.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.ShowMaskOnFocus">
            <summary>
            Shows the mask when the input gets focus. (default = true)
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.ShowMaskOnHover">
            <summary>
            Shows the mask when hovering the mouse. (default = true)
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.NumericInput">
            <summary>
            Numeric input direction. Keeps the caret at the end.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.RightAlign">
            <summary>
            Align the input to the right.
            </summary>
            <remarks>
            By setting the rightAlign you can specify to right-align an inputmask. This is only applied
            in combination op the numericInput option or the dir-attribute. The default is true.
            </remarks>
        </member>
        <member name="P:Blazorise.InputMask.DecimalSeparator">
            <summary>
            Define the decimal separator (numeric mode only).
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.GroupSeparator">
            <summary>
            Define the group separator (numeric mode only).
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Nullable">
            <summary>
            Return nothing when the user hasn't entered anything. Default: false.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.AutoUnmask">
            <summary>
            Automatically unmask the value when retrieved. Default: false.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.PositionCaretOnClick">
            <summary>
            Defines the positioning of the caret on click.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.ClearMaskOnLostFocus">
            <summary>
            Remove the empty mask on blur or when not empty remove the optional trailing part. Default: true
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.ClearIncomplete">
            <summary>
            Clear the incomplete input on blur. Default: false
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Completed">
            <summary>
            Execute a function when the mask is completed.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Incompleted">
            <summary>
            Execute a function when the mask is incomplete. Executes on blur.
            </summary>
        </member>
        <member name="P:Blazorise.InputMask.Cleared">
            <summary>
            Execute a function when the mask is cleared.
            </summary>
        </member>
        <member name="T:Blazorise.Jumbotron">
            <summary>
            Lightweight, flexible component for showcasing hero unit style content.
            </summary>
        </member>
        <member name="M:Blazorise.Jumbotron.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Jumbotron.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Jumbotron"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.JumbotronSubtitle">
            <summary>
            Smaller <see cref="T:Blazorise.Jumbotron"/> text placed under the <see cref="T:Blazorise.JumbotronTitle"/>.
            </summary>
        </member>
        <member name="M:Blazorise.JumbotronSubtitle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.JumbotronSubtitle.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.JumbotronSubtitle"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.JumbotronTitle">
            <summary>
            Main <see cref="T:Blazorise.Jumbotron"/> heading text.
            </summary>
        </member>
        <member name="M:Blazorise.JumbotronTitle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.JumbotronTitle.GetHeadingElementName">
            <summary>
            Gets the name of the heading element based on current <see cref="P:Blazorise.JumbotronTitle.Size"/> parameter.
            </summary>
            <returns>The h element name.</returns>
        </member>
        <member name="P:Blazorise.JumbotronTitle.Size">
            <summary>
            Gets or sets the jumbotron text size.
            </summary>
        </member>
        <member name="P:Blazorise.JumbotronTitle.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.JumbotronTitle"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Label">
            <summary>
            A label for a form fields.
            </summary>
        </member>
        <member name="M:Blazorise.Label.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Label.For">
            <summary>
            Name of the input element to which the label is connected.
            </summary>
        </member>
        <member name="P:Blazorise.Label.Type">
            <summary>
            Label type that can better indicate the connected input element.
            </summary>
        </member>
        <member name="P:Blazorise.Label.Cursor">
            <summary>
            Defines the mouse cursor when mouse od placed over the label.
            </summary>
        </member>
        <member name="P:Blazorise.Label.ChildContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.JumbotronTitle"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Layout">
            <summary>
            Main component for handling the overall layout of a page.
            </summary>
        </member>
        <member name="M:Blazorise.Layout.#ctor">
            <summary>
            A default constructor for <see cref="T:Blazorise.Layout"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.Layout.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Layout.BuildLoadingClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a loading container.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Layout.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Layout.LoadingClassNames">
            <summary>
            Gets the class-names for a loading container.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.LoadingClassBuilder">
            <summary>
            Loading container class builder.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.Sider">
            <summary>
            Indicates that layout will contain sider container.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.Loading">
            <summary>
            If true, an overlay will be created so the user cannot click anything until set to false.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.LoadingClass">
            <summary>
            Sets the custom classname for loading element.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.LoadingChanged">
            <summary>
            Occurs when loading state had changed.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.LoadingTemplate">
            <summary>
            Specifies the content to be rendered the loading container.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Layout"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Layout.ParentLayout">
            <summary>
            Cascaded <see cref="T:Blazorise.Layout"/> component in which this <see cref="T:Blazorise.Layout"/> is placed.
            </summary>
        </member>
        <member name="T:Blazorise.LayoutContent">
            <summary>
            The content layout with the default style, in which any element can be nested, and must be placed in <see cref="T:Blazorise.Layout"/>.
            </summary>
        </member>
        <member name="M:Blazorise.LayoutContent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.LayoutContent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.LayoutContent"/>.
            </summary>
        </member>
        <member name="T:Blazorise.LayoutFooter">
            <summary>
            The bottom layout with the default style, in which any element can be nested, and must be placed in <see cref="T:Blazorise.Layout"/>.
            </summary>
        </member>
        <member name="M:Blazorise.LayoutFooter.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.LayoutFooter.Fixed">
            <summary>
            If true footer will be fixed to the bottom of the page.
            </summary>
        </member>
        <member name="P:Blazorise.LayoutFooter.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.LayoutFooter"/>.
            </summary>
        </member>
        <member name="T:Blazorise.LayoutHeader">
            <summary>
            The top layout with the default style, in which any element can be nested, and must be placed in <see cref="T:Blazorise.Layout"/>.
            </summary>
        </member>
        <member name="M:Blazorise.LayoutHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.LayoutHeader.Fixed">
            <summary>
            If true header will be fixed to the top of the page.
            </summary>
        </member>
        <member name="P:Blazorise.LayoutHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.LayoutHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.LayoutSider">
            <summary>
            The sidebar with default style and basic functions, in which any element can be nested, and must be placed in <see cref="T:Blazorise.Layout"/>.
            </summary>
        </member>
        <member name="M:Blazorise.LayoutSider.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.LayoutSider.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.LayoutSider"/>.
            </summary>
        </member>
        <member name="T:Blazorise.LayoutSiderContent">
            <summary>
            The wrapper for a sidebar content, and must be placed in <see cref="T:Blazorise.Layout"/>.
            </summary>
        </member>
        <member name="M:Blazorise.LayoutSiderContent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.LayoutSiderContent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.LayoutSiderContent"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Anchor">
            <summary>
            A component that renders an anchor tag, automatically toggling its 'active'
            class based on whether its 'href' matches the current URI.
            </summary>
        </member>
        <member name="T:Blazorise.Link">
            <summary>
            A component that renders an anchor tag, automatically toggling its 'active'
            class based on whether its 'href' matches the current URI.
            </summary>
        </member>
        <member name="M:Blazorise.Link.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ListGroup">
            <summary>
            List groups are a flexible and powerful component for displaying a series of content.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroup.state">
            <summary>
            Holds the state of this list group.
            </summary>
        </member>
        <member name="M:Blazorise.ListGroup.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ListGroup.SelectItem(System.String)">
            <summary>
            Sets the active item by the name.
            </summary>
            <param name="name"></param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.ListGroup.State">
            <summary>
            Gets the list group state object.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.Flush">
            <summary>
            Remove some borders and rounded corners to render list group items edge-to-edge in a parent container (e.g., cards).
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.Scrollable">
            <summary>
            Makes the list group scrollable by adding a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.Mode">
            <summary>
            Defines the list-group behavior mode.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.SelectionMode">
            <summary>
            Defines the list-group selection mode.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.SelectedItem">
            <summary>
            Gets or sets currently selected item name.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.SelectedItems">
            <summary>
            Gets or sets currently selected items names.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.SelectedItemChanged">
            <summary>
            An event raised when <see cref="P:Blazorise.ListGroup.SelectedItem"/> is changed.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.SelectedItemsChanged">
            <summary>
            An event raised when <see cref="P:Blazorise.ListGroup.SelectedItems"/> are changed.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroup.ChildContent">
            <summary>
            Gets or sets the component child content.
            </summary>
        </member>
        <member name="T:Blazorise.ListGroupItem">
            <summary>
            A container component that is placed inside of an <see cref="T:Blazorise.ListGroup"/>.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupItem.parentListGroupState">
            <summary>
            Holds the reference to the parent group state object.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupItem.disabled">
            <summary>
            Flag to indicate item disabled state.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupItem.color">
            <summary>
            The list-group-item color.
            </summary>
        </member>
        <member name="M:Blazorise.ListGroupItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ListGroupItem.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.ListGroupItem.DisabledString">
            <summary>
            Gets the string representing the disabled state.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.Active">
            <summary>
            Gets the flag indicating the item is selected.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.Name">
            <summary>
            Defines the item name.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.Disabled">
            <summary>
            Makes the item to make it appear disabled.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.ParentListGroupState">
            <summary>
            Cascaded <see cref="T:Blazorise.ListGroup"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.ParentListGroup">
            <summary>
            Cascaded parent <see cref="T:Blazorise.ListGroup"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ListGroupItem"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ListGroupItem.Color">
            <summary>
            Gets or sets the list-group-item color.
            </summary>
        </member>
        <member name="T:Blazorise.Media">
            <summary>
            The media object is a UI element perfect for repeatable and nestable content.
            </summary>
        </member>
        <member name="M:Blazorise.Media.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Media.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Media"/>.
            </summary>
        </member>
        <member name="T:Blazorise.MediaBody">
            <summary>
            The main content area of the <see cref="T:Blazorise.Media"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.MediaBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.MediaBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.MediaBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.MediaLeft">
            <summary>
            The left side of the media content.
            </summary>
        </member>
        <member name="M:Blazorise.MediaLeft.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.MediaLeft.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.MediaLeft"/>.
            </summary>
        </member>
        <member name="T:Blazorise.MediaRight">
            <summary>
            The right side of the media content.
            </summary>
        </member>
        <member name="M:Blazorise.MediaRight.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.MediaRight.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.MediaRight"/>.
            </summary>
        </member>
        <member name="T:Blazorise.MemoEdit">
            <summary>
            Component that allows you to display and edit multi-line text.
            </summary>
        </member>
        <member name="M:Blazorise.MemoEdit.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnInternalValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MemoEdit.OnInputValueDebounce(System.Object,System.String)">
            <summary>
            Event raised after the delayed value time has expired.
            </summary>
            <param name="sender">Object that raised an event.</param>
            <param name="value">Latest received value.</param>
        </member>
        <member name="M:Blazorise.MemoEdit.Select(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.MemoEdit.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.MemoEdit.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.MemoEdit.IsImmediate">
            <summary>
            Returns true if internal value should be updated with each key press.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.IsDebounce">
            <summary>
            Returns true if updating of internal value should be delayed.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.DebounceIntervalValue">
            <summary>
            Time in milliseconds by which internal value update should be delayed.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.BindValueEventName">
            <summary>
            The name of the event for the textarea element.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSMemoEditModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.Placeholder">
            <summary>
            Sets the placeholder for the empty text.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.Plaintext">
            <summary>
            Sets the class to remove the default form field styling and preserve the correct margin and padding.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.Text">
            <summary>
            Gets or sets the text inside the input field.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.TextChanged">
            <summary>
            Occurs after text has changed.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.TextExpression">
            <summary>
            Gets or sets an expression that identifies the text value.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.MaxLength">
            <summary>
            Specifies the maximum number of characters allowed in the input element.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.Rows">
            <summary>
            Specifies the number lines in the input element.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.Pattern">
            <summary>
            The pattern attribute specifies a regular expression that the input element's value is checked against on form validation.
            </summary>
            <remarks>
            Please be aware that <see cref="P:Blazorise.MemoEdit.Pattern"/> on <see cref="T:Blazorise.MemoEdit"/> is used only for the validation process.
            </remarks>
        </member>
        <member name="P:Blazorise.MemoEdit.Immediate">
            <summary>
            If true the text in will be changed after each key press.
            </summary>
            <remarks>
            Note that setting this will override global settings in <see cref="P:Blazorise.BlazoriseOptions.Immediate"/>.
            </remarks>
        </member>
        <member name="P:Blazorise.MemoEdit.Debounce">
            <summary>
            If true the entered text will be slightly delayed before submitting it to the internal value.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.DebounceInterval">
            <summary>
            Interval in milliseconds that entered text will be delayed from submitting to the internal value.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.ReplaceTab">
            <summary>
            If set to true, <see cref="P:Blazorise.MemoEdit.ReplaceTab"/> will insert a tab instead of cycle input focus.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.TabSize">
            <summary>
            Defines the number of characters that tab key will override.
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.SoftTabs">
            <summary>
            If set to true, spaces will be used instead of a tab character
            </summary>
        </member>
        <member name="P:Blazorise.MemoEdit.AutoSize">
            <summary>
            If true, the textarea will automatically grow in height according to its content.
            </summary>
        </member>
        <member name="T:Blazorise.MessageAlert">
            <summary>
            Component that handles the <see cref="T:Blazorise.IMessageService"/> to show the message dialog.
            </summary>
        </member>
        <member name="M:Blazorise.MessageAlert.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageAlert.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageAlert.OnOkClicked">
            <summary>
            Handles the OK button click event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.MessageAlert.OnConfirmClicked">
            <summary>
            Handles the Confirm button click event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.MessageAlert.OnCancelClicked">
            <summary>
            Handles the Cancel button click event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.MessageAlert.OnModalClosing(Blazorise.ModalClosingEventArgs)">
            <summary>
            Handles the <see cref="T:Blazorise.Modal"/> closing event.
            </summary>
            <param name="eventArgs">Provides the data for the modal closing event.</param>
        </member>
        <member name="P:Blazorise.MessageAlert.ModalRef">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modal"/> reference.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.IsConfirmation">
            <summary>
            If true, modal will act as a prompt dialog.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.CenterMessage">
            <summary>
            If true, message will be centered.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ScrollableMessage">
            <summary>
            If true, message will be scrollable.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ShowMessageIcon">
            <summary>
            If true, an icon will be shown along with the message.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ShowCloseButton">
            <summary>
            If true, the close button will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.MessageIcon">
            <summary>
            Gets the message icon based on the predefined message type.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.MessageIconColor">
            <summary>
            Gets the icon color based on the predefined message type.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.OkButtonText">
            <summary>
            Gets the OK button text.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.OkButtonColor">
            <summary>
            Gets the OK button color.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.OkButtonClass">
            <summary>
            Gets the OK button CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.TitleClass">
            <summary>
            Gets the css class for the title.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.MessageClass">
            <summary>
            Gets the css class for the message text.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ConfirmButtonText">
            <summary>
            Gets the Confirm button text.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ConfirmButtonColor">
            <summary>
            Gets the confirm button color.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ConfirmButtonClass">
            <summary>
            Gets the confirm button CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.CancelButtonText">
            <summary>
            Gets the Cancel button text.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.CancelButtonColor">
            <summary>
            Gets the cancel button color.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.CancelButtonClass">
            <summary>
            Gets the cancel button CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.OkButtonPadding">
            <summary>
            Gets the OK button padding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.CancelButtonPadding">
            <summary>
            Gets the cancel button padding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.ConfirmButtonPadding">
            <summary>
            Gets the confirm button padding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Size">
            <summary>
            Gets the modal size.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.MessageService">
            <summary>
            Gets or sets the <see cref="T:Blazorise.IMessageService"/> to which this dialog is responding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.MessageType">
            <summary>
            Gets or sets the message type.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Title">
            <summary>
            Gets or sets the message title.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Message">
            <summary>
            Gets or sets the message content.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Options">
            <summary>
            Gets or sets the custom message options.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Callback">
            <summary>
            Occurs after the user respond with an action button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Okayed">
            <summary>
            Occurs after the user has responded with an OK action.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Confirmed">
            <summary>
            Occurs after the user has responded with a Confirm action.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.Canceled">
            <summary>
            Occurs after the user has responded with a Cancel action.
            </summary>
        </member>
        <member name="P:Blazorise.MessageAlert.BackgroundCancel">
            <summary>
            By default, a modal is cancelled if the user clicks anywhere outside the modal.
            This behavior can be disabled by setting <see cref="P:Blazorise.MessageAlert.BackgroundCancel"/> to false.
            </summary>
        </member>
        <member name="T:Blazorise.MessageProvider">
            <summary>
            Component that handles the <see cref="T:Blazorise.IMessageService"/> to show the message dialog.
            </summary>
        </member>
        <member name="T:Blazorise.ModalInstance">
            <summary>
            Generates a new instance of a Modal
            </summary>
        </member>
        <member name="M:Blazorise.ModalInstance.#ctor(Blazorise.ModalProvider,System.String,System.String,Microsoft.AspNetCore.Components.RenderFragment,Blazorise.ModalInstanceOptions)">
            <summary>
            A default <see cref="T:Blazorise.ModalInstance"/> constructor.
            </summary>
            <param name="modalProvider">Parent modal provider.</param>
            <param name="id">An id of the modal instance.</param>
            <param name="title">Title of the modal.</param>
            <param name="childContent">Modal content.</param>
            <param name="modalInstanceOptions">Modal options.</param>
        </member>
        <member name="P:Blazorise.ModalInstance.ModalRef">
            <summary>
            Tracks the Modal reference.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.ModalId">
            <summary>
            Tracks the Modal id.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Visible">
            <summary>
            Control's the Modal visibility.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.ModalProvider">
            <summary>
            The Modal Provider
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.ChildContent">
            <summary>
            Child content to be rendered.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Title">
            <summary>
            Modal's Header Title.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.ModalInstanceOptions">
            <summary>
            Sets the options for Modal Provider.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.UseModalStructure">
            <summary>
            Uses the modal standard structure, by setting this to true you are only in charge of providing the custom content.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Stateful">
            <summary>
            Determines if the ModalInstance should be kept in memory after it has been closed.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Shadow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Background">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.VerticalAlignment">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.TextOverflow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.TextWeight">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.TextTransform">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.TextAlignment">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.TextColor">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Casing">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Overflow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Position">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Flex">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Border">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Display">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Padding">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Margin">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Height">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Width">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Visibility">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Clearfix">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Float">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Style">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Class">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.ScrollToTop">
            <summary>
            If true modal will scroll to top when opened.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Opening">
            <summary>
            Occurs before the modal is opened.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Closing">
            <summary>
            Occurs before the modal is closed.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Opened">
            <summary>
            Occurs after the modal has opened.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Closed">
            <summary>
            Occurs after the modal has closed.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.ShowBackdrop">
            <summary>
            Specifies the backdrop needs to be rendered for this <see cref="T:Blazorise.Modal"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Animated">
            <summary>
            Gets or sets whether the component has any animations.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.AnimationDuration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.RenderMode">
            <summary>
            Defines how the modal content will be rendered.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.FocusTrap">
            <summary>
            Defines if the modal should keep the input focus at all times.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstance.Centered">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Scrollable">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstance.Size">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ModalProvider">
            <summary>
            A modal provider to be set at the root of your app, providing a programmatic way to invoke modals with custom content by using <see cref="P:Blazorise.ModalProvider.ModalService"/>.
            </summary>
        </member>
        <member name="M:Blazorise.ModalProvider.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalProvider.Hide">
            <summary>
            Closes currently opened modal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ModalProvider.Hide(Blazorise.ModalInstance)">
            <summary>
            Closes the modal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ModalProvider.GetInstances">
            <summary>
            Returns all the modal instances.
            </summary>
        </member>
        <member name="M:Blazorise.ModalProvider.Reset">
            <summary>
            Resets the state of the ModalProvider.
            Any existing instances will be cleared.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ModalProvider.Remove(Blazorise.ModalInstance)">
            <summary>
            Explicitly removes the modal instance from the ModalProvider.
            </summary>
            <param name="modalInstance">The modal instance</param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ModalProvider.OnModalClosed(Blazorise.ModalInstance)">
            <summary>
            Handles the closing of the modal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blazorise.ModalProvider.ModalService">
            <summary>
            The ModalService
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.UseModalStructure">
            <summary>
            Uses the modal standard structure, by setting this to true you are only in charge of providing the custom content.
            Defaults to true.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Stateful">
            <summary>
            Keeps the ModalInstance in memory after it has been closed.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.ScrollToTop">
            <summary>
            If true modal will scroll to top when opened.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Opening">
            <summary>
            Occurs before the modal is opened.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Closing">
            <summary>
            Occurs before the modal is closed.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Opened">
            <summary>
            Occurs after the modal has opened.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Closed">
            <summary>
            Occurs after the modal has closed.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.ShowBackdrop">
            <summary>
            Specifies the backdrop needs to be rendered for this <see cref="T:Blazorise.Modal"/>.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Animated">
            <summary>
            Gets or sets whether the component has any animations.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.AnimationDuration">
            <summary>
            Gets or sets the animation duration.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.RenderMode">
            <summary>
            Defines how the modal content will be rendered.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.FocusTrap">
            <summary>
            Defines if the modal should keep the input focus at all times.
            Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ModalProvider.Centered">
            <summary>
            Centers the modal vertically.
            </summary>
            <remarks>
            Only considered if <see cref="P:Blazorise.ModalInstanceOptions.UseModalStructure"/> is set.
            </remarks>
        </member>
        <member name="P:Blazorise.ModalProvider.Scrollable">
            <summary>
            Scrolls the modal content independent of the page itself.
            </summary>
            <remarks>
            Only considered if <see cref="P:Blazorise.ModalInstanceOptions.UseModalStructure"/> is set.
            </remarks>
        </member>
        <member name="P:Blazorise.ModalProvider.Size">
            <summary>
            Changes the size of the modal.
            </summary>
            <remarks>
            Only considered if <see cref="P:Blazorise.ModalInstanceOptions.UseModalStructure"/> is set.
            </remarks>
        </member>
        <member name="T:Blazorise.IModalSharedContext">
            <summary>
            Holds the shared context for all the modals in current application state.
            </summary>
        </member>
        <member name="M:Blazorise.IModalSharedContext.RaiseModalOpenIndex">
            <summary>
            Raises the modals <see cref="P:Blazorise.IModalSharedContext.OpenIndex"/> and returns the new index.
            </summary>
            <returns>Returns the new open index.</returns>
        </member>
        <member name="M:Blazorise.IModalSharedContext.DecreaseModalOpenIndex">
            <summary>
            Decrease the modals <see cref="P:Blazorise.IModalSharedContext.OpenIndex"/> and returns the new index.
            </summary>
            <returns>Returns the new open index.</returns>
        </member>
        <member name="P:Blazorise.IModalSharedContext.OpenIndex">
            <summary>
            Gets or sets the modal open index.
            </summary>
        </member>
        <member name="T:Blazorise.Modal">
            <summary>
            A classic modal overlay, in which you can include any content you want.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.lazyLoaded">
            <summary>
            Tracks whether the component fulfills the requirements to be lazy loaded and then kept rendered to the DOM.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.state">
            <summary>
            Holds the state of this modal dialog.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.closeReason">
            <summary>
            Holds the last received reason for modal closure.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.jsRegistered">
            <summary>
            Tells us that modal is tracked by the JS interop.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.dotNetObjectRef">
            <summary>
            A JS interop object reference used to access this modal.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.closeActivatorElementIds">
            <summary>
            A list of all elements id that could potentially trigger the modal close event.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.closeableAdapter">
            <summary>
            Manages the modal visibility states.
            </summary>
        </member>
        <member name="E:Blazorise.Modal._Opened">
            <summary>
            Internal event that is raised after the modal has opened.
            </summary>
        </member>
        <member name="E:Blazorise.Modal._Closed">
            <summary>
            Internal event that is raised after the modal has closed.
            </summary>
        </member>
        <member name="M:Blazorise.Modal.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.Show">
            <summary>
            Starts the modal opening process.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modal.Hide">
            <summary>
            Fires the modal dialog closure process.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modal.Hide(Blazorise.CloseReason)">
            <summary>
            Internal method to hide the modal with reason of closing.
            </summary>
            <param name="closeReason">Reason why modal was closed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modal.IsSafeToOpen">
            <summary>
            Determines if modal can be opened.
            </summary>
            <returns>True if modal can be opened.</returns>
        </member>
        <member name="M:Blazorise.Modal.IsSafeToClose">
            <summary>
            Determines if modal can be closed.
            </summary>
            <returns>True if modal can be closed.</returns>
        </member>
        <member name="M:Blazorise.Modal.HandleVisibilityStyles(System.Boolean)">
            <summary>
            Handles the styles based on the visibility flag.
            </summary>
            <param name="visible">Modal visibility flag.</param>
        </member>
        <member name="M:Blazorise.Modal.RaiseEvents(System.Boolean)">
            <summary>
            Fires all the events for this modal
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:Blazorise.Modal.NotifyCloseActivatorIdInitialized(System.String)">
            <summary>
            Registers a new element that can close the modal.
            </summary>
            <param name="elementId">Element id.</param>
        </member>
        <member name="M:Blazorise.Modal.NotifyCloseActivatorIdRemoved(System.String)">
            <summary>
            Removes the element that can close the modal.
            </summary>
            <param name="elementId">Element id.</param>
        </member>
        <member name="M:Blazorise.Modal.IsSafeToClose(System.String,Blazorise.CloseReason,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.Close(Blazorise.CloseReason)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.SetVisibleState(System.Boolean)">
            <summary>
            Handles the internal visibility states.
            </summary>
            <param name="visible">Visible state.</param>
        </member>
        <member name="M:Blazorise.Modal.BeginAnimation(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modal.EndAnimation(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modal.IsVisible">
            <summary>
            Returns true if the modal should be visible.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.OpenIndex">
            <summary>
            Returns the opened index of modal.
            </summary>
        </member>
        <member name="F:Blazorise.Modal.BackdropVisible">
            <summary>
            Returns true if the modal backdrop should be visible.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modal.State">
            <summary>
            Gets the reference to state object for this modal.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.ShouldRenderContent">
            <summary>
            Evaluates the rendering mode to see of the modal content is ready to be rendered.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.CloseActivatorElementIds">
            <summary>
            Gets the list of all element ids that could trigger modal close event.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.JSModalModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSModalModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.JSClosableModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSClosableModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.ModalContext">
            <summary>
            Gets or sets the modal shared context.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.Visible">
            <summary>
            Defines the visibility of modal dialog.
            </summary>
            <remarks>The <see cref="P:Blazorise.Modal.Visible"/> parameter should only be used in .razor code.</remarks>
        </member>
        <member name="P:Blazorise.Modal.VisibleChanged">
            <summary>
            Occurs when the modal visibility state changes.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.ScrollToTop">
            <summary>
            If true modal will scroll to top when opened.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.Opening">
            <summary>
            Occurs before the modal is opened.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.Closing">
            <summary>
            Occurs before the modal is closed.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.Opened">
            <summary>
            Occurs after the modal has opened.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.Closed">
            <summary>
            Occurs after the modal has closed.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.ShowBackdrop">
            <summary>
            Specifies the backdrop needs to be rendered for this <see cref="T:Blazorise.Modal"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.Animated">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modal.AnimationDuration">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modal.RenderMode">
            <summary>
            Defines how the modal content will be rendered.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.FocusTrap">
            <summary>
            Defines if the modal should keep the input focus at all times.
            </summary>
        </member>
        <member name="P:Blazorise.Modal.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Modal"/>.
            </summary>
        </member>
        <member name="T:Blazorise.ModalBody">
            <summary>
            Center area of the modal component.
            </summary>
        </member>
        <member name="M:Blazorise.ModalBody.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalBody.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalBody.MaxHeight">
            <summary>
            Sets the maximum height of the modal body (in viewport size unit).
            </summary>
        </member>
        <member name="P:Blazorise.ModalBody.ParentModalContent">
            <summary>
            Gets or sets the cascaded parent modal-content component.
            </summary>
        </member>
        <member name="P:Blazorise.ModalBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ModalBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.ModalContent">
            <summary>
            Main wrapper for the content area of the modal component.
            </summary>
        </member>
        <member name="M:Blazorise.ModalContent.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalContent.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalContent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalContent.HasModalHeader">
            <summary>
            True if modal contains the <see cref="T:Blazorise.ModalHeader"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.HasModalBody">
            <summary>
            True if modal contains the <see cref="T:Blazorise.ModalBody"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.HasModalFooter">
            <summary>
            True if modal contains the <see cref="T:Blazorise.ModalFooter"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.AsDialog">
            <summary>
            Makes the modal as classic dialog with header, body and footer.
            
            Currently used only by bulma https://bulma.io/documentation/components/modal/
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.IsFocusTrap">
            <summary>
            True if modal should keep the input focus.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.FocusTrapRef">
            <summary>
            Gets or sets the <see cref="T:Blazorise.FocusTrap"/> reference.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.Options">
            <summary>
            Holds the information about the Blazorise global options.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.Centered">
            <summary>
            Centers the modal vertically.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.Scrollable">
            <summary>
            Scrolls the modal content independent of the page itself.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.Size">
            <summary>
            Changes the size of the modal.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ModalContent"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ModalContent.ParentModal">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Modal"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ModalFooter">
            <summary>
            Bottom area of the modal component.
            </summary>
        </member>
        <member name="M:Blazorise.ModalFooter.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalFooter.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalFooter.ParentModalContent">
            <summary>
            Gets or sets the cascaded parent modal-content component.
            </summary>
        </member>
        <member name="P:Blazorise.ModalFooter.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ModalFooter"/>.
            </summary>
        </member>
        <member name="T:Blazorise.ModalHeader">
            <summary>
            Top area of the modal component.
            </summary>
        </member>
        <member name="M:Blazorise.ModalHeader.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalHeader.ParentModalContent">
            <summary>
            Gets or sets the cascaded parent modal-content component.
            </summary>
        </member>
        <member name="P:Blazorise.ModalHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ModalHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.ModalSharedContext">
            <summary>
            Holds the shared context for all the modals in current application state.
            </summary>
        </member>
        <member name="M:Blazorise.ModalSharedContext.RaiseModalOpenIndex">
            <summary>
            Raises the modals <see cref="P:Blazorise.ModalSharedContext.OpenIndex"/> and returns the new index.
            </summary>
            <returns>Returns the new open index.</returns>
        </member>
        <member name="M:Blazorise.ModalSharedContext.DecreaseModalOpenIndex">
            <summary>
            Decrease the modals <see cref="P:Blazorise.ModalSharedContext.OpenIndex"/> and returns the new index.
            </summary>
            <returns>Returns the new open index.</returns>
        </member>
        <member name="P:Blazorise.ModalSharedContext.OpenIndex">
            <summary>
            Gets or sets the modal open index.
            </summary>
        </member>
        <member name="T:Blazorise.ModalTitle">
            <summary>
            Larger text that can be placed in the <see cref="T:Blazorise.ModalHeader"/>.
            </summary>
        </member>
        <member name="M:Blazorise.ModalTitle.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalTitle.TagName">
            <summary>
            Gets the title tag name.
            </summary>
        </member>
        <member name="P:Blazorise.ModalTitle.SizeNumber">
            <summary>
            Gets the heading size number.
            </summary>
        </member>
        <member name="P:Blazorise.ModalTitle.Size">
            <summary>
            Gets or sets the title size.
            </summary>
        </member>
        <member name="P:Blazorise.ModalTitle.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ModalTitle"/>.
            </summary>
        </member>
        <member name="T:Blazorise._ModalBackdrop">
            <summary>
            Internal component to render modal backdrop or background.
            </summary>
        </member>
        <member name="M:Blazorise._ModalBackdrop.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise._ModalBackdrop.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise._ModalBackdrop.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise._ModalBackdrop.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise._ModalBackdrop.Animated">
            <summary>
            Gets or sets whether the component has any animations.
            </summary>
        </member>
        <member name="P:Blazorise._ModalBackdrop.AnimationDuration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:Blazorise._ModalBackdrop.ParentModal">
            <summary>
            Gets or sets the cascaded parent modal component.
            </summary>
        </member>
        <member name="P:Blazorise._ModalBackdrop.ParentModalState">
            <summary>
            Cascaded <see cref="T:Blazorise.Modal"/> component state object.
            </summary>
        </member>
        <member name="T:Blazorise.NumericEdit`1">
            <summary>
            An editor that displays a numeric value and allows a user to edit the value.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="P:Blazorise.NumericEdit`1.Value"/> property.</typeparam>
        </member>
        <member name="F:Blazorise.NumericEdit`1.isIntegerType">
            <summary>
            True if the TValue is an integer type.
            </summary>
        </member>
        <member name="F:Blazorise.NumericEdit`1.inputMode">
            <summary>
            Contains the correct inputmode for the input element, based in the TValue.
            </summary>
        </member>
        <member name="F:Blazorise.NumericEdit`1.minDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.NumericEdit`1.Min"/> parameter is defined.
            </summary>
        </member>
        <member name="F:Blazorise.NumericEdit`1.maxDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.NumericEdit`1.Max"/> parameter is defined.
            </summary>
        </member>
        <member name="M:Blazorise.NumericEdit`1.#ctor">
            <summary>
            Default NumericEdit constructor.
            </summary>
        </member>
        <member name="M:Blazorise.NumericEdit`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericEdit`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericEdit`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericEdit`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericEdit`1.FormatValueAsString(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericEdit`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericEdit`1.ProcessNumber(`0)">
            <summary>
            Process the newly changed number and adjust it if needed.
            </summary>
            <param name="number">New number value.</param>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="P:Blazorise.NumericEdit`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.NumericEdit`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.NumericEdit`1.StepString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.NumericEdit`1.Step"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.MinString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.NumericEdit`1.Min"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.MaxString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.NumericEdit`1.Max"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.CurrentCultureInfo">
            <summary>
            Gets the culture info defined on the input field.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.InputMode">
            <summary>
            Gets the correct inputmode for the input element, based in the TValue.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.Value">
            <summary>
            Gets or sets the value inside the input field.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.ValueChanged">
            <summary>
            Occurs after the value has changed.
            </summary>
            <remarks>
            This will be converted to EventCallback once the Blazor team fix the error for generic components. see https://github.com/aspnet/AspNetCore/issues/8385
            </remarks>
        </member>
        <member name="P:Blazorise.NumericEdit`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the value.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.Step">
            <summary>
            Specifies the interval between valid values.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.Culture">
            <summary>
            Helps define the language of an element.
            </summary>
            <remarks>
            https://www.w3schools.com/tags/ref_language_codes.asp
            </remarks>
        </member>
        <member name="P:Blazorise.NumericEdit`1.Min">
            <summary>
            The minimum value to accept for this input.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.Max">
            <summary>
            The maximum value to accept for this input.
            </summary>
        </member>
        <member name="P:Blazorise.NumericEdit`1.VisibleCharacters">
            <summary>
            The size attribute specifies the visible width, in characters, of an input element. https://www.w3schools.com/tags/att_input_size.asp
            </summary>
        </member>
        <member name="T:Blazorise.INumericPicker">
            <summary>
            Base interface for <see cref="T:Blazorise.NumericPicker`1"/> to be updated from javascript.
            </summary>
            <remarks>
            This is needed to set the value from javascript because calling generic component directly is not supported by Blazor.
            </remarks>
        </member>
        <member name="M:Blazorise.INumericPicker.SetValue(System.String)">
            <summary>
            Updates the <see cref="T:Blazorise.NumericPicker`1"/> with the new value.
            </summary>
            <param name="value">New value.</param>
            <returns>Returns awaitable task.</returns>
        </member>
        <member name="T:Blazorise.NumericPicker`1">
            <summary>
            An editor that displays a numeric value and allows a user to edit the value.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="P:Blazorise.NumericPicker`1.Value"/> property.</typeparam>
        </member>
        <member name="F:Blazorise.NumericPicker`1.dotNetObjectRef">
            <summary>
            Object reference that can be accessed through the JSInterop.
            </summary>
        </member>
        <member name="F:Blazorise.NumericPicker`1.MinDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.NumericPicker`1.Min"/> parameter is defined.
            </summary>
        </member>
        <member name="F:Blazorise.NumericPicker`1.MaxDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.NumericPicker`1.Max"/> parameter is defined.
            </summary>
        </member>
        <member name="F:Blazorise.NumericPicker`1.valueToChangeOnBlur">
            <summary>
            Saves the last received value from the JS. 
            </summary>
        </member>
        <member name="F:Blazorise.NumericPicker`1.hasValueToChangeOnBlur">
            <summary>
            True if we have received the value from JS.
            </summary>
        </member>
        <member name="F:Blazorise.NumericPicker`1.isIntegerType">
            <summary>
            True if the TValue is an integer type.
            </summary>
        </member>
        <member name="F:Blazorise.NumericPicker`1.inputMode">
            <summary>
            Contains the correct inputmode for the input element, based in the TValue.
            </summary>
        </member>
        <member name="M:Blazorise.NumericPicker`1.#ctor">
            <summary>
            Default NumericPicker constructor.
            </summary>
        </member>
        <member name="M:Blazorise.NumericPicker`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.ExecuteAfterRenderAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes given action after the rendering is done.
            </summary>
            <remarks>Don't await this on the UI thread, because that will cause a deadlock.</remarks>
        </member>
        <member name="M:Blazorise.NumericPicker`1.SetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.FormatValueAsString(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnSpinUpClicked">
            <summary>
            Handles the spin-up button click event.
            </summary>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="M:Blazorise.NumericPicker`1.OnSpinDownClicked">
            <summary>
            Handles the spin-down button click event.
            </summary>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="M:Blazorise.NumericPicker`1.AddStep(`0,System.Int32)">
            <summary>
            Applies the step to the supplied value and returns the result.
            </summary>
            <param name="value">Value to which we apply the step.</param>
            <param name="sign">Defines the positive or negative step direction.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:Blazorise.NumericPicker`1.ProcessNumber(`0)">
            <summary>
            Process the newly changed number and adjust it if needed.
            </summary>
            <param name="number">New number value.</param>
            <returns>Returns the awaitable task.</returns>
        </member>
        <member name="M:Blazorise.NumericPicker`1.GetDecimals">
            <summary>
            Returns the numbers of allowed decimals.
            </summary>
            <returns>Number of decimals.</returns>
        </member>
        <member name="P:Blazorise.NumericPicker`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.NumericPicker`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.NumericPicker`1.IsShowStepButtons">
            <summary>
            True if spin buttons can be shown.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.IsEnableStep">
            <summary>
            True if value can be changed with stepper.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.StepString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.NumericPicker`1.Step"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.CurrentCultureInfo">
            <summary>
            Gets the culture info defined on the input field.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.InputMode">
            <summary>
            Gets the correct inputmode for the input element, based in the TValue.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSNumericPickerModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.Value">
            <summary>
            Gets or sets the value inside the input field.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.ValueChanged">
            <summary>
            Occurs after the value has changed.
            </summary>
            <remarks>
            This will be converted to EventCallback once the Blazor team fix the error for generic components. see https://github.com/aspnet/AspNetCore/issues/8385
            </remarks>
        </member>
        <member name="P:Blazorise.NumericPicker`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the value.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.Step">
            <summary>
            Specifies the interval between valid values.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.Decimals">
            <summary>
            Maximum number of decimal places after the decimal separator.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.DecimalSeparator">
            <summary>
            String to use as the decimal separator in numeric values.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.AlternativeDecimalSeparator">
            <summary>
            String to use as the alternative decimal separator in numeric values.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.GroupSeparator">
            <summary>
            Defines the thousand grouping separator character.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.GroupSpacing">
            <summary>
            Defines how many numbers should be grouped together (usually for the thousand separator).
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.CurrencySymbol">
            <summary>
            Defines the currency symbol to display.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.CurrencySymbolPlacement">
            <summary>
            Placement of the currency sign, relative to the number shown (as a prefix or a suffix).
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.RoundingMethod">
            <summary>
            Method used for rounding decimal values.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.AllowDecimalPadding">
            <summary>
            Allow padding the decimal places with zeros. If set to <c>Floats</c>, padding is only done when there are some decimals.        /// 
            </summary>
            <remarks>
            Setting AllowDecimalPadding to 'false' will override the <see cref="P:Blazorise.NumericPicker`1.Decimals"/> setting.
            </remarks>
        </member>
        <member name="P:Blazorise.NumericPicker`1.AlwaysAllowDecimalSeparator">
            <summary>
            Defines if the decimal character or decimal character alternative should be accepted when there is already a decimal character shown in the element.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.Culture">
            <summary>
            Helps define the language of an element.
            </summary>
            <remarks>
            https://www.w3schools.com/tags/ref_language_codes.asp
            </remarks>
        </member>
        <member name="P:Blazorise.NumericPicker`1.Min">
            <summary>
            The minimum value to accept for this input.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.Max">
            <summary>
            The maximum value to accept for this input.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.MinMaxLimitsOverride">
            <summary>
            Override the minimum and maximum limits.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.VisibleCharacters">
            <summary>
            The size attribute specifies the visible width, in characters, of an input element. https://www.w3schools.com/tags/att_input_size.asp
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.ShowStepButtons">
            <summary>
            If true, step buttons will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.EnableStep">
            <summary>
            If true, enables change of numeric value by pressing on step buttons or by keyboard up/down keys.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.SelectAllOnFocus">
            <summary>
            If true, selects all the text entered in the input field once it receives the focus.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.ModifyValueOnWheel">
            <summary>
            Determine if the element value can be incremented / decremented with the mouse wheel.
            </summary>
        </member>
        <member name="P:Blazorise.NumericPicker`1.WheelOn">
            <summary>
            Used in conjonction with the <see cref="P:Blazorise.NumericPicker`1.ModifyValueOnWheel"/> option, defines when the wheel event will increment or decrement the element value, either when the element is focused, or hovered.
            </summary>
        </member>
        <member name="T:Blazorise.Offcanvas">
            <summary>
            A sidebar component that slides in and out of the screen.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.state">
            <summary>
             Holds the state of the Offcanvas component.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.closeReason">
            <summary>
             Holds the reason for the Offcanvas closing.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.jsRegistered">
            <summary>
             Indicates whether the Offcanvas has been registered with JavaScript.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.dotNetObjectRef">
            <summary>
             Reference to the .NET object adapter for the CloseActivator.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.closeActivatorElementIds">
            <summary>
             List of element IDs that act as close activators for the Offcanvas.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.closeableAdapter">
            <summary>
             Adapter for the Closeable interface to handle close events.
            </summary>
        </member>
        <member name="E:Blazorise.Offcanvas._Opened">
            <summary>
             Event that is triggered when the Offcanvas is opened.
            </summary>
        </member>
        <member name="E:Blazorise.Offcanvas._Closed">
            <summary>
             Event that is triggered when the Offcanvas is closed.
            </summary>
        </member>
        <member name="M:Blazorise.Offcanvas.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Blazorise.Offcanvas"/> class.
            </summary>
        </member>
        <member name="M:Blazorise.Offcanvas.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.Show">
            <summary>
            Starts the offcanvas opening process.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Offcanvas.Hide">
            <summary>
            Fires the offcanvas dialog closure process.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Offcanvas.Hide(Blazorise.CloseReason)">
            <summary>
            Internal method to hide the offcanvas with reason of closing.
            </summary>
            <param name="closeReason">Reason why offcanvas was closed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Offcanvas.IsSafeToOpen">
            <summary>
            Determines if offcanvas can be opened.
            </summary>
            <returns>True if offcanvas can be opened.</returns>
        </member>
        <member name="M:Blazorise.Offcanvas.IsSafeToClose">
            <summary>
            Determines if offcanvas can be closed.
            </summary>
            <returns>True if offcanvas can be closed.</returns>
        </member>
        <member name="M:Blazorise.Offcanvas.HandleVisibilityStyles(System.Boolean)">
            <summary>
            Handles the styles based on the visibility flag.
            </summary>
            <param name="visible">Offcanvas visibility flag.</param>
        </member>
        <member name="M:Blazorise.Offcanvas.RaiseEvents(System.Boolean)">
            <summary>
            Fires all the events for this offcanvas.
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:Blazorise.Offcanvas.NotifyCloseActivatorIdInitialized(System.String)">
            <summary>
            Registers a new element that can close the offcanvas.
            </summary>
            <param name="elementId">Element id.</param>
        </member>
        <member name="M:Blazorise.Offcanvas.NotifyCloseActivatorIdRemoved(System.String)">
            <summary>
            Removes the element that can close the offcanvas.
            </summary>
            <param name="elementId">Element id.</param>
        </member>
        <member name="M:Blazorise.Offcanvas.IsSafeToClose(System.String,Blazorise.CloseReason,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.Close(Blazorise.CloseReason)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.SetVisibleState(System.Boolean)">
            <summary>
            Handles the internal visibility states.
            </summary>
            <param name="visible">Visible state.</param>
        </member>
        <member name="M:Blazorise.Offcanvas.BeginAnimation(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Offcanvas.EndAnimation(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Offcanvas.HasOffcanvasHeader">
            <summary>
            True if Offcanvas contains the <see cref="T:Blazorise.OffcanvasHeader"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.HasOffcanvasFooter">
            <summary>
            True if Offcanvas contains the <see cref="T:Blazorise.OffcanvasFooter"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.HasOffcanvasBody">
            <summary>
            True if Offcanvas contains the <see cref="T:Blazorise.OffcanvasBody"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.IsVisible">
            <summary>
            Gets a value indicating whether the Offcanvas is visible.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.State">
            <summary>
            Gets the reference to state object for this Offcanvas.
            </summary>
        </member>
        <member name="F:Blazorise.Offcanvas.BackdropVisible">
            <summary>
            Returns true if the offcanvas backdrop should be visible.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.JSClosableModule">
            <summary>
            The injected JavaScript module for closable operations.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Visible">
            <summary>
            Gets or sets the visibility state of the Offcanvas.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.VisibleChanged">
            <summary>
            Event callback for when the visibility state of the Offcanvas changes.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Opening">
            <summary>
            Callback for handling the opening of the Offcanvas.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Closing">
            <summary>
            Callback for handling the closing of the Offcanvas.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Opened">
            <summary>
            Event callback for when the Offcanvas has been opened.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Closed">
            <summary>
            Event callback for when the Offcanvas has been closed.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Placement">
            <summary>
            Specifies the position of the Offcanvas.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.Animated">
            <summary>
            Specifies whether the Offcanvas should have an animated transition.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.AnimationDuration">
            <summary>
            The duration of the animation in milliseconds.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.ShowBackdrop">
            <summary>
            Specifies whether to render the backdrop for this <see cref="T:Blazorise.Offcanvas"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Offcanvas.ChildContent">
            <summary>
            The content to be rendered inside the Offcanvas.
            </summary>
        </member>
        <member name="T:Blazorise.OffcanvasBody">
            <summary>
            Center area of the offcanvas component.
            </summary>
        </member>
        <member name="M:Blazorise.OffcanvasBody.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OffcanvasBody.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OffcanvasBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.OffcanvasBody.ParentOffcanvas">
            <summary>
            Gets or sets the cascaded parent offcanvas-content component.
            </summary>
        </member>
        <member name="P:Blazorise.OffcanvasBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.OffcanvasBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.OffcanvasFooter">
            <summary>
            Top footer area of the modal component.
            </summary>
        </member>
        <member name="M:Blazorise.OffcanvasFooter.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OffcanvasFooter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OffcanvasFooter.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.OffcanvasFooter.ParentOffcanvas">
            <summary>
            Gets or sets the cascaded parent Offcanvas component.
            </summary>
        </member>
        <member name="P:Blazorise.OffcanvasFooter.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.OffcanvasFooter"/>.
            </summary>
        </member>
        <member name="T:Blazorise.OffcanvasHeader">
            <summary>
            Top header area of the modal component.
            </summary>
        </member>
        <member name="M:Blazorise.OffcanvasHeader.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OffcanvasHeader.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OffcanvasHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.OffcanvasHeader.ParentOffcanvas">
            <summary>
            Gets or sets the cascaded parent Offcanvas component.
            </summary>
        </member>
        <member name="P:Blazorise.OffcanvasHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.OffcanvasHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise._OffcanvasBackdrop">
            <summary>
            Internal component to render offcanvas backdrop or background.
            </summary>
        </member>
        <member name="M:Blazorise._OffcanvasBackdrop.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise._OffcanvasBackdrop.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise._OffcanvasBackdrop.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise._OffcanvasBackdrop.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise._OffcanvasBackdrop.ParentOffcanvas">
            <summary>
            Gets or sets the cascaded parent offcanvas component.
            </summary>
        </member>
        <member name="P:Blazorise._OffcanvasBackdrop.ParentOffcanvasState">
            <summary>
            Cascaded <see cref="T:Blazorise.Offcanvas"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise._OffcanvasBackdrop.Animated">
            <summary>
            Specifies whether the Offcanvas should have an animated transition.
            </summary>
        </member>
        <member name="P:Blazorise._OffcanvasBackdrop.AnimationDuration">
            <summary>
            The duration of the animation in milliseconds.
            </summary>
        </member>
        <member name="T:Blazorise.Pagination">
            <summary>
            A responsive and flexible pagination component.
            </summary>
        </member>
        <member name="M:Blazorise.Pagination.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Pagination.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Pagination.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Pagination.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object thet raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.Pagination.ThemeSize">
            <summary>
            Gets the size based on the theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.Pagination.Size">
            <summary>
            Gets or sets the pagination size.
            </summary>
        </member>
        <member name="P:Blazorise.Pagination.Alignment">
            <summary>
            Gets or sets the pagination alignment.
            </summary>
        </member>
        <member name="P:Blazorise.Pagination.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Pagination"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Pagination.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.PaginationItem">
            <summary>
            A container for page numbers links.
            </summary>
        </member>
        <member name="F:Blazorise.PaginationItem.state">
            <summary>
            Holds the state of this pagination item.
            </summary>
        </member>
        <member name="M:Blazorise.PaginationItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.PaginationItem.State">
            <summary>
            Gets the reference to the pagination item state object.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationItem.DisabledString">
            <summary>
            Gets the string representing the disabled state.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationItem.Active">
            <summary>
            Indicate the currently active page.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationItem.Disabled">
            <summary>
            Used for links that appear un-clickable.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationItem.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.PaginationItem"/>.
            </summary>
        </member>
        <member name="T:Blazorise.PaginationLink">
            <summary>
            Clickable element for page numbers.
            </summary>
        </member>
        <member name="F:Blazorise.PaginationLink.parentPaginationItemState">
            <summary>
            Holds the state of the parent item state object.
            </summary>
        </member>
        <member name="M:Blazorise.PaginationLink.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PaginationLink.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the link onclick event.
            </summary>
            <param name="eventArgs">Information about the mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.PaginationLink.Page">
            <summary>
            Gets or sets the page name.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationLink.Clicked">
            <summary>
            Occurs when the item link is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationLink.ParentPaginationItemState">
            <summary>
            Cascaded <see cref="T:Blazorise.States.PaginationItemState"/> for the <see cref="T:Blazorise.PaginationItem"/> in which this link is placed.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationLink.ParentPagination">
            <summary>
            Cascaded <see cref="T:Blazorise.Pagination"/> component in which this <see cref="T:Blazorise.PaginationLink"/> is placed.
            </summary>
        </member>
        <member name="P:Blazorise.PaginationLink.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.PaginationLink"/>.
            </summary>
        </member>
        <member name="T:Blazorise.PageProgress">
            <summary>
            Small progress bar shown at the top of the page or a container.
            </summary>
        </member>
        <member name="M:Blazorise.PageProgress.#ctor">
            <summary>
            A default <see cref="T:Blazorise.PageProgress"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.PageProgress.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PageProgress.BuildIndicatorClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the indicator element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.PageProgress.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PageProgress.SetValueAsync(System.Nullable{System.Int32})">
            <summary>
            Sets the progress value and redraws the component.
            </summary>
            <param name="value">Progress value, in range from 0 to 100.</param>
            <returns>Returns awaitable task.</returns>
        </member>
        <member name="P:Blazorise.PageProgress.IndicatorClassBuilder">
            <summary>
            Indicator classname builder.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgress.IndicatorClassNames">
            <summary>
            Gets the classnames for an indicator container.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgress.IndicatorStyleNames">
            <summary>
            Gets the stylenames for an indicator container.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgress.Visible">
            <summary>
            Defines the visibility of progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgress.Value">
            <summary>
            The progress value. Leave as null for indeterminate progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgress.Color">
            <summary>
            Type color of the progress bar, optional.
            </summary>
        </member>
        <member name="T:Blazorise.PageProgressAlert">
            <summary>
            Component that handles the <see cref="T:Blazorise.IPageProgressService"/> to show the page progress.
            </summary>
        </member>
        <member name="M:Blazorise.PageProgressAlert.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PageProgressAlert.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PageProgressAlert.OnProgressChanged(System.Object,Blazorise.PageProgressEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.PageProgressAlert.PageProgressRef">
            <summary>
            Gets or sets the <see cref="T:Blazorise.PageProgress"/> reference.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressAlert.Percentage">
            <summary>
            Gets or sets the page progress percentage, in range 0-100 or null for indeterminate.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressAlert.Visible">
            <summary>
            Gets or sets the visibility of the page alert.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressAlert.Color">
            <summary>
            Gets or sets the page alert color.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressAlert.PageProgressService">
            <summary>
            Gets or sets the <see cref="T:Blazorise.IPageProgressService"/> to which this component is responding.
            </summary>
        </member>
        <member name="T:Blazorise.Components.Progress.PageProgressProvider">
            <summary>
            Component that handles the <see cref="T:Blazorise.IPageProgressService"/> to show the page progress.
            </summary>
        </member>
        <member name="T:Blazorise.Progress">
            <summary>
            Main component for stacked progress bars.
            </summary>
        </member>
        <member name="F:Blazorise.Progress.state">
            <summary>
            Holds the state of the <see cref="T:Blazorise.Progress"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.Progress.hasProgressBar">
            <summary>
            Flag that indicates if <see cref="T:Blazorise.Progress"/> contains the <see cref="T:Blazorise.ProgressBar"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.Progress.#ctor">
            <summary>
            A default <see cref="T:Blazorise.Progress"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Progress.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Progress.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Progress.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Progress.BuildProgressBarClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a progress bar.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Progress.BuildProgressBarStyles(Blazorise.Utilities.StyleBuilder)">
            <summary>
            Builds the styles for a progress bar.
            </summary>
            <param name="builder">Styles builder used to append the styles.</param>
        </member>
        <member name="M:Blazorise.Progress.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Progress.DirtyStyles">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Progress.NotifyHasMessage">
            <summary>
            Notifies the progress that one of the child components is a progressbar.
            </summary>
        </member>
        <member name="M:Blazorise.Progress.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            An event raised when theme settings changes.
            </summary>
            <param name="sender">An object that raised the event.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Blazorise.Progress.HasProgressBar">
            <summary>
            Indicates if <see cref="T:Blazorise.Progress"/> contains the <see cref="T:Blazorise.ProgressBar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.State">
            <summary>
            Gets the progress state.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Percentage">
            <summary>
            Calculates the percentage based on the current value and max parameters.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ProgressBarClassNames">
            <summary>
            Gets the classnames of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ProgressBarStyleNames">
            <summary>
            Gets the stylenames of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ThemeSize">
            <summary>
            Gets the size based on the theme settings.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ProgressBarClassBuilder">
            <summary>
            Progress bar class builder.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ProgressBarStyleBuilder">
            <summary>
            Progress bar style builder.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Color">
            <summary>
            Defines the progress bar color.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Size">
            <summary>
            Size of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Striped">
            <summary>
            Set to true to make the progress bar stripped.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Animated">
            <summary>
            Set to true to make the progress bar animated.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Indeterminate">
            <summary>
            Set to true to show that an operation is being executed.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Min">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Max">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Value">
            <summary>
            The progress value.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ShowValue">
            <summary>
            If true, the value will be showed within the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Progress"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Progress.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.ProgressBar">
            <summary>
            Inner component of <see cref="T:Blazorise.Progress"/> component used to indicate the progress so far.
            </summary>
        </member>
        <member name="M:Blazorise.ProgressBar.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ProgressBar.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ProgressBar.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ProgressBar.Animate(System.Boolean)">
            <summary>
            Sets the progress bar <see cref="P:Blazorise.ProgressBar.Animated"/> flag.
            </summary>
            <param name="animated">True to animate the progress bar.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.ProgressBar.Percentage">
            <summary>
            Calculates the percentage based on the current value and max parameters.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.IsShowValue">
            <summary>
            If true, the value will be showed within the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Color">
            <summary>
            Defines the progress bar color.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Striped">
            <summary>
            Set to true to make the progress bar stripped.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Animated">
            <summary>
            Set to true to make the progress bar animated.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Indeterminate">
            <summary>
            Set to true to show that an operation is being executed.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Min">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Max">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.Value">
            <summary>
            The progress value.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ProgressBar"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ProgressBar.ParentProgress">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Progress"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Radio`1">
            <summary>
            Radio buttons allow the user to select one option from a set.
            </summary>
            <typeparam name="TValue">Checked value type.</typeparam>
        </member>
        <member name="M:Blazorise.Radio`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Radio`1.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Radio`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Radio`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Radio`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Radio`1.OnRadioChanged(System.Object,Blazorise.RadioCheckedChangedEventArgs{`0})">
            <summary>
            Event that raises after one of other radios inside of group changes.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Information about the currently checked radio.</param>
        </member>
        <member name="P:Blazorise.Radio`1.TrueValueName">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Radio`1.ParentIsRadioGroup">
            <summary>
            True if radio belongs to the <see cref="T:Blazorise.RadioGroup`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Radio`1.AsButton">
            <summary>
            True if radio should look as a regular button.
            </summary>
        </member>
        <member name="P:Blazorise.Radio`1.ButtonColor">
            <summary>
            Returns the button color.
            </summary>
        </member>
        <member name="P:Blazorise.Radio`1.Group">
            <summary>
            Sets the radio group name.
            </summary>
        </member>
        <member name="P:Blazorise.Radio`1.Value">
            <summary>
            Gets or sets the radio value.
            </summary>
        </member>
        <member name="P:Blazorise.Radio`1.ParentRadioGroup">
            <summary>
            Radio group in which this radio is placed.
            </summary>
        </member>
        <member name="T:Blazorise.RadioGroup`1">
            <summary>
            RadioGroup is a helpful wrapper used to group Radio components.
            </summary>
        </member>
        <member name="F:Blazorise.RadioGroup`1.buttons">
            <summary>
            Flag which indicates that radios will appear as button.
            </summary>
        </member>
        <member name="F:Blazorise.RadioGroup`1.orientation">
            <summary>
            Defines the orientation of the radio elements.
            </summary>
        </member>
        <member name="F:Blazorise.RadioGroup`1.color">
            <summary>
            Defines the color or radio buttons(only when <see cref="P:Blazorise.RadioGroup`1.Buttons"/> is true).
            </summary>
        </member>
        <member name="E:Blazorise.RadioGroup`1.RadioCheckedChanged">
            <summary>
            An event raised after the internal radio group value has changed.
            </summary>
        </member>
        <member name="M:Blazorise.RadioGroup`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.RadioGroup`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.RadioGroup`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.RadioGroup`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.RadioGroup`1.NotifyRadioChanged(Blazorise.Radio{`0})">
            <summary>
            Notifies radio group that one of it's radios have changed.
            </summary>
            <param name="radio">Radio from which change was received.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.RadioGroup`1.OnValidationStatusChanged(System.Object,Blazorise.ValidationStatusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.RadioGroup`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.RadioGroup`1.Inline">
            <summary>
            True of radio elements should be inlined.
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.Name">
            <summary>
            Radio group name.
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.Buttons">
            <summary>
            Flag which indicates that radios will appear as button.
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.Orientation">
            <summary>
            Defines the orientation of the radio elements.
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.Color">
            <summary>
            Defines the color or radio buttons(only when <see cref="P:Blazorise.RadioGroup`1.Buttons"/> is true).
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.CheckedValue">
            <summary>
            Gets or sets the checked value.
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.CheckedValueChanged">
            <summary>
            Occurs when the checked value is changed.
            </summary>
        </member>
        <member name="P:Blazorise.RadioGroup`1.CheckedValueExpression">
            <summary>
            Gets or sets an expression that identifies the checked value.
            </summary>
        </member>
        <member name="T:Blazorise.Rating">
            <summary>
            Ratings provide insight regarding others opinions and experiences with a product.
            </summary>
        </member>
        <member name="M:Blazorise.Rating.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Rating.HandleItemClicked(System.Int32)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="value">Item value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Rating.HandleItemHovered(System.Nullable{System.Int32})">
            <summary>
            Handles the item hover event.
            </summary>
            <param name="value">Item value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Rating.OnMouseOverHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onmouseover event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Rating.OnMouseOutHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onmouseout event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Rating.IsSelectedRange(System.Int32)">
            <summary>
            Indicates if item value is in the selected range.
            </summary>
            <param name="value">Item value.</param>
            <returns>True if item value is in the selected range.</returns>
        </member>
        <member name="M:Blazorise.Rating.IsHoveredRange(System.Int32)">
            <summary>
            Indicates if item value is in the hovered range.
            </summary>
            <param name="value">Item value.</param>
            <returns>True if item value is in the hovered range.</returns>
        </member>
        <member name="P:Blazorise.Rating.Hovering">
            <summary>
            Indicates if the mouse is hovering over the component.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.RatingItemsClass">
            <summary>
            User class names for RatingItems, separated by space
            </summary>
        </member>
        <member name="P:Blazorise.Rating.RatingItemsStyle">
            <summary>
            User styles for RatingItems.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.MaxValue">
            <summary>
            Maximum rating value that is allowed to be selected. Default is 5.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.FullIcon">
            <summary>
            Defines the selected icon name.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.EmptyIcon">
            <summary>
            Defines the non-selected icon name.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.FullIconStyle">
            <summary>
            Defines the selected icon style.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.EmptyIconStyle">
            <summary>
            Defines the non-selected icon style.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.Disabled">
            <summary>
            Prevent the user interactions and make it appear lighter.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.ReadOnly">
            <summary>
            Prevent the user interactions and make it appear normal.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.Color">
            <summary>
            Not work now
            </summary>
        </member>
        <member name="P:Blazorise.Rating.SelectedValue">
            <summary>
            Gets or sets the currently selected rating value.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.SelectedValueChanged">
            <summary>
            Occurs after the <see cref="P:Blazorise.Rating.SelectedValue"/> has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.HoveredValue">
            <summary>
            Gets or sets the currently hovered rating value.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.HoveredValueChanged">
            <summary>
            Occurs after the <see cref="P:Blazorise.Rating.HoveredValue"/> has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Rating.GetTooltip">
            <summary>
            Expression that provides the tooltip for the rating item to have additional user-friendly information.
            </summary>
            <remarks>
            The expression receives the rating item <Code>Value</Code> to determine the result.
            </remarks>
        </member>
        <member name="T:Blazorise.RatingItem">
            <summary>
            Represents the each individual item in the <see cref="T:Blazorise.Rating"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.RatingItem.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.RatingItem.HandleClick">
            <summary>
            Handles the item onclick event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.RatingItem.HandleMouseOver(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onmouseover event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.RatingItem.HandleMouseOut(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onmouseout event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.RatingItem.IconName">
            <summary>
            Gets the icon name based on the item state.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.IconStyle">
            <summary>
            Gets the icon style based on the item state.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.IsActive">
            <summary>
            Indicates if the item has a focus.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.IsSelected">
            <summary>
            Indicate if the item is selected.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.Value">
            <summary>
            Gets or sets the item value.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.Color">
            <summary>
            Gets or sets the item color.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.ItemClicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.ItemHovered">
            <summary>
            Occurs when the item is hovered.
            </summary>
        </member>
        <member name="P:Blazorise.RatingItem.Rating">
            <summary>
            Cascaded parent rating component.
            </summary>
        </member>
        <member name="T:Blazorise.Repeater`1">
            <summary>
            Repeater component that will render the <see cref="P:Blazorise.Repeater`1.ChildContent"/> for every item in <see cref="P:Blazorise.Repeater`1.Items"/>.
            Has support for <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> so it will update the rendered list of items when the collection changes.
            </summary>
            <typeparam name="TItem">the type to render</typeparam>
        </member>
        <member name="M:Blazorise.Repeater`1.Finalize">
            <summary>
            <see cref="T:Blazorise.Repeater`1"/> finalizer
            </summary>
        </member>
        <member name="M:Blazorise.Repeater`1.Attach(Microsoft.AspNetCore.Components.RenderHandle)">
            <inheritdoc cref="M:Microsoft.AspNetCore.Components.IComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle)"/>
        </member>
        <member name="M:Blazorise.Repeater`1.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Blazorise.Repeater`1.Dispose(System.Boolean)">
            <summary>
            Cleanup unmanaged resources and registered event handlers.
            </summary>
            <param name="disposing"><value>true</value> when disposing, <value>false</value> when finalizing</param>
        </member>
        <member name="M:Blazorise.Repeater`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc cref="M:Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)"/>
        </member>
        <member name="M:Blazorise.Repeater`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the items collection changes.
            </summary>
        </member>
        <member name="M:Blazorise.Repeater`1.CollectionChangedAsync(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the items collection changes.
            </summary>
        </member>
        <member name="M:Blazorise.Repeater`1.RenderItems">
            <summary>
            Renders the items in the collection.
            </summary>
        </member>
        <member name="P:Blazorise.Repeater`1.Items">
            <summary>
            The items to render. When this is <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> it will hookup collection change listeners.
            </summary>
        </member>
        <member name="P:Blazorise.Repeater`1.Take">
            <summary>
            [Optional] The number of items to take.
            </summary>
        </member>
        <member name="P:Blazorise.Repeater`1.Skip">
            <summary>
            [Optional] The number of items to skip.
            </summary>
        </member>
        <member name="P:Blazorise.Repeater`1.CollectionChanged">
            <summary>
            Occurs when <see cref="P:Blazorise.Repeater`1.Items"/> collection changes.
            </summary>
        </member>
        <member name="P:Blazorise.Repeater`1.ChildContent">
            <summary>
            The content to render per item.
            </summary>
        </member>
        <member name="T:Blazorise.Row">
            <summary>
            A wrapper that represents a row in a flexbox grid.
            </summary>
        </member>
        <member name="M:Blazorise.Row.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Row.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Row.GutterState">
            <summary>
            Gets the current gutter value based on the supplied parameters.
            </summary>
        </member>
        <member name="P:Blazorise.Row.RowColumns">
            <summary>
            Defines the number of columns to show in a row.
            </summary>
        </member>
        <member name="P:Blazorise.Row.Gutter">
            <summary>
            Row grid spacing - we recommend setting Horizontal and/or Vertical it to (16 + 8n). (n stands for natural number.)
            </summary>
        </member>
        <member name="P:Blazorise.Row.HorizontalGutter">
            <summary>
            Row grid Horizontal spacing. (n stands for natural number.)
            </summary>
        </member>
        <member name="P:Blazorise.Row.VerticalGutter">
            <summary>
            Row grid Vertical spacing. (n stands for natural number.)
            </summary>
        </member>
        <member name="P:Blazorise.Row.NoGutters">
            <summary>
            Removes the negative margins from row and the horizontal padding from all immediate children columns.
            </summary>
        </member>
        <member name="T:Blazorise.Select`1">
            <summary>
            The browser built-in select dropdown.
            </summary>
            <typeparam name="TValue">The type of the <see cref="P:Blazorise.Select`1.SelectedValue"/>.</typeparam>
        </member>
        <member name="M:Blazorise.Select`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Select`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Select`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the select onchange event.
            </summary>
            <param name="eventArgs">Supplies information about an change event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Select`1.OnInternalValueChanged(System.Collections.Generic.IReadOnlyList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Select`1.PrepareValueForValidation(System.Collections.Generic.IReadOnlyList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Select`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Select`1.FormatValueAsString(System.Collections.Generic.IReadOnlyList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Select`1.ContainsValue(`0)">
            <summary>
            Indicates if <see cref="T:Blazorise.Select`1"/> contains the provided item value.
            </summary>
            <param name="value">Item value.</param>
            <returns>True if value is found.</returns>
        </member>
        <member name="P:Blazorise.Select`1.ValidationValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Select`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Select`1.SelectItems">
            <summary>
            Gets the list of all select items inside of this select component.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.Multiple">
            <summary>
            Specifies that multiple items can be selected.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.SelectedValue">
            <summary>
            Gets or sets the selected item value.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.SelectedValues">
            <summary>
            Gets or sets the multiple selected item values.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.SelectedValueChanged">
            <summary>
            Occurs when the selected item value has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.SelectedValuesChanged">
            <summary>
            Occurs when the selected items value has changed (only when <see cref="P:Blazorise.Select`1.Multiple"/>==true).
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.SelectedValueExpression">
            <summary>
            Gets or sets an expression that identifies the selected value.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.SelectedValuesExpression">
            <summary>
            Gets or sets an expression that identifies the selected value.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.MaxVisibleItems">
            <summary>
            Specifies how many options should be shown at once.
            </summary>
        </member>
        <member name="P:Blazorise.Select`1.Loading">
            <summary>
            Gets or sets loading property.
            </summary>
        </member>
        <member name="T:Blazorise.SelectGroup">
            <summary>
            Group item in the <see cref="T:Blazorise.Select`1"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.SelectGroup.Label">
            <summary>
            Gets or sets the group label.
            </summary>
        </member>
        <member name="P:Blazorise.SelectGroup.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.SelectGroup"/>.
            </summary>
        </member>
        <member name="T:Blazorise.ISelectItem`1">
            <summary>
            Basic type for all <see cref="T:Blazorise.SelectItem`1"/> components.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Blazorise.ISelectItem`1.Value">
            <summary>
            Gets or sets the item value.
            </summary>
        </member>
        <member name="P:Blazorise.ISelectItem`1.ChildContent">
            <summary>
            Gets or sets the item render fragment.
            </summary>
        </member>
        <member name="T:Blazorise.SelectItem`1">
            <summary>
            Option item in the <see cref="T:Blazorise.Select`1"/> component.
            </summary>
            <typeparam name="TValue">The type of the <see cref="P:Blazorise.SelectItem`1.Value"/>.</typeparam>
        </member>
        <member name="M:Blazorise.SelectItem`1.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.SelectItem`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.SelectItem`1.Selected">
            <summary>
            Gets the flag that indicates if item is selected.
            </summary>
        </member>
        <member name="P:Blazorise.SelectItem`1.StringValue">
            <summary>
            Convert the value to string because option tags are working with string internally. Otherwise some datatypes like booleans will not work as expected.
            </summary>
        </member>
        <member name="P:Blazorise.SelectItem`1.Value">
            <summary>
            Gets or sets the item value.
            </summary>
        </member>
        <member name="P:Blazorise.SelectItem`1.Disabled">
            <summary>
            Disable the item from mouse click.
            </summary>
        </member>
        <member name="P:Blazorise.SelectItem`1.Hidden">
            <summary>
            Hide the item from the list so it can be used as a placeholder.
            </summary>
        </member>
        <member name="P:Blazorise.SelectItem`1.ParentSelect">
            <summary>
            Specifies the select component in which this select item is placed.
            </summary>
        </member>
        <member name="P:Blazorise.SelectItem`1.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.SelectItem`1"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Slider`1">
            <summary>
            A slider to select a value from a given range.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="P:Blazorise.Slider`1.Value"/> property.</typeparam>
        </member>
        <member name="F:Blazorise.Slider`1.minDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.Slider`1.Min"/> parameter is defined.
            </summary>
        </member>
        <member name="F:Blazorise.Slider`1.maxDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.Slider`1.Max"/> parameter is defined.
            </summary>
        </member>
        <member name="M:Blazorise.Slider`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Slider`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Slider`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Slider`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Slider`1.FormatValueAsString(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Slider`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Slider`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Slider`1.StepString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.Slider`1.Step"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.MinString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.Slider`1.Min"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.MaxString">
            <summary>
            Gets the string representation of the <see cref="P:Blazorise.Slider`1.Max"/> value.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.MinDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.Slider`1.Min"/> parameter is defined.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.MaxDefined">
            <summary>
            Indicates if <see cref="P:Blazorise.Slider`1.Max"/> parameter is defined.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.Step">
            <summary>
            Specifies the interval between valid values.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.Value">
            <summary>
            Gets or sets the value inside the input field.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.ValueChanged">
            <summary>
            Occurs after the value has changed.
            </summary>
            <remarks>
            This will be converted to EventCallback once the Blazor team fix the error for generic components. see https://github.com/aspnet/AspNetCore/issues/8385
            </remarks>
        </member>
        <member name="P:Blazorise.Slider`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the checked value.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.Min">
            <summary>
            The minimum value to accept for this input.
            </summary>
        </member>
        <member name="P:Blazorise.Slider`1.Max">
            <summary>
            The maximum value to accept for this input.
            </summary>
        </member>
        <member name="T:Blazorise.Step">
            <summary>
            Clickable item in a <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.Step.#ctor">
            <summary>
            A default <see cref="T:Blazorise.Step"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Step.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Step.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Step.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Step.BuildMarkerClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a marker element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Step.BuildDescriptionClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a description element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Step.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Step.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the step onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.Step.MarkerClassBuilder">
            <summary>
            Marker element class builder.
            </summary>
        </member>
        <member name="P:Blazorise.Step.DescriptionClassBuilder">
            <summary>
            Description element class builder.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Active">
            <summary>
            True if the step item is currently selected.
            </summary>
        </member>
        <member name="P:Blazorise.Step.CalculatedIndex">
            <summary>
            Gets the index of a step item within the <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Step.MarkerClassNames">
            <summary>
            Gets the classnames for marker part of a step item.
            </summary>
        </member>
        <member name="P:Blazorise.Step.DescriptionClassNames">
            <summary>
            Gets the classnames for description part of a step item.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Index">
            <summary>
            Overrides the index of the step item.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Name">
            <summary>
            Defines the step name.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Completed">
            <summary>
            Marks the step as completed.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Color">
            <summary>
            Overrides the step color.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Marker">
            <summary>
            Custom render template for the marker(circle) part of the step item.
            </summary>
        </member>
        <member name="P:Blazorise.Step.Caption">
            <summary>
            Custom render template for the text part of the step item.
            </summary>
        </member>
        <member name="P:Blazorise.Step.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Step"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Step.ParentStepsState">
            <summary>
            Cascaded <see cref="T:Blazorise.Steps"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.Step.ParentSteps">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.StepNavigationContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Blazorise.StepNavigationContext.CurrentStepName">
            <summary>
            Gets the name of the current step.
            </summary>
        </member>
        <member name="P:Blazorise.StepNavigationContext.CurrentStepIndex">
            <summary>
            Gets the one-based index of the current.
            </summary>
        </member>
        <member name="P:Blazorise.StepNavigationContext.NextStepName">
            <summary>
            Gets the name of the next step.
            </summary>
        </member>
        <member name="P:Blazorise.StepNavigationContext.NextStepIndex">
            <summary>
            Gets the one-based index of next step.
            </summary>
        </member>
        <member name="T:Blazorise.StepPanel">
            <summary>
            <see cref="T:Blazorise.Step"/> content area that is linked with a <see cref="T:Blazorise.Step"/> with the same name and that is placed within the <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.StepPanel.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.StepPanel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.StepPanel.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.StepPanel.Active">
            <summary>
            True if the step panel is currently selected.
            </summary>
        </member>
        <member name="P:Blazorise.StepPanel.Name">
            <summary>
            Defines the panel name. Must match the corresponding step name.
            </summary>
        </member>
        <member name="P:Blazorise.StepPanel.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.StepPanel"/>.
            </summary>
        </member>
        <member name="P:Blazorise.StepPanel.ParentStepsState">
            <summary>
            Cascaded <see cref="T:Blazorise.Steps"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.StepPanel.ParentStepsContentStore">
            <summary>
            Cascaded <see cref="T:Blazorise.StepsContent"/> component state object.
            </summary>
        </member>
        <member name="P:Blazorise.StepPanel.ParentSteps">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.StepPanel.ParentStepsContent">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.StepsContent"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Steps">
            <summary>
            Steps is a navigation bar that guides users through the steps of a task.
            </summary>
        </member>
        <member name="M:Blazorise.Steps.#ctor">
            <summary>
            A default <see cref="T:Blazorise.Step"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Steps.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Steps.SelectStep(System.String)">
            <summary>
            Sets the active step by the name.
            </summary>
            <param name="stepName"></param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Steps.NextStep">
            <summary>
            Goes to the next step.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Steps.PreviousStep">
            <summary>
            Goes to the previous step.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Steps.IndexOfStep(System.String)">
            <summary>
            Returns the index of the step item.
            </summary>
            <param name="name">Name of the step item.</param>
            <returns>The one-based index or 0 if not found.</returns>
        </member>
        <member name="P:Blazorise.Steps.State">
            <summary>
            Gets the steps state object.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.StepItems">
            <summary>
            Gets the list of all <see cref="T:Blazorise.Step"/>s  within the <see cref="T:Blazorise.Steps"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.StepPanels">
            <summary>
            Gets the list of all <see cref="T:Blazorise.StepPanel"/>s within the <see cref="T:Blazorise.Steps"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.ContentClassBuilder">
            <summary>
            Content element class builder.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.ContentClassNames">
            <summary>
            Gets the classnames for the content element.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.SelectedStep">
            <summary>
            Gets or sets currently selected step name.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.SelectedStepChanged">
            <summary>
            Occurs after the selected step has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.NavigationAllowed">
            <summary>
            Disables navigation by clicking on step.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.Items">
            <summary>
            Template for placing the <see cref="T:Blazorise.Step"/> items.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.Content">
            <summary>
            Template for placing the <see cref="T:Blazorise.StepPanel"/> items.
            </summary>
        </member>
        <member name="P:Blazorise.Steps.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Steps"/>.
            </summary>
        </member>
        <member name="T:Blazorise.StepsContent">
            <summary>
            Main content area of <see cref="T:Blazorise.Steps"/> component that can be placed anywhere on a page.
            </summary>
        </member>
        <member name="M:Blazorise.StepsContent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.StepsContent.SelectPanel(System.String)">
            <summary>
            Select the panel by name.
            </summary>
            <param name="name">Panel name.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.StepsContent.State">
            <summary>
            Gets the reference to the steps content state object.
            </summary>
        </member>
        <member name="P:Blazorise.StepsContent.IndexOfSelectedPanel">
            <summary>
            Get the index of the currently selected panel.
            </summary>
        </member>
        <member name="P:Blazorise.StepsContent.SelectedPanel">
            <summary>
            Gets or sets currently selected panel name.
            </summary>
        </member>
        <member name="P:Blazorise.StepsContent.SelectedPanelChanged">
            <summary>
            Occurs after the selected panel has changed.
            </summary>
        </member>
        <member name="P:Blazorise.StepsContent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.StepsContent"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Switch`1">
            <summary>
            Switches toggle the state of a single setting on or off.
            </summary>
            <typeparam name="TValue">Checked value type.</typeparam>
        </member>
        <member name="M:Blazorise.Switch`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Switch`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Switch`1.TrueValueName">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Switch`1.IsChecked">
            <summary>
            Returns true id switch is in checked state.
            </summary>
        </member>
        <member name="P:Blazorise.Switch`1.Color">
            <summary>
            Defines the switch named color.
            </summary>
        </member>
        <member name="T:Blazorise.Table">
            <summary>
            The <see cref="T:Blazorise.Table"/> component is used for displaying tabular data.
            </summary>
        </member>
        <member name="M:Blazorise.Table.#ctor">
            <summary>
            Default <see cref="T:Blazorise.Table"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Table.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Table.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Table.BuildContainerClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the responsive container element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Table.BuildContainerStyles(Blazorise.Utilities.StyleBuilder)">
            <summary>
            Builds a list of styles for the responsive container element.
            </summary>
            <param name="builder">Style builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Table.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Table.DirtyStyles">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Table.InitializeTableFixedHeader">
            <summary>
            Makes sure that the table header is properly sized.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Table.RecalculateResize">
            <summary>
            If Table is resizable. 
            Resizable columns should be constantly recalculated to keep up with the current Table's height dimensions.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Table.ScrollToPixels(System.Int32)">
            <summary>
            If table has <see cref="P:Blazorise.Table.FixedHeader"/> enabled, it will scroll position to the provided pixels.
            </summary>
            <param name="pixels">Offset in pixels from the top of the table.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Table.ScrollToRow(System.Int32)">
            <summary>
            If table has <see cref="P:Blazorise.Table.FixedHeader"/> enabled, it will scroll position to the provided row.
            </summary>
            <param name="row">Zero-based index of table row to scroll to.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.Table.ContainerClassBuilder">
            <summary>
            Class builder used to build the classnames for responsive element.
            </summary>
        </member>
        <member name="P:Blazorise.Table.ContainerClassNames">
            <summary>
            Gets the classname for a responsive element.
            </summary>
        </member>
        <member name="P:Blazorise.Table.ContainerStyleBuilder">
            <summary>
            Style builder used to build the stylenames for responsive or fixed element.
            </summary>
        </member>
        <member name="P:Blazorise.Table.ContainerStyleNames">
            <summary>
            Gets the styles for a responsive element.
            </summary>
        </member>
        <member name="P:Blazorise.Table.HasContainer">
            <summary>
            True if table needs to be placed inside of container element.
            </summary>
        </member>
        <member name="P:Blazorise.Table.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSTableModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Table.FullWidth">
            <summary>
            Makes the table to fill entire horizontal space.
            </summary>
        </member>
        <member name="P:Blazorise.Table.Striped">
            <summary>
            Adds stripes to the table.
            </summary>
        </member>
        <member name="P:Blazorise.Table.Bordered">
            <summary>
            Adds borders to all the cells.
            </summary>
        </member>
        <member name="P:Blazorise.Table.Hoverable">
            <summary>
            Adds a hover effect when mousing over rows.
            </summary>
        </member>
        <member name="P:Blazorise.Table.Narrow">
            <summary>
            Makes the table more compact by cutting cell padding in half.
            </summary>
        </member>
        <member name="P:Blazorise.Table.Borderless">
            <summary>
            Makes the table without any borders.
            </summary>
        </member>
        <member name="P:Blazorise.Table.Responsive">
            <summary>
            Makes table responsive by adding the horizontal scroll bar.
            </summary>
            <remarks>
            In some cases <see cref="T:Blazorise.Dropdown"/> component placed inside of a table marked with <see cref="P:Blazorise.Table.Responsive"/>
            flag might not show dropdown menu properly. To make it work you might need to add some
            <see href="https://stackoverflow.com/questions/49346755/bootstrap-4-drop-down-menu-in-table">additional CSS rules</see>.
            </remarks>
        </member>
        <member name="P:Blazorise.Table.FixedHeader">
            <summary>
            Makes table have a fixed header and enables a scrollbar in the table body.
            </summary>
        </member>
        <member name="P:Blazorise.Table.FixedColumns">
            <summary>
            Makes table have a fixed set of columns. This will make it so that the table columns could be fixed to the side of the table.
            </summary>
        </member>
        <member name="P:Blazorise.Table.FixedHeaderTableHeight">
            <summary>
            Sets the table height when <see cref="P:Blazorise.Table.FixedHeader"/> feature is enabled (defaults to 300px).
            </summary>
        </member>
        <member name="P:Blazorise.Table.FixedHeaderTableMaxHeight">
            <summary>
            Sets the table max height when <see cref="P:Blazorise.Table.FixedHeader"/> feature is enabled (defaults to 300px).
            </summary>
        </member>
        <member name="P:Blazorise.Table.Resizable">
            <summary>
            Gets or sets whether users can resize Table's columns.
            </summary>
        </member>
        <member name="P:Blazorise.Table.ResizeMode">
            <summary>
            Gets or sets whether the user can resize on header or columns.
            </summary>
        </member>
        <member name="P:Blazorise.Table.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Table"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TableBody">
            <summary>
            Table Body element encapsulates a set of table rows, indicating that they comprise the body of the table.
            </summary>
        </member>
        <member name="M:Blazorise.TableBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TableBody.ParentTable">
            <summary>
            Gets or sets the cascaded parent table component.
            </summary>
        </member>
        <member name="P:Blazorise.TableBody.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableBody"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TableFooter">
            <summary>
            Defines a set of rows summarizing the columns of the table.
            </summary>
        </member>
        <member name="M:Blazorise.TableFooter.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TableFooter.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableFooter"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TableHeader">
            <summary>
            Defines a set of rows defining the head of the columns of the table.
            </summary>
        </member>
        <member name="M:Blazorise.TableHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TableHeader.ThemeContrast">
            <summary>
            Sets the preferred color contrast for the header.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeader.ParentTable">
            <summary>
            Gets or sets the cascaded parent table component.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TableHeaderCell">
            <summary>
            Defines a cell as header of a group of table cells.
            </summary>
        </member>
        <member name="M:Blazorise.TableHeaderCell.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableHeaderCell.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableHeaderCell.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableHeaderCell.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the header cell clicked event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TableHeaderCell.SetFixedPositionStartOffset(System.Double)">
            <summary>
            Sets the fixed position start offset.
            </summary>
            <param name="width">Size in pixels.</param>
        </member>
        <member name="M:Blazorise.TableHeaderCell.IncreaseFixedPositionEndOffset(System.Double)">
            <summary>
            Sets or increased the fixed position end offset by the provided width.
            </summary>
            <param name="width">Size in pixels.</param>
        </member>
        <member name="P:Blazorise.TableHeaderCell.ParentTableRow">
            <summary>
            Gets or sets the cascaded parent table row component.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeaderCell.RowSpan">
            <summary>
            Number of rows a cell should span.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeaderCell.ColumnSpan">
            <summary>
            Number of columns a cell should span.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeaderCell.FixedPosition">
            <summary>
            Defines the fixed position of the header cell within the table.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeaderCell.Cursor">
            <summary>
            Defines the mouse cursor based on the behaviour by the current css framework.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeaderCell.Clicked">
            <summary>
            Occurs when the header cell is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableHeaderCell.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableHeaderCell"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TableRow">
            <summary>
            Component defines a row of cells in a table. The row's cells can then be established using a mix of <see cref="T:Blazorise.TableRowCell"/> (data cell) components.
            </summary>
        </member>
        <member name="E:Blazorise.TableRow.TableRowCellFixedPositionEndAdded">
            <summary>
            Triggers when the width of the cell with TableColumnFixedPosition.End changes.
            </summary>
        </member>
        <member name="M:Blazorise.TableRow.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRow.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the row clicked event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TableRow.OnMouseLeaveHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the row mouse leave event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TableRow.OnMouseOverHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the row mouseover event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TableRow.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRow.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TableRow.ParentTable">
            <summary>
            Gets or sets the cascaded parent table component.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.Color">
            <summary>
            Gets or sets the row variant color.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.Selected">
            <summary>
            Sets a table row as selected by appending "selected" modifier on a tr element.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.HoverCursor">
            <summary>
            Gets or sets the applied cursor when the row is hovered over.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.Clicked">
            <summary>
            Occurs when the row is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.DoubleClicked">
            <summary>
            Occurs when the row is double clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.MouseOver">
            <summary>
            Occurs when the row is mouse overed.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.MouseLeave">
            <summary>
            Occurs when the row is mouse leaved.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableRow"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TableRow.TableRowCellFixedPositionEndAddedEventArgs">
            <summary>
            Triggers when the width of the cell with TableColumnFixedPosition.End changes.
            </summary>
        </member>
        <member name="P:Blazorise.TableRow.TableRowCellFixedPositionEndAddedEventArgs.Width">
            <summary>
            The width of the cell with <see cref="F:Blazorise.TableColumnFixedPosition.End"/> defined.
            </summary>
        </member>
        <member name="T:Blazorise.TableRowCell">
            <summary>
            Defines a cell of a table that contains data.
            </summary>
        </member>
        <member name="M:Blazorise.TableRowCell.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowCell.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowCell.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowCell.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the header cell clicked event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TableRowCell.SetFixedPositionStartOffset(System.Double)">
            <summary>
            Sets the fixed position start offset.
            </summary>
            <param name="width">Size in pixels.</param>
        </member>
        <member name="M:Blazorise.TableRowCell.IncreaseFixedPositionEndOffset(System.Double)">
            <summary>
            Sets or increased the fixed position end offset by the provided width.
            </summary>
            <param name="width">Size in pixels.</param>
        </member>
        <member name="P:Blazorise.TableRowCell.ParentTableRow">
            <summary>
            Gets or sets the cascaded parent table row component.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.Color">
            <summary>
            Gets or sets the cell variant color.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.RowSpan">
            <summary>
            Number of rows a cell should span.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.ColumnSpan">
            <summary>
            Number of columns a cell should span.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.FixedPosition">
            <summary>
            Defines the fixed position of the row cell within the table.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.Clicked">
            <summary>
            Occurs when the row cell is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableRowCell"/>.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.ClickPreventDefault">
            <summary>
            Used to prevent the default action for an <see cref="M:Blazorise.TableRowCell.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)"/> event.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowCell.ClickStopPropagation">
            <summary>
            Used to stop progation of the click action event.
            </summary>
        </member>
        <member name="T:Blazorise.TableRowGroup">
            <summary>
            The <see cref="T:Blazorise.TableRowGroup"/> component is used to group rows in a table.
            </summary>
        </member>
        <member name="M:Blazorise.TableRowGroup.#ctor">
            <summary>
            A default <see cref="T:Blazorise.TableRowGroup"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.TableRowGroup.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowGroup.BuildRowCellClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a cell.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.TableRowGroup.BuildRowIndentCellClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for an indent cell.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.TableRowGroup.DirtyClasses">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowGroup.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the row clicked event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.TableRowGroup.RowCellClassBuilder">
            <summary>
            Row cell class builder.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.RowIndentCellClassBuilder">
            <summary>
            Row indent cell class builder.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.ParentTable">
            <summary>
            Gets or sets the cascaded parent table component.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.Expanded">
            <summary>
            Defines if the group is expanded.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.ExpandedChanged">
            <summary>
            Defines if the group is expanded.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.Toggleable">
            <summary>
            Defines if the group <see cref="P:Blazorise.TableRowGroup.Expanded"/> property can be toggled by clicking. It is still possible to toggle it programatically.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.ColumnSpan">
            <summary>
            Determines the column span for the inner table cell.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.Clicked">
            <summary>
            Occurs when the row is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.DoubleClicked">
            <summary>
            Occurs when the row is double clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.Title">
            <summary>
            Specifies the title to be rendered inside this <see cref="T:Blazorise.TableRowGroup"/>.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.TitleTemplate">
            <summary>
            Specifies the custom title content to be rendered inside this <see cref="T:Blazorise.TableRowGroup"/>. It has higher priority over the <see cref="P:Blazorise.TableRowGroup.Title"/> parameter.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableRow"/>.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.IndentTableCells">
            <summary>
            Specifies a number of Table Cells to Indent on the Group Row.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowGroup.IndentTableCellTemplate">
            <summary>
            Specifies the custom content inside an Indented Table Cell on the Group Row. A contextual index is provided according to the Indentation.
            </summary>
        </member>
        <member name="T:Blazorise.TableRowHeader">
            <summary>
            Defines a cell as header of a group of table cells.
            </summary>
        </member>
        <member name="M:Blazorise.TableRowHeader.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowHeader.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TableRowHeader.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the row onclick event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TableRowHeader.SetFixedPositionStartOffset(System.Double)">
            <summary>
            Sets the fixed position start offset.
            </summary>
            <param name="width">Size in pixels.</param>
        </member>
        <member name="M:Blazorise.TableRowHeader.IncreaseFixedPositionEndOffset(System.Double)">
            <summary>
            Sets or increased the fixed position end offset by the provided width.
            </summary>
            <param name="width">Size in pixels.</param>
        </member>
        <member name="P:Blazorise.TableRowHeader.ParentTableRow">
            <summary>
            Gets or sets the cascaded parent table row component.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowHeader.RowSpan">
            <summary>
            Number of rows a cell should span.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowHeader.ColumnSpan">
            <summary>
            Number of columns a cell should span.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowHeader.FixedPosition">
            <summary>
            Defines the fixed position of the row header within the table.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowHeader.Clicked">
            <summary>
            Occurs when the row header is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.TableRowHeader.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TableRowHeader"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Tab">
            <summary>
            A clickable item for <see cref="T:Blazorise.Tabs"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.Tab.parentTabsState">
            <summary>
            A reference to the parent tabs state.
            </summary>
        </member>
        <member name="F:Blazorise.Tab.disabled">
            <summary>
            Flag to indicate that the tab is not responsive for user interaction.
            </summary>
        </member>
        <member name="M:Blazorise.Tab.#ctor">
            <summary>
            Default <see cref="T:Blazorise.Tab"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Tab.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Tab.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Tab.BuildLinkClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the link element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Tab.DirtyClasses">
            <summary>
            Marks the classnames as dirty so they can be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.Tab.ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the item onclick event.
            </summary>
            <param name="eventArgs">Supplies information about a mouse event that is being raised.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.Tab.LinkClassBuilder">
            <summary>
            Gets or sets the class builder for the link element.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.LinkClassNames">
            <summary>
            Gets the link class-names.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.Active">
            <summary>
            True if this tab is currently set as selected.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.Name">
            <summary>
            Defines the tab name. Must match the corresponding panel name.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.Disabled">
            <summary>
            Flag to indicate that the tab is not responsive for user interaction.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.Clicked">
            <summary>
            Occurs when the item is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.ParentTabsState">
            <summary>
            Cascaded parent <see cref="T:Blazorise.Tabs"/> state.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.ParentTabs">
            <summary>
            Cascaded parent <see cref="T:Blazorise.Tabs"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Tab.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Tab"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TabPanel">
            <summary>
            A container for each <see cref="T:Blazorise.Tab"/> inside of <see cref="T:Blazorise.Tabs"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.TabPanel.lazyLoaded">
            <summary>
            Tracks whether the component fulfills the requirements to be lazy loaded and then kept rendered to the DOM.
            </summary>
        </member>
        <member name="F:Blazorise.TabPanel.parentTabsState">
            <summary>
            A reference to the parent tabs state.
            </summary>
        </member>
        <member name="F:Blazorise.TabPanel.parentTabsContentState">
            <summary>
            A reference to the parent tabs content state.
            </summary>
        </member>
        <member name="M:Blazorise.TabPanel.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TabPanel.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TabPanel.OnParametersSetAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TabPanel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TabPanel.Active">
            <summary>
            True if this panel is currently set as selected.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.RenderMode">
            <summary>
            Gets the current render mode.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.Name">
            <summary>
            Defines the panel name. Must match the corresponding tab name.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.ParentTabsState">
            <summary>
            Cascaded parent <see cref="T:Blazorise.Tabs"/> state.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.ParentTabsContentState">
            <summary>
            Cascaded parent <see cref="T:Blazorise.TabsContent"/> state.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.ParentTabs">
            <summary>
            Cascaded parent <see cref="T:Blazorise.Tabs"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.ParentTabsContent">
            <summary>
            Cascaded parent <see cref="T:Blazorise.TabsContent"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.TabPanel.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TabPanel"/>.
            </summary>
        </member>
        <member name="T:Blazorise.Tabs">
            <summary>
            Tabs organize content across different screens, data sets, and other interactions.
            </summary>
        </member>
        <member name="F:Blazorise.Tabs.state">
            <summary>
            Holds the state of this tabs component.
            </summary>
        </member>
        <member name="F:Blazorise.Tabs.tabItems">
            <summary>
            List of all tab names that are placed inside if this component.
            </summary>
        </member>
        <member name="F:Blazorise.Tabs.tabPanels">
            <summary>
            List of all panel names that are placed inside if this component.
            </summary>
        </member>
        <member name="M:Blazorise.Tabs.#ctor">
            <summary>
            Default <see cref="T:Blazorise.Tabs"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.Tabs.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Tabs.BuildContentClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds a list of classnames for the content container element.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.Tabs.NotifyTabInitialized(System.String)">
            <summary>
            Notify this <see cref="T:Blazorise.Tabs"/> component that it's <see cref="T:Blazorise.Tab"/> child component is placed inside of it.
            </summary>
            <param name="name">The name of the tab.</param>
        </member>
        <member name="M:Blazorise.Tabs.NotifyTabRemoved(System.String)">
            <summary>
            Notify this <see cref="T:Blazorise.Tabs"/> component that it's <see cref="T:Blazorise.Tab"/> child component is removed from it.
            </summary>
            <param name="name">The name of the tab.</param>
        </member>
        <member name="M:Blazorise.Tabs.NotifyTabPanelInitialized(System.String)">
            <summary>
            Notify this <see cref="T:Blazorise.Tabs"/> component that it's <see cref="T:Blazorise.TabPanel"/> child component is placed inside of it.
            </summary>
            <param name="name">The name of the panel.</param>
        </member>
        <member name="M:Blazorise.Tabs.NotifyTabPanelRemoved(System.String)">
            <summary>
            Notify this <see cref="T:Blazorise.Tabs"/> component that it's <see cref="T:Blazorise.TabPanel"/> child component is removed from it.
            </summary>
            <param name="name">The name of the panel.</param>
        </member>
        <member name="M:Blazorise.Tabs.SelectTab(System.String)">
            <summary>
            Sets the active tab by the name.
            </summary>
            <param name="tabName">The name of the tab.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.Tabs.State">
            <summary>
            Gets the reference to the tabs state object.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.IsCards">
            <summary>
            True if <see cref="T:Blazorise.Tabs"/> is placed inside of <see cref="P:Blazorise.Tabs.CardHeader"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.ContentClassBuilder">
            <summary>
            Gets or sets the class builder for the content container element.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.ContentClassNames">
            <summary>
            Gets the content class-names.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.IndexOfSelectedTab">
            <summary>
            Get the index of the currently selected tab.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.TabItems">
            <summary>
            Gets the list of all tab item names that are placed inside of this container.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.TabPanels">
            <summary>
            Gets the list of all tab panel names that are placed inside of this container.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.Pills">
            <summary>
            Makes the tab items to appear as pills.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.FullWidth">
            <summary>
            Makes the tab items to extend the full available width.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.Justified">
            <summary>
            Makes the tab items to extend the full available width, but every item will be the same width.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.TabPosition">
            <summary>
            Position of tab items.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.RenderMode">
            <summary>
            Defines how the tabs content will be rendered.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.VerticalItemsColumnSize">
            <summary>
            Controls the size of the items bar when in vertical mode. If left undefined it will default to the <c>ColumnSize.IsAuto</c>.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.SelectedTab">
            <summary>
            Gets or sets currently selected tab name.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.SelectedTabChanged">
            <summary>
            Occurs after the selected tab has changed.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.CardHeader">
            <summary>
            Cascaded parent <see cref="P:Blazorise.Tabs.CardHeader"/> when <see cref="T:Blazorise.Tabs"/> is placed inside of card.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.Items">
            <summary>
            Container for tab items.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.Content">
            <summary>
            Container for tab panes.
            </summary>
        </member>
        <member name="P:Blazorise.Tabs.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Tabs"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TabsContent">
            <summary>
            A container for tab panels.
            </summary>
        </member>
        <member name="F:Blazorise.TabsContent.state">
            <summary>
            Holds the state of this tabs content component.
            </summary>
        </member>
        <member name="F:Blazorise.TabsContent.tabPanels">
            <summary>
            List of all panel names that are placed inside if this component.
            </summary>
        </member>
        <member name="M:Blazorise.TabsContent.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TabsContent.NotifyTabPanelInitialized(System.String)">
            <summary>
            Notify this <see cref="T:Blazorise.Tabs"/> component that it's <see cref="T:Blazorise.TabPanel"/> child component is placed inside of it.
            </summary>
            <param name="name">The name of the panel.</param>
        </member>
        <member name="M:Blazorise.TabsContent.NotifyTabPanelRemoved(System.String)">
            <summary>
            Notify this <see cref="T:Blazorise.Tabs"/> component that it's <see cref="T:Blazorise.TabPanel"/> child component is removed from it.
            </summary>
            <param name="name">The name of the panel.</param>
        </member>
        <member name="M:Blazorise.TabsContent.SelectPanel(System.String)">
            <summary>
            Sets the active panel by the name.
            </summary>
            <param name="name">The name of the panel.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.TabsContent.State">
            <summary>
            Gets the reference to the tabs content state object.
            </summary>
        </member>
        <member name="P:Blazorise.TabsContent.IndexOfSelectedPanel">
            <summary>
            Get the index of the currently selected panel.
            </summary>
        </member>
        <member name="P:Blazorise.TabsContent.SelectedPanel">
            <summary>
            Gets or sets currently selected panel name.
            </summary>
        </member>
        <member name="P:Blazorise.TabsContent.SelectedPanelChanged">
            <summary>
            Occurs after the selected panel has changed.
            </summary>
        </member>
        <member name="P:Blazorise.TabsContent.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.TabsContent"/>.
            </summary>
        </member>
        <member name="P:Blazorise.TabsContent.RenderMode">
            <summary>
            Defines how the tabs content will be rendered.
            </summary>
        </member>
        <member name="T:Blazorise.TextEdit">
            <summary>
            Component that allows you to display and edit single-line text.
            </summary>
        </member>
        <member name="M:Blazorise.TextEdit.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextEdit.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextEdit.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextEdit.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextEdit.OnInternalValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextEdit.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TextEdit.Type">
            <summary>
            Gets the string representation of the input role.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.Mode">
            <summary>
            Gets the string representation of the input mode.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TextEdit.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TextEdit.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSTextEditModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.Role">
            <summary>
            Defines the role of the input text.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.InputMode">
            <summary>
            Hints at the type of data that might be entered by the user while editing the element or its contents.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.Text">
            <summary>
            Gets or sets the text inside the input field.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.TextChanged">
            <summary>
            Occurs after text has changed.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.TextExpression">
            <summary>
            Gets or sets an expression that identifies the text value.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.EditMask">
            <summary>
            A string representing a edit mask expression.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.MaskType">
            <summary>
            Specify the mask type used by the editor.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.MaxLength">
            <summary>
            Specifies the maximum number of characters allowed in the input element.
            </summary>
        </member>
        <member name="P:Blazorise.TextEdit.VisibleCharacters">
            <summary>
            The size attribute specifies the visible width, in characters, of an input element. https://www.w3schools.com/tags/att_input_size.asp".
            </summary>
        </member>
        <member name="T:Blazorise.ThemeProvider">
            <summary>
            Main theme provider that will build the CSS variables and styles.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeProvider.GetVariablesTag">
            <summary>
            Gets the html tag that will be inserted into the DOM and that will contain the variables.
            </summary>
            <returns>HTML variables tag element content.</returns>
        </member>
        <member name="M:Blazorise.ThemeProvider.GetStylesTag">
            <summary>
            Gets the html tag that will be inserted into the DOM and that will contain the styles.
            </summary>
            <returns>HTML variables tag element content.</returns>
        </member>
        <member name="P:Blazorise.ThemeProvider.Theme">
            <summary>
            Gets or sets the theme options.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeProvider.WriteVariables">
            <summary>
            If true variables will be written to the page body.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeProvider.ThemeGenerator">
            <summary>
            Gets or sets the <see cref="T:Blazorise.IThemeGenerator">Theme Generator</see> used to build the CSS variables and styles.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeProvider.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ThemeProvider"/>.
            </summary>
        </member>
        <member name="T:Blazorise.TimeEdit`1">
            <summary>
            An editor that displays a time value and allows a user to edit the value.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="T:Blazorise.TimeEdit`1"/> property.</typeparam>
        </member>
        <member name="M:Blazorise.TimeEdit`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.FormatValueAsString(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimeEdit`1.ShowPicker">
            <summary>
            Show a browser picker for the time input.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.TimeEdit`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TimeEdit`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TimeEdit`1.Time">
            <summary>
            Gets or sets the input time value.
            </summary>
        </member>
        <member name="P:Blazorise.TimeEdit`1.TimeChanged">
            <summary>
            Occurs when the time has changed.
            </summary>
        </member>
        <member name="P:Blazorise.TimeEdit`1.TimeExpression">
            <summary>
            Gets or sets an expression that identifies the time field.
            </summary>
        </member>
        <member name="P:Blazorise.TimeEdit`1.Min">
            <summary>
            The earliest time to accept.
            </summary>
        </member>
        <member name="P:Blazorise.TimeEdit`1.Max">
            <summary>
            The latest time to accept.
            </summary>
        </member>
        <member name="P:Blazorise.TimeEdit`1.Step">
            <summary>
            The step attribute specifies the legal number intervals for seconds or milliseconds in a time field (does not apply for hours or minutes).
            
            Example: if step="2", legal numbers could be 0, 2, 4, etc.
            </summary>
            <remarks>
            The step attribute is often used together with the max and min attributes to create a range of legal values.
            </remarks>
        </member>
        <member name="T:Blazorise.TimePicker`1">
            <summary>
            An editor that displays a time value and allows a user to edit the value.
            </summary>
            <typeparam name="TValue">Data-type to be binded by the <see cref="T:Blazorise.TimePicker`1"/> property.</typeparam>
        </member>
        <member name="M:Blazorise.TimePicker`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnFirstAfterRenderAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the element onclick event.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnInternalValueChanged(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.FormatValueAsString(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.ParseValueFromStringAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OpenAsync">
            <summary>
            Opens the time dropdown.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TimePicker`1.CloseAsync">
            <summary>
            Closes the time dropdown.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TimePicker`1.ToggleAsync">
            <summary>
            Shows/opens the time dropdown if its closed, hides/closes it otherwise.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.TimePicker`1.Focus(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.Select(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TimePicker`1.OnLocalizationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the localization changed event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="eventArgs">Data about the localization event.</param>
        </member>
        <member name="P:Blazorise.TimePicker`1.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TimePicker`1.InternalValue">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.TimePicker`1.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSTimePickerModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.LocalizerService">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.Localizer">
            <summary>
            Gets or sets the DI registered <see cref="T:Blazorise.Localization.ITextLocalizer`1"/>.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.DisplayFormatConverter">
            <summary>
            Converts the supplied time format into the internal time format.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.Time">
            <summary>
            Gets or sets the input time value.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.TimeChanged">
            <summary>
            Occurs when the time has changed.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.TimeExpression">
            <summary>
            Gets or sets an expression that identifies the time field.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.Min">
            <summary>
            The earliest time to accept.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.Max">
            <summary>
            The latest time to accept.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.DisplayFormat">
            <summary>
            Defines the display format of the time input.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.TimeAs24hr">
            <summary>
            Displays time picker in 24 hour mode without AM/PM selection when enabled.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.Inline">
            <summary>
            Display the time menu in an always-open state with the inline option.
            </summary>
        </member>
        <member name="P:Blazorise.TimePicker`1.StaticPicker">
            <summary>
            If enabled, the calendar menu will be positioned as static.
            </summary>
        </member>
        <member name="T:Blazorise.ToastProvider">
            <summary>
            A toast provider to be set at the root of your app, providing a programmatic way to invoke toasts with custom content by using the <see cref="P:Blazorise.ToastProvider.ToastService"/>.
            </summary>
        </member>
        <member name="F:Blazorise.ToastProvider.toastInstances">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blazorise.ToastProvider.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastProvider.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastProvider.Show(System.String,System.String,Blazorise.ToastIntent)">
            <summary>
            Show the simple info toast message.
            </summary>
            <param name="title">Toast title.</param>
            <param name="message">Info toast to show.</param>
            <param name="intent">Intent of the toast message.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ToastProvider.Show(System.String,Microsoft.AspNetCore.Components.MarkupString,Blazorise.ToastIntent,Blazorise.ToastInstanceOptions)">
            <summary>
            Show the simple info toast message.
            </summary>
            <param name="title">Toast title.</param>
            <param name="message">Info toast to show.</param>
            <param name="intent">Intent of the toast message.</param>
            <param name="options">Toast options.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ToastProvider.AddToastInstance(Blazorise.ToastInstance)">
            <summary>
            Explicitly adds the toast instance into the <see cref="T:Blazorise.ToastProvider"/>.
            </summary>
            <param name="toastInstance">The toast instance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ToastProvider.RemoveToastInstance(Blazorise.ToastInstance)">
            <summary>
            Explicitly removes the toast instance from the <see cref="T:Blazorise.ToastProvider"/>.
            </summary>
            <param name="toastInstance">The toast instance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ToastProvider.OnToastClosed(Blazorise.ToastInstance)">
            <summary>
            An event that is invoked after the <see cref="T:Blazorise.Toast"/> was closed.
            </summary>
            <param name="toastInstance">The toast instance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.ToastProvider.GetIconName(Blazorise.ToastIntent)">
            <summary>
            Gets the icon name based on a toast intent.
            </summary>
            <param name="intent">Toast intent</param>
            <returns>Returns the icon name.</returns>
        </member>
        <member name="M:Blazorise.ToastProvider.GetIconColor(Blazorise.ToastIntent)">
            <summary>
            Gets the icon color based on a toast intent.
            </summary>
            <param name="intent">Toast intent</param>
            <returns>Returns the icon color.</returns>
        </member>
        <member name="P:Blazorise.ToastProvider.ToastService">
            <summary>
            Gets or sets the <see cref="T:Blazorise.IToastService"/> to which this component is responding.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.Placement">
            <summary>
            Specifies the position of the <see cref="T:Blazorise.Toaster" /> component.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.PlacementStrategy">
            <summary>
            Specifies the placement strategy of the <see cref="T:Blazorise.Toaster" /> component.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.ShowCloseButton">
            <summary>
            Specifies the visibility of the close button.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.ShowIntentIcon">
            <summary>
            Specifies the visibility of the intent icon.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.Opened">
            <summary>
            Occurs after the toast has opened. This is a Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.Closed">
            <summary>
            Occurs after the toast has closed. This is a Global Option.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.Animated">
            <summary>
            Specifies whether the Toast should have an animated transition.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.AnimationDuration">
            <summary>
            The duration of the animation in milliseconds.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.Autohide">
            <summary>
            Automatically hide the toast after the delay.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.AutohideDelay">
            <summary>
            Delay in milliseconds before hiding the toast.
            </summary>
        </member>
        <member name="P:Blazorise.ToastProvider.ChildContent">
            <summary>
            The content to be rendered inside the Toast.
            </summary>
        </member>
        <member name="T:Blazorise.Toast">
            <summary>
            A component to displays temporary content to the user.
            </summary>
        </member>
        <member name="F:Blazorise.Toast.state">
            <summary>
             Holds the state of the Toast component.
            </summary>
        </member>
        <member name="F:Blazorise.Toast.closeReason">
            <summary>
             Holds the reason for the Toast closing.
            </summary>
        </member>
        <member name="F:Blazorise.Toast.closeableAdapter">
            <summary>
             Adapter for the Closeable interface to handle close events.
            </summary>
        </member>
        <member name="E:Blazorise.Toast._Opened">
            <summary>
             Internal event that is triggered when the Toast is opened.
            </summary>
        </member>
        <member name="E:Blazorise.Toast._Closed">
            <summary>
             Internal event that is triggered when the Toast is closed.
            </summary>
        </member>
        <member name="F:Blazorise.Toast.countdownTimer">
            <summary>
            Timer used to countdown the close event.
            </summary>
        </member>
        <member name="M:Blazorise.Toast.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Blazorise.Toast"/> class.
            </summary>
        </member>
        <member name="M:Blazorise.Toast.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.Show">
            <summary>
            Starts the toast opening process.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Toast.Hide">
            <summary>
            Fires the toast dialog closure process.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Toast.Hide(Blazorise.CloseReason)">
            <summary>
            Internal method to hide the toast with reason of closing.
            </summary>
            <param name="closeReason">Reason why toast was closed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Toast.IsSafeToOpen">
            <summary>
            Determines if toast can be opened.
            </summary>
            <returns>True if toast can be opened.</returns>
        </member>
        <member name="M:Blazorise.Toast.IsSafeToClose">
            <summary>
            Determines if toast can be closed.
            </summary>
            <returns>True if toast can be closed.</returns>
        </member>
        <member name="M:Blazorise.Toast.HandleVisibilityStyles(System.Boolean)">
            <summary>
            Handles the styles based on the visibility flag.
            </summary>
            <param name="visible">Toast visibility flag.</param>
        </member>
        <member name="M:Blazorise.Toast.RaiseEvents(System.Boolean)">
            <summary>
            Fires all the events for this toast.
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:Blazorise.Toast.Close(Blazorise.CloseReason)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.SetVisibleState(System.Boolean)">
            <summary>
            Handles the internal visibility states.
            </summary>
            <param name="visible">Visible state.</param>
        </member>
        <member name="M:Blazorise.Toast.BeginAnimation(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Toast.EndAnimation(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Toast.HasToastHeader">
            <summary>
            True if Toast contains the <see cref="T:Blazorise.ToastHeader"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.HasToastBody">
            <summary>
            True if Toast contains the <see cref="T:Blazorise.ToastBody"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.IsVisible">
            <summary>
            Gets a value indicating whether the Toast is visible.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.State">
            <summary>
            Gets the reference to state object for this Toast.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.JSClosableModule">
            <summary>
            The injected JavaScript module for closable operations.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Visible">
            <summary>
            Gets or sets the visibility state of the Toast.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.VisibleChanged">
            <summary>
            Event callback for when the visibility state of the Toast changes.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Opening">
            <summary>
            Callback for handling the opening of the Toast.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Closing">
            <summary>
            Callback for handling the closing of the Toast.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Opened">
            <summary>
            Event callback for when the Toast has been opened.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Closed">
            <summary>
            Event callback for when the Toast has been closed.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Animated">
            <summary>
            Specifies whether the Toast should have an animated transition.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.AnimationDuration">
            <summary>
            The duration of the animation in milliseconds.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.Autohide">
            <summary>
            Automatically hide the toast after the delay.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.AutohideDelay">
            <summary>
            Delay in milliseconds before hiding the toast.
            </summary>
        </member>
        <member name="P:Blazorise.Toast.ChildContent">
            <summary>
            The content to be rendered inside the Toast.
            </summary>
        </member>
        <member name="T:Blazorise.ToastBody">
            <summary>
            A Toast subcomponent to show the toast content.
            </summary>
        </member>
        <member name="M:Blazorise.ToastBody.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ToastBody.ChildContent">
            <summary>
            The content to be rendered inside the ToastBody.
            </summary>
        </member>
        <member name="T:Blazorise.Toaster">
            <summary>
            A component that acts as a container for the <see cref="T:Blazorise.Toast"/> components.
            </summary>
        </member>
        <member name="M:Blazorise.Toaster.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Toaster.Placement">
            <summary>
            Specifies the position of the <see cref="T:Blazorise.Toaster" /> component.
            </summary>
        </member>
        <member name="P:Blazorise.Toaster.PlacementStrategy">
            <summary>
            Specifies the placement strategy of the <see cref="T:Blazorise.Toaster" /> component.
            </summary>
        </member>
        <member name="P:Blazorise.Toaster.ChildContent">
            <summary>
            The content to be rendered inside the <see cref="T:Blazorise.Toaster" /> component.
            </summary>
        </member>
        <member name="T:Blazorise.ToastHeader">
            <summary>
            A Toast subcomponent to show the toast header.
            </summary>
        </member>
        <member name="M:Blazorise.ToastHeader.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ToastHeader.ChildContent">
            <summary>
            The content to be rendered inside the ToastHeader.
            </summary>
        </member>
        <member name="T:Blazorise.ToastInstance">
            <summary>
            Defines the message to show in the <see cref="T:Blazorise.Toast"/>.
            </summary>
        </member>
        <member name="M:Blazorise.ToastInstance.#ctor(Blazorise.ToastProvider,System.String,System.String,Microsoft.AspNetCore.Components.MarkupString,Blazorise.ToastIntent,Blazorise.ToastInstanceOptions)">
            <summary>
            
            </summary>
            <param name="toastProvider"></param>
            <param name="toastId"></param>
            <param name="title"></param>
            <param name="message"></param>
            <param name="intent"></param>
            <param name="toastInstanceOptions"></param>
        </member>
        <member name="P:Blazorise.ToastInstance.ToastProvider">
            <summary>
            The Toast provider.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.ToastRef">
            <summary>
            Tracks the Toast reference.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.ToastId">
            <summary>
            Tracks the Toast id.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.Visible">
            <summary>
            Control's the Toast visibility.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.Title">
            <summary>
            Text to show in the toast header.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.Message">
            <summary>
            Text to show in the toast body.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.Intent">
            <summary>
            Intent of the toast message.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.ToastInstanceOptions">
            <summary>
            Sets the options for ToastProvider.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.Opened">
            <summary>
            Occurs after the toast has opened.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstance.Closed">
            <summary>
            Occurs after the toast has closed.
            </summary>
        </member>
        <member name="T:Blazorise.Tooltip">
            <summary>
            Tooltips display informative text when users hover over, focus on, or tap an element.
            </summary>
        </member>
        <member name="M:Blazorise.Tooltip.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Tooltip.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Tooltip.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Tooltip.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Tooltip.ShouldAutoGenerateId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Tooltip.JSModule">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Modules.IJSTooltipModule"/> instance.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Text">
            <summary>
            Gets or sets a regular tooltip's content. 
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Placement">
            <summary>
            Gets or sets the tooltip location relative to its component.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Multiline">
            <summary>
            Force the multiline display.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.AlwaysActive">
            <summary>
            Always show tooltip, instead of just when hovering over the element.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.ShowArrow">
            <summary>
            Gets or sets the tooltip arrow visibility.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Inline">
            <summary>
            Force inline block instead of trying to detect the element block.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Fade">
            <summary>
            Makes the tooltip fade transition.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.FadeDuration">
            <summary>
            Duration in ms of the fade transition animation.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Trigger">
            <summary>
            Determines the events that cause the tooltip to show.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.TriggerTargetId">
            <summary>
            Which element the trigger event listeners are applied to (instead of the reference element).
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.ZIndex">
            <summary>
            Specifies the z-index CSS on the root popper node.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Interactive">
            <summary>
            Determines if the tooltip has interactive content inside of it, so that it can be hovered over and clicked inside without hiding.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.AppendTo">
            <summary>
            The element to append the tooltip to. If <see cref="P:Blazorise.Tooltip.Interactive"/> = true, the default behavior is appendTo: "parent".
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Tooltip"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Tooltip.Theme">
            <summary>
            Cascaded theme settings.
            </summary>
        </member>
        <member name="T:Blazorise.Blockquote">
            <summary>
            For quoting blocks of content from another source within your document.
            </summary>
        </member>
        <member name="M:Blazorise.Blockquote.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.BlockquoteFooter">
            <summary>
            Element for identifying the source of the quote.
            </summary>
        </member>
        <member name="M:Blazorise.BlockquoteFooter.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Code">
            <summary>
            The <see cref="T:Blazorise.Code"/> component displays its contents styled in a fashion intended to indicate that the text
            is a short fragment of computer code.
            </summary>
        </member>
        <member name="M:Blazorise.Code.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Code.Tag">
            <summary>
            If true, the content will be wrapped with the <c>&lt;</c> and <c>&gt;</c> tags, eg. <c>&lt;button&gt;</c>;.
            </summary>
        </member>
        <member name="T:Blazorise.DescriptionList">
            <summary>
            A description list is a list of items with a description or definition of each item.
            </summary>
        </member>
        <member name="M:Blazorise.DescriptionList.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DescriptionList.Row">
            <summary>
            Specifies that description list will be arranged in a rows and columns.
            </summary>
        </member>
        <member name="T:Blazorise.DescriptionListDefinition">
            <summary>
            Element which specify a term.
            </summary>
        </member>
        <member name="M:Blazorise.DescriptionListDefinition.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DescriptionListDefinition.ColumnSize">
            <summary>
            Determines how much space will be used by the definition inside of the description list row.
            </summary>
        </member>
        <member name="T:Blazorise.DescriptionListTerm">
            <summary>
            Element which specify a term.
            </summary>
        </member>
        <member name="M:Blazorise.DescriptionListTerm.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DescriptionListTerm.ColumnSize">
            <summary>
            Determines how much space will be used by the term inside of the description list row.
            </summary>
        </member>
        <member name="T:Blazorise.DisplayHeading">
            <summary>
            A larger, slightly more opinionated heading style.
            </summary>
        </member>
        <member name="M:Blazorise.DisplayHeading.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DisplayHeading.TagName">
            <summary>
            Gets the name of the heading element based on current <see cref="P:Blazorise.DisplayHeading.Size"/> parameter.
            </summary>
        </member>
        <member name="P:Blazorise.DisplayHeading.Size">
            <summary>
            Gets or sets the display heading size.
            </summary>
        </member>
        <member name="P:Blazorise.DisplayHeading.AlternativeTagName">
            <summary>
            Defines the alternative tag name for the heading element. Default is set to <c>h1</c>.
            </summary>
        </member>
        <member name="T:Blazorise.Heading">
            <summary>
            Heading component is used for titles or subtitles that you want to display on a webpage.
            </summary>
        </member>
        <member name="M:Blazorise.Heading.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Heading.TagName">
            <summary>
            Gets the heading tag name.
            </summary>
        </member>
        <member name="P:Blazorise.Heading.SizeNumber">
            <summary>
            Gets the heading size number.
            </summary>
        </member>
        <member name="P:Blazorise.Heading.Size">
            <summary>
            Gets or sets the heading size.
            </summary>
        </member>
        <member name="P:Blazorise.Heading.AlternativeTagName">
            <summary>
            Defines the alternative tag name for the heading element. Default is set to <c>h1</c>.
            </summary>
        </member>
        <member name="T:Blazorise.Lead">
            <summary>
            A typography component to make a paragraph stand out.
            </summary>
        </member>
        <member name="M:Blazorise.Lead.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.OrderedList">
            <summary>
            An ordered list created using the &lt;ul&gt; element.
            </summary>
        </member>
        <member name="M:Blazorise.OrderedList.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.OrderedList.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.OrderedList.Unstyled">
            <summary>
            Remove the default <c>list-style</c> and left margin on list items (immediate children only).
            </summary>
        </member>
        <member name="P:Blazorise.OrderedList.ListType">
            <summary>
            Defines the type of item markers.
            </summary>
        </member>
        <member name="P:Blazorise.OrderedList.ListStyleImage">
            <summary>
            Defines the marker images for list items.
            </summary>
        </member>
        <member name="T:Blazorise.OrderedListItem">
            <summary>
            An <see cref="T:Blazorise.OrderedList"/> item created using the &lt;li&gt; element.
            </summary>
        </member>
        <member name="T:Blazorise.Paragraph">
            <summary>
            A paragraph always starts on a new line, and is usually a block of text.
            </summary>
        </member>
        <member name="M:Blazorise.Paragraph.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Text">
            <summary>
            Basic typography component with no specific rule.
            </summary>
        </member>
        <member name="T:Blazorise.UnorderedList">
            <summary>
            An unordered list created using the &lt;ul&gt; element.
            </summary>
        </member>
        <member name="M:Blazorise.UnorderedList.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.UnorderedList.BuildStyles(Blazorise.Utilities.StyleBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.UnorderedList.Unstyled">
            <summary>
            Remove the default <c>list-style</c> and left margin on list items (immediate children only).
            </summary>
        </member>
        <member name="P:Blazorise.UnorderedList.ListStyleImage">
            <summary>
            Defines the marker images for list items. The paremeter accepts Base64 encoded string that represents an image, or a URL.
            </summary>
        </member>
        <member name="T:Blazorise.UnorderedListItem">
            <summary>
            An <see cref="T:Blazorise.UnorderedList"/> item created using the &lt;li&gt; element.
            </summary>
        </member>
        <member name="T:Blazorise.IEditContextValidator">
            <summary>
            Validator for <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> that can be used by the third-party applications
            to override default data-annotation validation logic. It can be used for example to provide
            custom localization for each field.
            </summary>
        </member>
        <member name="M:Blazorise.IEditContextValidator.ValidateField(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.ValidationMessageStore,Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,System.Func{System.String,System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Validate the field based on the edit context.
            </summary>
            <param name="editContext">Edit context</param>
            <param name="messages">Holds the list of error messages if any error is found.</param>
            <param name="fieldIdentifier">Identifies the field for validation.</param>
            <param name="messageLocalizer">Handler for message localizer..</param>
        </member>
        <member name="T:Blazorise.EditContextValidator">
            <summary>
            Default Blazorise implementation of <see cref="T:Blazorise.IEditContextValidator"/>.
            </summary>
        </member>
        <member name="F:Blazorise.EditContextValidator.validationMessageLocalizerAttributeFinder">
            <summary>
            Comparer for message localizer.
            </summary>
        </member>
        <member name="F:Blazorise.EditContextValidator.propertyInfoCache">
            <summary>
            Cached list of fields for validation.
            </summary>
        </member>
        <member name="F:Blazorise.EditContextValidator.serviceProvider">
            <summary>
            Service Provider for validation context.
            </summary>
        </member>
        <member name="T:Blazorise.EditContextValidator.ValidationPropertyInfo">
            <summary>
            Helper object to hold all information about validated field.
            </summary>
        </member>
        <member name="P:Blazorise.EditContextValidator.ValidationPropertyInfo.PropertyInfo">
            <summary>
            Gets or sets the property data.
            </summary>
        </member>
        <member name="P:Blazorise.EditContextValidator.ValidationPropertyInfo.ValidationAttributes">
            <summary>
            Gets or sets the array of validation attributes.
            </summary>
        </member>
        <member name="P:Blazorise.EditContextValidator.ValidationPropertyInfo.FormattedValidationAttributes">
            <summary>
            Gets or sets the array of formatted validation attributes for the localization.
            </summary>
        </member>
        <member name="M:Blazorise.EditContextValidator.#ctor(Blazorise.Utilities.IValidationMessageLocalizerAttributeFinder,System.IServiceProvider)">
            <summary>
            A default <see cref="T:Blazorise.EditContextValidator"/> constructor.
            </summary>
            <param name="validationMessageLocalizerAttributeFinder">Comparer for message localizer.</param>
            <param name="serviceProvider">Service provider for custom validators.</param>
        </member>
        <member name="M:Blazorise.EditContextValidator.ValidateField(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.ValidationMessageStore,Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,System.Func{System.String,System.Collections.Generic.IEnumerable{System.String},System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.EditContextValidator.TryGetValidatableProperty(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,Blazorise.EditContextValidator.ValidationPropertyInfo@,System.Boolean)">
            <summary>
            Gets the <see cref="T:Blazorise.EditContextValidator.ValidationPropertyInfo"/> for a given <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/>.
            </summary>
            <param name="fieldIdentifier">Field identifier.</param>
            <param name="validationPropertyInfo">When this method returns it will return the information for the found property.</param>
            <param name="forLocalization">True if method should also handle localization.</param>
            <returns>True if property is found.</returns>
        </member>
        <member name="T:Blazorise.DataAnnotationValidationHandler">
            <summary>
            Default handler implementation to validate <see cref="T:Blazorise.IValidation"/> using the data-annotations.
            </summary>
        </member>
        <member name="M:Blazorise.DataAnnotationValidationHandler.#ctor(Blazorise.IEditContextValidator,Blazorise.BlazoriseOptions)">
            <summary>
            Default constructor.
            </summary>
            <param name="editContextValidator">Reference to the <see cref="T:Blazorise.IEditContextValidator"/> object.</param>
            <param name="options">Reference to the global blazorise options.</param>
        </member>
        <member name="M:Blazorise.DataAnnotationValidationHandler.Validate(Blazorise.IValidation,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.DataAnnotationValidationHandler.ValidateAsync(Blazorise.IValidation,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.DataAnnotationValidationHandler.EditContextValidator">
            <summary>
            Gets the reference to the <see cref="T:Blazorise.IEditContextValidator"/> object.
            </summary>
        </member>
        <member name="P:Blazorise.DataAnnotationValidationHandler.Options">
            <summary>
            Gets the reference to the global blazorise options.
            </summary>
        </member>
        <member name="T:Blazorise.PatternValidationHandler">
            <summary>
            Default handler implementation to validate <see cref="T:Blazorise.IValidation"/> using the regex pattern.
            </summary>
        </member>
        <member name="M:Blazorise.PatternValidationHandler.Validate(Blazorise.IValidation,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PatternValidationHandler.ValidateAsync(Blazorise.IValidation,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ValidatorValidationHandler">
            <summary>
            Default handler implementation to validate <see cref="T:Blazorise.IValidation"/> using the <see cref="T:Blazorise.ValidationRule"/> methods.
            </summary>
        </member>
        <member name="M:Blazorise.ValidatorValidationHandler.Validate(Blazorise.IValidation,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ValidatorValidationHandler.ValidateAsync(Blazorise.IValidation,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.IValidation">
            <summary>
            Base interface for the validation component.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.Status">
            <summary>
            Gets the last received validation status.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.Messages">
            <summary>
            Gets the list of last received validation messages.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.Validator">
            <summary>
            Gets the validator handler attached to this validation.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.AsyncValidator">
            <summary>
            Gets the asynchronous validator handler attached to this validation.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.Pattern">
            <summary>
            Gets the pattern regex attached to this validation.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.FieldIdentifier">
            <summary>
            Gets the field identifier for the validation, if data-annotations is used.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.ParentValidations">
            <summary>
            Gets the parent validation group.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.EditContext">
            <summary>
            Gets the <see cref="P:Blazorise.IValidation.EditContext"/> attached to the parent <see cref="T:Blazorise.Validations"/>.
            </summary>
        </member>
        <member name="P:Blazorise.IValidation.MessageLocalizer">
            <summary>
            Overrides the message that is going to be shown on the <see cref="T:Blazorise.ValidationError"/> or <see cref="T:Blazorise.ValidationSuccess"/>.
            </summary>
        </member>
        <member name="M:Blazorise.IValidation.NotifyValidationStarted">
            <summary>
            Notifies the validation that validation process has being activated.
            </summary>
        </member>
        <member name="M:Blazorise.IValidation.NotifyValidationStatusChanged(Blazorise.ValidationStatus,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notifies the validation with the new status and messages.
            </summary>
            <param name="status">New <see cref="T:Blazorise.ValidationStatus"/>.</param>
            <param name="messages">New error or success message(s).</param>
        </member>
        <member name="M:Blazorise.IValidation.ValidateAsync">
            <summary>
            Runs the asynchronous validation process based on the last available value.
            </summary>
        </member>
        <member name="T:Blazorise.IValidationHandler">
            <summary>
            Main interface used to handle the validation for the given <see cref="T:Blazorise.IValidation"/> and it's value.
            </summary>
        </member>
        <member name="M:Blazorise.IValidationHandler.Validate(Blazorise.IValidation,System.Object)">
            <summary>
            Validates the <see cref="T:Blazorise.IValidation"/> component.
            </summary>
            <param name="validation">Reference to the validation component.</param>
            <param name="newValidationValue">Value to validate.</param>
        </member>
        <member name="M:Blazorise.IValidationHandler.ValidateAsync(Blazorise.IValidation,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously validates the <see cref="T:Blazorise.IValidation"/> component.
            </summary>
            <param name="validation">Reference to the validation component.</param>
            <param name="newValidationValue">Value to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IValidationHandlerFactory">
            <summary>
            Main factory to create <see cref="T:Blazorise.IValidationHandler"/> based on the given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Blazorise.IValidationHandlerFactory.Create(System.Type)">
            <summary>
            Gets the <see cref="T:Blazorise.IValidationHandler"/> for the given <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Type of the <see cref="T:Blazorise.IValidationHandler"/>.</param>
            <returns>Returns the new reference to validation handler.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <see cref="T:System.Type"/> is not registered within <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</exception>
        </member>
        <member name="T:Blazorise.IValidationInput">
            <summary>
            Base validation contract for all inputs that wants to have validation support.
            </summary>
        </member>
        <member name="P:Blazorise.IValidationInput.ValidationValue">
            <summary>
            Gets the input value prepared for the validation check.
            </summary>
            <remarks>
            This is mostly used to handle special inputs where there can be more than one
            value types. For example a Select component can have single-value and multi-value.
            </remarks>
        </member>
        <member name="P:Blazorise.IValidationInput.Disabled">
            <summary>
            Returns true if input is disabled.
            </summary>
        </member>
        <member name="T:Blazorise.Validation">
            <summary>
            Container for input component that can check for different kind of validations.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.inputComponent">
            <summary>
            Reference to the validation input.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.patternString">
            <summary>
            Pattern that is being applied for the validation.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.pattern">
            <summary>
            Regex pattern used to override the validator handler.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.hasPattern">
            <summary>
            Flag that indicates pattern validation has being applied.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.initialized">
            <summary>
            Flag that indicates validation has already being initialized.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.fieldIdentifier">
            <summary>
            Field identifier for the bound value.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.hasFieldIdentifier">
            <summary>
            Flag that indicates field value has being bound.
            </summary>
        </member>
        <member name="E:Blazorise.Validation.ValidationStarted">
            <summary>
            Raises an event that the validation has started.
            </summary>
        </member>
        <member name="E:Blazorise.Validation.ValidationStatusChanged">
            <summary>
            Raises every time a validation state has changed.
            </summary>
        </member>
        <member name="F:Blazorise.Validation.cancellationTokenSource">
            <summary>
            Define the cancellation token.
            </summary>
        </member>
        <member name="M:Blazorise.Validation.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Validation.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Validation.InitializeInput(Blazorise.IValidationInput)">
            <summary>
            Initializes the input component with the specified validation input. It performs an initial validation
            if the mode is set to auto validation and validation on load is enabled.
            </summary>
            <param name="inputComponent">The validation input component to initialize.</param>
            <remarks>
            This method sets the input component and, based on the configuration, may asynchronously validate
            the component's validation value. It also marks the component as initialized.
            </remarks>
        </member>
        <member name="M:Blazorise.Validation.InitializeInputPattern``1(System.String,``0)">
            <summary>
            Initializes or updates the input validation pattern. If the pattern string changes,
            a new regex pattern is created, and the input is re-validated if applicable.
            </summary>
            <typeparam name="T">The type of the value to validate against the pattern.</typeparam>
            <param name="patternString">The regex pattern string for validation.</param>
            <param name="value">The current value of the input to validate against the new pattern.</param>
            <remarks>
            This method optimizes performance by avoiding re-instantiation of the regex pattern if it has not changed.
            It ensures that validation is only re-triggered if the component has been initialized and validation conditions are met.
            </remarks>
        </member>
        <member name="M:Blazorise.Validation.InitializeInputExpression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Initializes or updates the input based on a specified expression. This is primarily used for data-annotation validation.
            </summary>
            <typeparam name="T">The type of the model the expression evaluates to.</typeparam>
            <param name="expression">The expression used to identify the field for validation.</param>
            <remarks>
            This method is designed to work with models and edit contexts, allowing for dynamic validation based on expressions.
            It ensures that validation is only re-triggered if the component has been initialized and validation conditions are met.
            </remarks>
        </member>
        <member name="M:Blazorise.Validation.NotifyInputChanged``1(``0,System.Boolean)">
            <summary>
            Notifies that an input's value has changed and optionally re-validates the input.
            </summary>
            <typeparam name="T">The type of the new value.</typeparam>
            <param name="newExpressionValue">The new value of the expression.</param>
            <param name="overrideNewValue">Determines whether to use the new value for validation or the current input component's validation value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>
            If the edit context is set and a field identifier has been established, this method notifies the edit context
            of the field change. It then conditionally triggers validation based on the component's mode.
            </remarks>
        </member>
        <member name="M:Blazorise.Validation.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Validation.Validate(System.Object)">
            <summary>
            Runs the validation process.
            </summary>
            <param name="newValidationValue">New validation value to validate.</param>
            <returns>Returns the validation result.</returns>
        </member>
        <member name="M:Blazorise.Validation.ValidateAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Validation.ValidateAsync(System.Object)">
            <summary>
            Runs the asynchronous validation process.
            </summary>
            <param name="newValidationValue">New validation value to validate.</param>
            <returns>Returns the validation result.</returns>
        </member>
        <member name="M:Blazorise.Validation.GetValidationHandler">
            <summary>
            Gets the ValidationHandler for this context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Validation.DetermineHandlerType">
            <summary>
            Determines the validation handler based on the priority.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Validation.Clear">
            <summary>
            Clears the validation status.
            </summary>
        </member>
        <member name="M:Blazorise.Validation.NotifyValidationStarted">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Validation.NotifyValidationStatusChanged(Blazorise.ValidationStatus,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.Mode">
            <summary>
            Gets the validation mode.
            </summary>
        </member>
        <member name="P:Blazorise.Validation.ValidateOnLoad">
            <summary>
            Gets the activation mode when in auto mode.
            </summary>
        </member>
        <member name="P:Blazorise.Validation.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.FieldIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.Pattern">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.ValidationHandlerFactory">
            <summary>
            Gets or sets the DI reference for the <see cref="T:Blazorise.IValidationHandlerFactory"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Validation.Status">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.StatusChanged">
            <summary>
            Occurs each time that validation status changed.
            </summary>
        </member>
        <member name="P:Blazorise.Validation.Validator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.AsyncValidator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.MessageLocalizer">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.ParentValidations">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.EditContext">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Validation.UsePattern">
            <summary>
            Forces validation to use regex pattern matching instead of default validator handler.
            </summary>
        </member>
        <member name="P:Blazorise.Validation.HandlerType">
            <summary>
            Forces the custom validation handler to be used while validating the values.
            </summary>
        </member>
        <member name="P:Blazorise.Validation.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Validation"/>.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationError">
            <summary>
            Placeholder for the <see cref="T:Blazorise.Validation"/> error message.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationError.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ValidationError.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ValidationError.OnValidationStatusChanged(System.Object,Blazorise.ValidationStatusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ValidationError.ErrorMessages">
            <summary>
            Custom error messages that will override a default content.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationError.Multiline">
            <summary>
            If true, shows the multiline error messages.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationError.Tooltip">
            <summary>
            If true, shows the tooltip instead of label.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationHandlerFactory">
            <summary>
            Default implementation of <see cref="T:Blazorise.IValidationHandlerFactory"/>.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationHandlerFactory.serviceProvider">
            <summary>
            Used to get the object registered within <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationHandlerFactory.handlers">
            <summary>
            Holds the list of all requested validation handlers.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationHandlerFactory.#ctor(System.IServiceProvider)">
            <summary>
            Default constructor for handler factory.
            </summary>
            <param name="serviceProvider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
        </member>
        <member name="M:Blazorise.ValidationHandlerFactory.Create(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ValidationHandlerFactory.CreateImpl(System.Type)">
            <summary>
            Method used to actually create <see cref="T:Blazorise.IValidationHandler"/>. Can be overridden.
            </summary>
            <param name="handlerType">Type of the <see cref="T:Blazorise.IValidationHandler"/>.</param>
            <returns>Returns the new reference to validation handler.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <see cref="T:System.Type"/> is not registered within <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</exception>
        </member>
        <member name="T:Blazorise.ValidationHandlerType">
            <summary>
            Defines the built-in validation types.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationHandlerType.Validator">
            <summary>
            Cached type of the <see cref="T:Blazorise.ValidatorValidationHandler"/> validation handler.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationHandlerType.Pattern">
            <summary>
            Cached type of the <see cref="T:Blazorise.PatternValidationHandler"/> validation handler.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationHandlerType.DataAnnotation">
            <summary>
            Cached type of the <see cref="T:Blazorise.DataAnnotationValidationHandler"/> validation handler.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationNone">
            <summary>
            Placeholder for the default <see cref="T:Blazorise.Validation"/> state.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationNone.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ValidationRule">
            <summary>
            Predefined set of validation functions.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationRule.IsEqual(System.String,System.String)">
            <summary>
            Compares two strings to see if they are equal.
            </summary>
            <param name="value">First string.</param>
            <param name="compare">Second string.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsLength(System.String,System.Int32,System.Int32)">
            <summary>
            Checks if the given string length is in the given range.
            </summary>
            <param name="value">String to check for the range.</param>
            <param name="min">Minimum length allowed.</param>
            <param name="max">Maximum length allowed.</param>
            <returns>True if string length is in the range.</returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsEmpty(System.String)">
            <summary>
            Check if the string is null or empty.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsNotEmpty(System.String)">
            <summary>
            Check if the string is not null or empty.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsEmail(System.String)">
            <summary>
            Check if the string is an email.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsAlpha(System.String)">
            <summary>
            Check if the string contains only letters (a-zA-Z).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsAlphanumeric(System.String)">
            <summary>
            Check if the string contains only letters and numbers.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsAlphanumericWithUnderscore(System.String)">
            <summary>
            Check if the string contains only letters, numbers and underscore.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsUppercase(System.String)">
            <summary>
            Check if the string is uppercase.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsLowercase(System.String)">
            <summary>
            Check if the string is lowercase.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ValidationRule.IsEmpty(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string is null or empty.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsNotEmpty(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string is not null or empty.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsEmail(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string is an email.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsAlpha(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string contains only letters (a-zA-Z).
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsAlphanumeric(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string contains only letters and numbers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsAlphanumericWithUnderscore(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string contains only letters, numbers and underscore.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsUppercase(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string is uppercase.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsLowercase(Blazorise.ValidatorEventArgs)">
            <summary>
            Check if the string is lowercase.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.None(Blazorise.ValidatorEventArgs)">
            <summary>
            Empty validator.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsChecked(Blazorise.ValidatorEventArgs)">
            <summary>
            Checks if the boolean based input is checked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsSelected(Blazorise.ValidatorEventArgs)">
            <summary>
            Checks if the selection based input has a valid value selected. Valid values are
            anything except for <c>null</c>, <c>string.Empty</c>, or <c>0</c>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Blazorise.ValidationRule.IsFileSelected(Blazorise.ValidatorEventArgs)">
            <summary>
            Checks if the file is selected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Blazorise.Validations">
            <summary>
            Container for multiple validations and an <see cref="P:Blazorise.Validations.EditContext"/>.
            </summary>
        </member>
        <member name="E:Blazorise.Validations.ClearingAll">
            <summary>
            Raises an intent that validations are going to be cleared.
            </summary>
        </member>
        <member name="E:Blazorise.Validations._StatusChanged">
            <summary>
            Event is fired whenever there is a change in validation status.
            </summary>
        </member>
        <member name="F:Blazorise.Validations.validations">
            <summary>
            List of validations placed inside of this container.
            </summary>
        </member>
        <member name="M:Blazorise.Validations.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Validations.ValidateAll">
            <summary>
            Asynchronously runs the validation process for all validations and returns false if any is failed.
            </summary>
        </member>
        <member name="M:Blazorise.Validations.ClearAll">
            <summary>
            Clears all validation statuses.
            </summary>
        </member>
        <member name="M:Blazorise.Validations.NotifyValidationInitialized(Blazorise.IValidation)">
            <summary>
            Notifies the validation system that a new validation component has been initialized and adds it to the list of validations if not already present.
            </summary>
            <param name="validation">The validation component to add.</param>
        </member>
        <member name="M:Blazorise.Validations.NotifyValidationRemoved(Blazorise.IValidation)">
            <summary>
            Notifies the validation system that a validation component is being removed and removes it from the list of validations if present.
            </summary>
            <param name="validation">The validation component to remove.</param>
        </member>
        <member name="M:Blazorise.Validations.NotifyValidationStatusChanged(Blazorise.IValidation)">
            <summary>
            Notifies the validation system that the status of a validation component has changed. This method handles the logic for updating the overall validation status based on the mode (Auto or Manual) and the current validation results.
            </summary>
            <param name="validation">The validation component whose status has changed.</param>
            <remarks>
            In Auto mode, this method triggers the aggregation of validation results and potentially raises a status changed event.
            It is designed to minimize the number of status changed events by aggregating validation results.
            Special consideration is needed to ensure that the status changed event is raised only once per validation cycle,
            even if multiple validations fail.
            </remarks>
        </member>
        <member name="P:Blazorise.Validations.Mode">
            <summary>
            Defines the validation mode for validations inside of this container.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.ValidateOnLoad">
            <summary>
            If set to true, and <see cref="P:Blazorise.Validations.Mode"/> is set to <see cref="F:Blazorise.ValidationMode.Auto"/>, validation will run automatically on page load.
            </summary>
            <remarks>
            When validation is placed inside of modal dialog, the behavior is a little different. 
            Modals are by definition always loaded and are always present in the DOM so no loading is ever happening again
            after the page that contains the modal is first initialized.  Their visibility is controlled by display: none;
            To workaround this, the actual "first load" for modals can be done by re-initializing <see cref="P:Blazorise.Validations.Model"/> parameter. 
            </remarks>
        </member>
        <member name="P:Blazorise.Validations.EditContext">
            <summary>
            Supplies the edit context explicitly. If using this parameter, do not
            also supply <see cref="P:Blazorise.Validations.Model"/>, since the model value will be taken
            from the <see cref="P:Microsoft.AspNetCore.Components.Forms.EditContext.Model"/> property.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.Model">
            <summary>
            Specifies the top-level model object for the form. An edit context will be constructed for this model.
            If using this parameter, do not also supply a value for <see cref="P:Blazorise.Validations.EditContext"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.MissingFieldsErrorMessage">
            <summary>
            Message that will be displayed if any of the validations does not have defined error message.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.HandlerType">
            <summary>
            Defines the default handler type that will be used by the validation, unless it is overriden by <see cref="P:Blazorise.Validation.HandlerType"/> property.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.ValidatedAll">
            <summary>
            Event is fired only after all of the validation are successful.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.StatusChanged">
            <summary>
            Event is fired whenever there is a change in validation status.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.Validations"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.AllValidationsSuccessful">
            <summary>
            Indicates if there are any successful validation.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.HasFailedValidations">
            <summary>
            Indicates if there are any failed validation.
            </summary>
        </member>
        <member name="P:Blazorise.Validations.FailedValidations">
            <summary>
            Gets the filtered list of failed validations.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationSuccess">
            <summary>
            Placeholder for the <see cref="T:Blazorise.Validation"/> success message.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationSuccess.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ValidationSuccess.Tooltip">
            <summary>
            Shows the tooltip instead of label.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationSummary">
            <summary>
            Placeholder for the list of <see cref="T:Blazorise.Validation"/> error messages.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationSummary.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ValidationSummary"/> constructor.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationSummary.BuildClasses(Blazorise.Utilities.ClassBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ValidationSummary.BuildErrorClasses(Blazorise.Utilities.ClassBuilder)">
            <summary>
            Builds the classnames for a summary placeholder.
            </summary>
            <param name="builder">Class builder used to append the classnames.</param>
        </member>
        <member name="M:Blazorise.ValidationSummary.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ValidationSummary.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ValidationSummary.ErrorClassBuilder">
            <summary>
            Summary placeholder class builder.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.ErrorClassNames">
            <summary>
            Gets the classnames for the summary placeholder.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.HasErrorMessages">
            <summary>
            True if any error message has received.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.ErrorMessages">
            <summary>
            Gets the list of error messages.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.Label">
            <summary>
            Label showed before the error messages.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.Errors">
            <summary>
            List of custom error messages for the validations summary.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.ChildContent">
            <summary>
            Specifies the content to be rendered inside this <see cref="T:Blazorise.ValidationSummary"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationSummary.ParentValidations">
            <summary>
            Gets or sets the reference to the parent <see cref="T:Blazorise.Validations"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.Config">
            <summary>
            Extension methods for building the blazorise options.
            </summary>
        </member>
        <member name="M:Blazorise.Config.AddBlazorise(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Blazorise.BlazoriseOptions})">
            <summary>
            Register blazorise and configures the default behaviour.
            </summary>
            <param name="serviceCollection"></param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="P:Blazorise.Config.LocalizationMap">
            <summary>
            Gets the list of localization services that are ready for DI registration.
            </summary>
        </member>
        <member name="P:Blazorise.Config.ValidationMap">
            <summary>
            Gets the list of validation handlers and services that are ready for DI registration.
            </summary>
        </member>
        <member name="P:Blazorise.Config.ServiceMap">
            <summary>
            Gets the list of services that are ready for DI registration.
            </summary>
        </member>
        <member name="P:Blazorise.Config.JSModuleMap">
            <summary>
            Gets the list of JS modules that are ready for DI registration.
            </summary>
        </member>
        <member name="M:Blazorise.Config.AddEmptyProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an empty providers.
            </summary>
            <remarks>
            Generally this should not be used, except when the user wants to use extensions without any providers like Bootstrap or Bulma.
            </remarks>
            <param name="serviceCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Config.AddClassProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Blazorise.IClassProvider})">
            <summary>
            Registers a custom class provider.
            </summary>
            <param name="serviceCollection"></param>
            <param name="classProviderFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Config.AddStyleProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Blazorise.IStyleProvider})">
            <summary>
            Registers a custom style provider.
            </summary>
            <param name="serviceCollection"></param>
            <param name="styleProviderFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Config.AddIconProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Blazorise.IIconProvider})">
            <summary>
            Registers a custom icon provider.
            </summary>
            <param name="serviceCollection"></param>
            <param name="iconProviderFactory"></param>
        </member>
        <member name="T:Blazorise.Abbreviation">
            <summary>
            The <c>abbr</c> tag defines an abbreviation or an acronym, like "HTML", "CSS", "Mr.", "Dr.", "ASAP", "ATM".
            </summary>
        </member>
        <member name="P:Blazorise.Abbreviation.Title">
            <summary>
            The title attribute specifies extra information about an element.
            </summary>
        </member>
        <member name="T:Blazorise.Address">
            <summary>
            The <c>address</c> tag defines the contact information for the author/owner of a document or an article.
            </summary>
        </member>
        <member name="T:Blazorise.Div">
            <summary>
            Component that represents the html div element.
            </summary>
        </member>
        <member name="T:Blazorise.Small">
            <summary>
            Component that represents the html small element.
            </summary>
        </member>
        <member name="T:Blazorise.Span">
            <summary>
            Component that represents the html span element.
            </summary>
        </member>
        <member name="T:Blazorise.Strong">
            <summary>
            Component that represents the html strong element.
            </summary>
        </member>
        <member name="T:Blazorise.AddonType">
            <summary>
            Addon element type.
            </summary>
        </member>
        <member name="F:Blazorise.AddonType.Body">
            <summary>
            Main addon of a field.
            </summary>
        </member>
        <member name="F:Blazorise.AddonType.Start">
            <summary>
            Addon will placed at the start of a field.
            </summary>
        </member>
        <member name="F:Blazorise.AddonType.End">
            <summary>
            Addon will placed at the end of a field.
            </summary>
        </member>
        <member name="T:Blazorise.Alignment">
            <summary>
            Defines the alignment of an element.
            </summary>
        </member>
        <member name="F:Blazorise.Alignment.Default">
            <summary>
            No particular alignment rule will be applied, meaning a default alignment will be used.
            </summary>
        </member>
        <member name="F:Blazorise.Alignment.Start">
            <summary>
            Aligns an element to the left.
            </summary>
        </member>
        <member name="F:Blazorise.Alignment.Center">
            <summary>
            Aligns an element on the center.
            </summary>
        </member>
        <member name="F:Blazorise.Alignment.End">
            <summary>
            Aligns an element to the right.
            </summary>
        </member>
        <member name="T:Blazorise.Background">
            <summary>
            Predefined set of contextual background colors.
            </summary>
        </member>
        <member name="M:Blazorise.Background.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Background.#ctor(Blazorise.Background,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Background.op_Implicit(System.String)~Blazorise.Background">
            <summary>
            Creates the new custom background color based on the supplied enum value.
            </summary>
            <param name="name">Name value of the enum.</param>
        </member>
        <member name="F:Blazorise.Background.Default">
            <summary>
            No color will be applied to an element, meaning it will appear as default to whatever current theme is set to.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Primary">
            <summary>
            Primary color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Secondary">
            <summary>
            Secondary color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Success">
            <summary>
            Success color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Danger">
            <summary>
            Danger color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Warning">
            <summary>
            Warning color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Light">
            <summary>
            Light color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Dark">
            <summary>
            Dark color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:Blazorise.Background.Body">
            <summary>
            Body color. Note that body color must be defined through the <see cref="T:Blazorise.Theme"/> options and
            not every provider supports it!
            </summary>
        </member>
        <member name="T:Blazorise.BarCollapseMode">
            <summary>
            Defines how the bar will be collapsed.
            </summary>
        </member>
        <member name="F:Blazorise.BarCollapseMode.Hide">
            <summary>
            Bar will be hidden completely when collapsed.
            </summary>
        </member>
        <member name="F:Blazorise.BarCollapseMode.Small">
            <summary>
            Bar will be collapsed into smaller version with icons.
            </summary>
        </member>
        <member name="T:Blazorise.BarMenuToggleBehavior">
            <summary>
            Defines how the bar menu will behave when toggled.
            </summary>
        </member>
        <member name="F:Blazorise.BarMenuToggleBehavior.AllowSingleMenu">
            <summary>
            Only a single menu will be toggled at a time.
            </summary>
        </member>
        <member name="F:Blazorise.BarMenuToggleBehavior.AllowMultipleMenus">
            <summary>
            Multiple menus can be toggled at a time.
            </summary>
        </member>
        <member name="T:Blazorise.BarMode">
            <summary>
            Bar orientation and menu display.
            </summary>
        </member>
        <member name="F:Blazorise.BarMode.Horizontal">
            <summary>
            Horizontal navbar with dropdown menus.
            </summary>
        </member>
        <member name="F:Blazorise.BarMode.VerticalPopout">
            <summary>
            Vertical navbar with pop-out menus.
            </summary>
        </member>
        <member name="F:Blazorise.BarMode.VerticalInline">
            <summary>
            Vertical navbar with inline dropdown menus.
            </summary>
        </member>
        <member name="F:Blazorise.BarMode.VerticalSmall">
            <summary>
            Small vertical navbar with pop-out menus.
            </summary>
        </member>
        <member name="T:Blazorise.BarTogglerMode">
            <summary>
            Defines the look and position of the bar toggler.
            </summary>
        </member>
        <member name="F:Blazorise.BarTogglerMode.Normal">
            <summary>
            The standard inline bar toggler. Supported by Horizontal and Vertical BarModes.
            </summary>
        </member>
        <member name="F:Blazorise.BarTogglerMode.Popout">
            <summary>
            A popout style bar toggler. Supported only on Vertical BarModes.
            </summary>
        </member>
        <member name="T:Blazorise.BorderColor">
            <summary>
            Predefined set of contextual border colors.
            </summary>
        </member>
        <member name="P:Blazorise.BorderColor.Name">
            <summary>
            Gets the enum name.
            </summary>
        </member>
        <member name="M:Blazorise.BorderColor.#ctor(System.String)">
            <summary>
            A default target contructor.
            </summary>
            <param name="name">Named value of the enum.</param>
        </member>
        <member name="F:Blazorise.BorderColor.None">
            <summary>
            No color will be applied to an element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Primary">
            <summary>
            Primary color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Secondary">
            <summary>
            Secondary color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Success">
            <summary>
            Success color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Danger">
            <summary>
            Danger color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Warning">
            <summary>
            Warning color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Light">
            <summary>
            Light color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.Dark">
            <summary>
            Dark color.
            </summary>
        </member>
        <member name="F:Blazorise.BorderColor.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="T:Blazorise.BorderRadius">
            <summary>
            Radius styles of an element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.Default">
            <summary>
            No particular rule will be applied, meaning a default borders will be used.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.Rounded">
            <summary>
            Makes the element rounded on all sides.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedTop">
            <summary>
            Makes the element rounded on top side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedEnd">
            <summary>
            Makes the element rounded on right side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedBottom">
            <summary>
            Makes the element rounded on bottom side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedStart">
            <summary>
            Makes the element rounded on left side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedCircle">
            <summary>
            Makes the element as circle shaped.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedPill">
            <summary>
            Makes the element as pill shaped.
            </summary>
        </member>
        <member name="F:Blazorise.BorderRadius.RoundedZero">
            <summary>
            Makes the element without any round corners.
            </summary>
        </member>
        <member name="T:Blazorise.BorderSide">
            <summary>
            Defines the border sides.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSide.All">
            <summary>
            Shows the border on all sides of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSide.Top">
            <summary>
            Shows the border on top side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSide.End">
            <summary>
            Shows the border on right side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSide.Bottom">
            <summary>
            Shows the border on bottom side of the element.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSide.Start">
            <summary>
            Shows the border on left side of the element.
            </summary>
        </member>
        <member name="T:Blazorise.BorderSize">
            <summary>
            Defines the border sizes.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Default">
            <summary>
            No particular size rule will be applied, meaning a default size will be used.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Is0">
            <summary>
            Makes the element borderless.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Is1">
            <summary>
            Borders will be 1px wide.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Is2">
            <summary>
            Borders will be 2px wide.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Is3">
            <summary>
            Borders will be 3px wide.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Is4">
            <summary>
            Borders will be 4px wide.
            </summary>
        </member>
        <member name="F:Blazorise.BorderSize.Is5">
            <summary>
            Borders will be 5px wide.
            </summary>
        </member>
        <member name="T:Blazorise.BreadcrumbMode">
            <summary>
            Defines the breadcrumb activation mode.
            </summary>
        </member>
        <member name="F:Blazorise.BreadcrumbMode.None">
            <summary>
            No activation will be applied, meaning it must be applied manually by setting the <see cref="P:Blazorise.BreadcrumbItem.Active"/> property.
            </summary>
        </member>
        <member name="F:Blazorise.BreadcrumbMode.Auto">
            <summary>
            Breadcrumb items will be activated based on current navigation.
            </summary>
        </member>
        <member name="T:Blazorise.Breakpoint">
            <summary>
            Defines the media breakpoint.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.None">
            <summary>
            Breakpoint is undefined.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Mobile">
            <summary>
            Valid on all devices (extra small)
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.ExtraSmall">
            <summary>
            Valid on all devices.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Tablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Small">
            <summary>
            Breakpoint on tablets.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Desktop">
            <summary>
            Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Medium">
            <summary>
            Breakpoint on desktop.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Widescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.Large">
            <summary>
            Breakpoint on widescreen.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.FullHD">
            <summary>
            Breakpoint on hd screens (extra large).
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.ExtraLarge">
            <summary>
            Breakpoint on hd screens.
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.QuadHD">
            <summary>
            Breakpoint on large 2k desktops (extra extra large).
            </summary>
        </member>
        <member name="F:Blazorise.Breakpoint.ExtraExtraLarge">
            <summary>
            Breakpoint on large desktops.
            </summary>
        </member>
        <member name="T:Blazorise.ButtonsRole">
            <summary>
            Buttons group behaviour.
            </summary>
        </member>
        <member name="F:Blazorise.ButtonsRole.Addons">
            <summary>
            Display buttons as addons.
            </summary>
        </member>
        <member name="F:Blazorise.ButtonsRole.Toolbar">
            <summary>
            Display buttons as toolbar buttons.
            </summary>
        </member>
        <member name="T:Blazorise.ButtonType">
            <summary>
            Defines the button type and behaviour.
            </summary>
        </member>
        <member name="F:Blazorise.ButtonType.Button">
            <summary>
            The button is a clickable button.
            </summary>
        </member>
        <member name="F:Blazorise.ButtonType.Submit">
            <summary>
            The button is a submit button (submits form-data).
            </summary>
        </member>
        <member name="F:Blazorise.ButtonType.Reset">
            <summary>
            The button is a reset button (resets the form-data to its initial values).
            </summary>
        </member>
        <member name="F:Blazorise.ButtonType.Link">
            <summary>
            The button will be rendered as a link but will appear as a regular button.
            </summary>
        </member>
        <member name="T:Blazorise.CarouselDirection">
            <summary>
            Defines the direction of carousel slides.
            </summary>
        </member>
        <member name="F:Blazorise.CarouselDirection.Previous">
            <summary>
            Slides will go in reverse, usually right-to-left.
            </summary>
        </member>
        <member name="F:Blazorise.CarouselDirection.Next">
            <summary>
            Slides will go forward, usually left-to-right.
            </summary>
        </member>
        <member name="T:Blazorise.CharacterCasing">
            <summary>
            Specifies the case of characters in an element.
            </summary>
        </member>
        <member name="F:Blazorise.CharacterCasing.Normal">
            <summary>
            The case of characters is left unchanged.
            </summary>
        </member>
        <member name="F:Blazorise.CharacterCasing.Upper">
            <summary>
            Converts all characters to uppercase.
            </summary>
        </member>
        <member name="F:Blazorise.CharacterCasing.Lower">
            <summary>
            Converts all characters to lowercase.
            </summary>
        </member>
        <member name="F:Blazorise.CharacterCasing.Title">
            <summary>
            Convert first character to uppercase and all other to lowercase.
            </summary>
        </member>
        <member name="T:Blazorise.CloseReason">
            <summary>
            Specifies the reason that a component was closed.
            </summary>
        </member>
        <member name="F:Blazorise.CloseReason.None">
            <summary>
            The cause of the closure was not defined or could not be determined.
            </summary>
        </member>
        <member name="F:Blazorise.CloseReason.UserClosing">
            <summary>
            The user is closing the component through the user interface.
            </summary>
        </member>
        <member name="F:Blazorise.CloseReason.FocusLostClosing">
            <summary>
            The component has lost focus or user has gone out of bounds.
            </summary>
        </member>
        <member name="F:Blazorise.CloseReason.EscapeClosing">
            <summary>
            Pressing the escape key is closing the component.
            </summary>
        </member>
        <member name="T:Blazorise.Color">
            <summary>
            Predefined set of contextual colors.
            </summary>
        </member>
        <member name="M:Blazorise.Color.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Color.#ctor(Blazorise.Color,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Color.op_Implicit(System.String)~Blazorise.Color">
            <summary>
            Creates the new custom color based on the supplied enum value.
            </summary>
            <param name="name">Name value of the enum.</param>
        </member>
        <member name="F:Blazorise.Color.Default">
            <summary>
            No color will be applied to an element, meaning it will appear as default to whatever current theme is set to.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Primary">
            <summary>
            Primary color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Secondary">
            <summary>
            Secondary color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Success">
            <summary>
            Success color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Danger">
            <summary>
            Danger color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Warning">
            <summary>
            Warning color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Light">
            <summary>
            Light color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Dark">
            <summary>
            Dark color.
            </summary>
        </member>
        <member name="F:Blazorise.Color.Link">
            <summary>
            Link color.
            </summary>
        </member>
        <member name="T:Blazorise.ColumnWidth">
            <summary>
            Defines number of columns to occupy in the grid.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Default">
            <summary>
            No sizing, meaning the default spacing will be used.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is1">
            <summary>
            One column width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is2">
            <summary>
            Two columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is3">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is4">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is5">
            <summary>
            Five columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is6">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is7">
            <summary>
            Seven columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is8">
            <summary>
            Eight columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is9">
            <summary>
            Nine columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is10">
            <summary>
            Ten columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is11">
            <summary>
            Eleven columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Is12">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Full">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Half">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Third">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Quarter">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="F:Blazorise.ColumnWidth.Auto">
            <summary>
            Fill all available space.
            </summary>
        </member>
        <member name="T:Blazorise.ControlRole">
            <summary>
            Custom input roles.
            </summary>
        </member>
        <member name="F:Blazorise.ControlRole.None">
            <summary>
            Control doesn't have any special rule.
            </summary>
        </member>
        <member name="F:Blazorise.ControlRole.Check">
            <summary>
            Control is meant to be used with <see cref="T:Blazorise.Check`1"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.ControlRole.Radio">
            <summary>
            Control is meant to be used with <see cref="T:Blazorise.Radio`1"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.ControlRole.Switch">
            <summary>
            Control is meant to be used with <see cref="T:Blazorise.Switch`1"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.ControlRole.File">
            <summary>
            Control is meant to be used with <see cref="T:Blazorise.FileEdit"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.ControlRole.Text">
            <summary>
            Control is meant to be used with <see cref="T:Blazorise.TextEdit"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.CurrencySymbolPlacement">
            <summary>
            Placement of the currency sign, relative to the number shown (as a prefix or a suffix).
            </summary>
        </member>
        <member name="F:Blazorise.CurrencySymbolPlacement.Prefix">
            <summary>
            The symbol will be placed at the beginning of the number.
            </summary>
        </member>
        <member name="F:Blazorise.CurrencySymbolPlacement.Suffix">
            <summary>
            The symbol will be placed at the end of the number.
            </summary>
        </member>
        <member name="T:Blazorise.Cursor">
            <summary>
            Defines the mouse cursor.
            </summary>
        </member>
        <member name="F:Blazorise.Cursor.Default">
            <summary>
            Default behaviour, nothing will be changed.
            </summary>
        </member>
        <member name="F:Blazorise.Cursor.Pointer">
            <summary>
            The cursor is a pointer and indicates a link.
            </summary>
        </member>
        <member name="T:Blazorise.DateInputMode">
            <summary>
            Hints at the type of data that might be entered by the user while editing the <see cref="T:Blazorise.DateEdit`1"/> component.
            </summary>
        </member>
        <member name="F:Blazorise.DateInputMode.Date">
            <summary>
            Only date is allowed to be entered.
            </summary>
        </member>
        <member name="F:Blazorise.DateInputMode.DateTime">
            <summary>
            Both date and time are allowed to be entered.
            </summary>
        </member>
        <member name="F:Blazorise.DateInputMode.Month">
            <summary>
            Allowed to select only year and month.
            
            Note that not all browser supports this mode, see <see href="https://caniuse.com/input-datetime" /> for more info.
            </summary>
        </member>
        <member name="T:Blazorise.DateInputSelectionMode">
            <summary>
            Defines the mode in which the dates can be selected.
            </summary>
        </member>
        <member name="F:Blazorise.DateInputSelectionMode.Single">
            <summary>
            Only one date can be selected.
            </summary>
        </member>
        <member name="F:Blazorise.DateInputSelectionMode.Range">
            <summary>
            Allowed to select a range of dates.
            </summary>
        </member>
        <member name="F:Blazorise.DateInputSelectionMode.Multiple">
            <summary>
            Allowed to select multiple dates.
            </summary>
        </member>
        <member name="T:Blazorise.Direction">
            <summary>
            Direction of an dropdown menu.
            </summary>
        </member>
        <member name="F:Blazorise.Direction.Default">
            <summary>
            A default direction will be used, in most cases it is the same as <see cref="F:Blazorise.Direction.Down"/>.
            </summary>
        </member>
        <member name="F:Blazorise.Direction.Down">
            <summary>
            Trigger dropdown menus bellow an element (default behaviour).
            </summary>
        </member>
        <member name="F:Blazorise.Direction.Up">
            <summary>
            Trigger dropdown menus above an element.
            </summary>
        </member>
        <member name="F:Blazorise.Direction.End">
            <summary>
            Trigger dropdown menus to the end of an element.
            </summary>
        </member>
        <member name="F:Blazorise.Direction.Start">
            <summary>
            Trigger dropdown menus to the start of an element.
            </summary>
        </member>
        <member name="T:Blazorise.DisplayDirection">
            <summary>
            Defines direction of flex items in a flex container.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayDirection.Default">
            <summary>
            Direction will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayDirection.Row">
            <summary>
            The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayDirection.Column">
            <summary>
            The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayDirection.ReverseRow">
            <summary>
            Behaves the same as row but the main-start and main-end points are permuted.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayDirection.ReverseColumn">
            <summary>
            Behaves the same as column but the main-start and main-end are permuted.
            </summary>
        </member>
        <member name="T:Blazorise.DisplayHeadingSize">
            <summary>
            Defines the display heading size.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayHeadingSize.Is1">
            <summary>
            Represents the h1 size element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayHeadingSize.Is2">
            <summary>
            Represents the h2 size element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayHeadingSize.Is3">
            <summary>
            Represents the h3 size element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayHeadingSize.Is4">
            <summary>
            Represents the h4 size element.
            </summary>
        </member>
        <member name="T:Blazorise.DisplayType">
            <summary>
            The display property specifies the display behavior (the type of rendering box) of an element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.Always">
            <summary>
            Display will not be applied, meaning an element will be visible.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.None">
            <summary>
            Hides an element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.Block">
            <summary>
            Displays an element as a block element.
            </summary>
            <remarks>
            It starts on a new line, and takes up the whole width.
            </remarks>
        </member>
        <member name="F:Blazorise.DisplayType.Inline">
            <summary>
            Displays an element as an inline element.
            </summary>
            <remarks>
            Any height and width properties will have no effect.
            </remarks>
        </member>
        <member name="F:Blazorise.DisplayType.InlineBlock">
            <summary>
            Displays an element as an inline-level block container.
            </summary>
            <remarks>
            The element itself is formatted as an inline element, but you can apply height and width values
            </remarks>
        </member>
        <member name="F:Blazorise.DisplayType.Flex">
            <summary>
            Displays an element as a block-level flex container.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.InlineFlex">
            <summary>
            Displays an element as an inline-level flex container.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.Table">
            <summary>
            Let the element behave like a table element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.TableRow">
            <summary>
            Let the element behave like a tr element.
            </summary>
        </member>
        <member name="F:Blazorise.DisplayType.TableCell">
            <summary>
            Let the element behave like a td element.
            </summary>
        </member>
        <member name="T:Blazorise.DividerType">
            <summary>
            Specifies horizontal line style variants.
            </summary>
        </member>
        <member name="F:Blazorise.DividerType.Solid">
            <summary>
            Horizontal line will be solid.
            </summary>
        </member>
        <member name="F:Blazorise.DividerType.Dashed">
            <summary>
            Horizontal line will be dashed.
            </summary>
        </member>
        <member name="F:Blazorise.DividerType.Dotted">
            <summary>
            Horizontal line will be dotted.
            </summary>
        </member>
        <member name="F:Blazorise.DividerType.TextContent">
            <summary>
            Horizontal line be separated by text.
            </summary>
        </member>
        <member name="T:Blazorise.DropdownPositionStrategy">
            <summary>
            Defines the position strategy for the floating component.
            </summary>
        </member>
        <member name="F:Blazorise.DropdownPositionStrategy.Absolute">
            <summary>
            The floating element is positioned relative to its nearest positioned ancestor. With most layouts, this usually requires the browser to do the least work when updating the position.
            </summary>
        </member>
        <member name="F:Blazorise.DropdownPositionStrategy.Fixed">
            <summary>
            The floating element is positioned relative to its nearest containing block (usually the viewport). This is useful when the reference element is also fixed to reduce jumpiness with positioning while scrolling.
            </summary>
        </member>
        <member name="T:Blazorise.Enumeration`1">
            <summary>
            Base class for all complex enums.
            </summary>
            <typeparam name="T">Type of the complex enum.</typeparam>
        </member>
        <member name="M:Blazorise.Enumeration`1.#ctor(System.String)">
            <summary>
            A default enumeration contructor.
            </summary>
            <param name="name">Named value of the enum.</param>
        </member>
        <member name="M:Blazorise.Enumeration`1.#ctor(`0,System.String)">
            <summary>
            A default enumeration contructor that accepts the parent object.
            </summary>
            <param name="parentEnumeration">Parent enumeration.</param>
            <param name="name">Named value of the enum.</param>
        </member>
        <member name="M:Blazorise.Enumeration`1.BuildName">
            <summary>
            Build an enumeration while traversing up to the parent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blazorise.Enumeration`1.Name">
            <summary>
            Gets the enum name.
            </summary>
        </member>
        <member name="P:Blazorise.Enumeration`1.ParentEnumeration">
            <summary>
            Gets the parent enumeration.
            </summary>
        </member>
        <member name="T:Blazorise.FigureSize">
            <summary>
            Defines a figure size in pixels.
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Default">
            <summary>
            No sizing will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is16x16">
            <summary>
            16x16px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is24x24">
            <summary>
            24x24px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is32x32">
            <summary>
            32x32px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is48x48">
            <summary>
            48x48px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is64x64">
            <summary>
            64x64px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is96x96">
            <summary>
            96x96px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is128x128">
            <summary>
            128x128px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is256x256">
            <summary>
            256x256px
            </summary>
        </member>
        <member name="F:Blazorise.FigureSize.Is512x512">
            <summary>
            512x512px
            </summary>
        </member>
        <member name="T:Blazorise.FileInvalidReason">
            <summary>
            Provides information about the invalid file.
            </summary>
        </member>
        <member name="F:Blazorise.FileInvalidReason.None">
            <summary>
            File is Valid.
            </summary>
        </member>
        <member name="F:Blazorise.FileInvalidReason.MaxLengthExceeded">
            <summary>
            File Max Lenght was exceeded.
            </summary>
        </member>
        <member name="F:Blazorise.FileInvalidReason.UnexpectedBufferChunkLength">
            <summary>
            The length of the buffer was not as expected when reading the file into the buffer.
            </summary>
        </member>
        <member name="F:Blazorise.FileInvalidReason.TaskCancelled">
            <summary>
            Task was cancelled.
            </summary>
        </member>
        <member name="F:Blazorise.FileInvalidReason.UnexpectedError">
            <summary>
            Unexpected error, please see exception.
            </summary>
        </member>
        <member name="T:Blazorise.FilePickerShowMode">
            <summary>
            Sets the FilePicker's Show Mode
            </summary>
        </member>
        <member name="F:Blazorise.FilePickerShowMode.List">
            <summary>
            Files will be listed under the file input.
            </summary>
        </member>
        <member name="F:Blazorise.FilePickerShowMode.Dropdown">
            <summary>
            Files will be inside a dropdown menu.
            </summary>
        </member>
        <member name="T:Blazorise.FlexAlignContent">
            <summary>
            The align-content property aligns a flex container’s lines within the
            flex container when there is extra space in the cross-axis.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignContent.Default">
            <summary>
            Align-content will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignContent.Start">
            <summary>
            Lines are packed toward the start of the flex container.
            </summary>
            <remarks>
            The cross-start edge of the first line in the flex container is placed flush
            with the cross-start edge of the flex container, and each subsequent line
            is placed flush with the preceding line.
            </remarks>
        </member>
        <member name="F:Blazorise.FlexAlignContent.End">
            <summary>
            Lines are packed toward the end of the flex container.
            </summary>
            <remarks>
            The cross-end edge of the last line is placed flush with the cross-end edge
            of the flex container, and each preceding line is placed flush with the subsequent line.
            </remarks>
        </member>
        <member name="F:Blazorise.FlexAlignContent.Center">
            <summary>
            Lines are packed toward the center of the flex container.
            </summary>
            <remarks>
            The lines in the flex container are placed flush with each other and aligned in the center
            of the flex container, with equal amounts of space between the cross-start content edge of
            the flex container and the first line in the flex container, and between the cross-end
            content edge of the flex container and the last line in the flex container.
            (If the leftover free-space is negative, the lines will overflow equally in both directions.)
            </remarks>
        </member>
        <member name="F:Blazorise.FlexAlignContent.Between">
            <summary>
            Lines are evenly distributed in the flex container.
            </summary>
            <remarks>
            If the leftover free-space is negative or there is only a single flex line in the flex container,
            this value is identical to flex-start. Otherwise, the cross-start edge of the first line in the flex
            container is placed flush with the cross-start content edge of the flex container, the cross-end edge
            of the last line in the flex container is placed flush with the cross-end content edge of the flex
            container, and the remaining lines in the flex container are distributed so that the spacing between
            any two adjacent lines is the same.
            </remarks>
        </member>
        <member name="F:Blazorise.FlexAlignContent.Around">
            <summary>
            Lines are evenly distributed in the flex container, with half-size spaces on either end.
            </summary>
            <remarks>
            If the leftover free-space is negative this value is identical to center.
            Otherwise, the lines in the flex container are distributed such that the spacing between
            any two adjacent lines is the same, and the spacing between the first/last lines and the
            flex container edges is half the size of the spacing between flex lines.
            </remarks>
        </member>
        <member name="F:Blazorise.FlexAlignContent.Stretch">
            <summary>
            Lines stretch to take up the remaining space.
            </summary>
            <remarks>
            If the leftover free-space is negative, this value is identical to flex-start.
            Otherwise, the free-space is split equally between all of the lines, increasing their cross size.
            </remarks>
        </member>
        <member name="T:Blazorise.FlexAlignItems">
            <summary>
            Defines the default behavior for how flex items are laid out along the cross axis on the current line.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignItems.Default">
            <summary>
            Align-items will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignItems.Start">
            <summary>
            Items are placed at the start of the cross axis. The difference between these is subtle,
            and is about respecting the flex-direction rules or the writing-mode rules.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignItems.End">
            <summary>
            Items are placed at the end of the cross axis. The difference again is subtle and is about
            respecting flex-direction rules vs. writing-mode rules.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignItems.Center">
            <summary>
            Items are centered in the cross-axis.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignItems.Baseline">
            <summary>
            Items are aligned such as their baselines align.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignItems.Stretch">
            <summary>
            Stretch to fill the container (still respect min-width/max-width).
            </summary>
        </member>
        <member name="T:Blazorise.FlexAlignSelf">
            <summary>
            Allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.Default">
            <summary>
            Align-self will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.Auto">
            <summary>
            Equals to the value specified in the align-items property for the flex container (it’s the default value).
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.Start">
            <summary>
            Items are placed at the start of the cross axis. The difference between these is subtle,
            and is about respecting the flex-direction rules or the writing-mode rules.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.End">
            <summary>
            Items are placed at the end of the cross axis. The difference again is subtle and is about
            respecting flex-direction rules vs. writing-mode rules.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.Center">
            <summary>
            Items are centered in the cross-axis.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.Baseline">
            <summary>
            Items are aligned such as their baselines align.
            </summary>
        </member>
        <member name="F:Blazorise.FlexAlignSelf.Stretch">
            <summary>
            Stretch to fill the container (still respect min-width/max-width).
            </summary>
        </member>
        <member name="T:Blazorise.FlexDirection">
            <summary>
            Defines direction of flex items in a flex container.
            </summary>
        </member>
        <member name="F:Blazorise.FlexDirection.Default">
            <summary>
            Direction will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexDirection.Row">
            <summary>
            The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.
            </summary>
        </member>
        <member name="F:Blazorise.FlexDirection.Column">
            <summary>
            The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode.
            </summary>
        </member>
        <member name="F:Blazorise.FlexDirection.ReverseRow">
            <summary>
            Behaves the same as row but the main-start and main-end points are permuted.
            </summary>
        </member>
        <member name="F:Blazorise.FlexDirection.ReverseColumn">
            <summary>
            Behaves the same as column but the main-start and main-end are permuted.
            </summary>
        </member>
        <member name="T:Blazorise.FlexGrowShrink">
            <summary>
            The flex-grow property sets the flex grow factor to the provided <see cref="T:Blazorise.FlexGrowShrinkSize">number</see>.
            </summary>
        </member>
        <member name="F:Blazorise.FlexGrowShrink.Default">
            <summary>
            No grow or shrink will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexGrowShrink.Grow">
            <summary>
            Grow rule will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexGrowShrink.Shrink">
            <summary>
            Shrink rule will be applied.
            </summary>
        </member>
        <member name="T:Blazorise.FlexGrowShrinkSize">
            <summary>
            If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children.
            </summary>
        </member>
        <member name="F:Blazorise.FlexGrowShrinkSize.Default">
            <summary>
            No size will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexGrowShrinkSize.Is0">
            <summary>
            Element uses a default space.
            </summary>
        </member>
        <member name="F:Blazorise.FlexGrowShrinkSize.Is1">
            <summary>
            Element uses all available space it can.
            </summary>
        </member>
        <member name="T:Blazorise.FlexJustifyContent">
            <summary>
            Defines the alignment along the main axis.
            </summary>
        </member>
        <member name="F:Blazorise.FlexJustifyContent.Default">
            <summary>
            Justify-content will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexJustifyContent.Start">
            <summary>
            Items are packed toward the start of the flex-direction.
            </summary>
        </member>
        <member name="F:Blazorise.FlexJustifyContent.End">
            <summary>
            Items are packed toward the end of the flex-direction.
            </summary>
        </member>
        <member name="F:Blazorise.FlexJustifyContent.Center">
            <summary>
            Items are centered along the line.
            </summary>
        </member>
        <member name="F:Blazorise.FlexJustifyContent.Between">
            <summary>
            Items are evenly distributed in the line; first item is on the start line, last item on the end line.
            </summary>
        </member>
        <member name="F:Blazorise.FlexJustifyContent.Around">
            <summary>
            Items are evenly distributed in the line with equal space around them.
            Note that visually the spaces aren't equal, since all the items have equal space on both sides.
            </summary>
            <remarks>
            The first item will have one unit of space against the container edge, but two units of space
            between the next item because that next item has its own spacing that applies.
            </remarks>
        </member>
        <member name="T:Blazorise.FlexOrder">
            <summary>
            Controls the order in which items appear in the flex container.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Default">
            <summary>
            No order will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is0">
            <summary>
            A default order.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is1">
            <summary>
            An element will be shown as first item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is2">
            <summary>
            An element will be shown as second item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is3">
            <summary>
            An element will be shown as third item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is4">
            <summary>
            An element will be shown as fourth item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is5">
            <summary>
            An element will be shown as fifth item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is6">
            <summary>
            An element will be shown as sixth item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is7">
            <summary>
            An element will be shown as seventh item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is8">
            <summary>
            An element will be shown as eight item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is9">
            <summary>
            An element will be shown as ninth item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is10">
            <summary>
            An element will be shown as tenth item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is11">
            <summary>
            An element will be shown as eleventh item.
            </summary>
        </member>
        <member name="F:Blazorise.FlexOrder.Is12">
            <summary>
            An element will be shown as twelveth item.
            </summary>
        </member>
        <member name="T:Blazorise.FlexType">
            <summary>
            The flex types for the display property specifies the display behavior (the type of rendering box) of an element.
            </summary>
        </member>
        <member name="F:Blazorise.FlexType.Default">
            <summary>
            Display will not be defined.
            </summary>
        </member>
        <member name="F:Blazorise.FlexType.Flex">
            <summary>
            Displays an element as a block-level flex container.
            </summary>
        </member>
        <member name="F:Blazorise.FlexType.InlineFlex">
            <summary>
            Displays an element as an inline-level flex container.
            </summary>
        </member>
        <member name="T:Blazorise.FlexWrap">
            <summary>
            Controls whether the flex container is single-line or multi-line.
            </summary>
        </member>
        <member name="F:Blazorise.FlexWrap.Default">
            <summary>
            No wrap will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.FlexWrap.Wrap">
            <summary>
            Flex items will wrap onto multiple lines, from top to bottom.
            </summary>
        </member>
        <member name="F:Blazorise.FlexWrap.ReverseWrap">
            <summary>
            Flex items will wrap onto multiple lines from bottom to top.
            </summary>
        </member>
        <member name="F:Blazorise.FlexWrap.NoWrap">
            <summary>
            All flex items will be on one line.
            </summary>
        </member>
        <member name="T:Blazorise.Float">
            <summary>
            Floats an element to the left or right, or disable floating.
            </summary>
        </member>
        <member name="F:Blazorise.Float.Default">
            <summary>
            Don't float on all viewport sizes.
            </summary>
        </member>
        <member name="F:Blazorise.Float.Start">
            <summary>
            Float start on all viewport sizes.
            </summary>
        </member>
        <member name="F:Blazorise.Float.End">
            <summary>
            Float end on all viewport sizes.
            </summary>
        </member>
        <member name="T:Blazorise.GapSide">
            <summary>
            Defines the side on which to apply the gap spacing.
            </summary>
        </member>
        <member name="F:Blazorise.GapSide.None">
            <summary>
            No side.
            </summary>
        </member>
        <member name="F:Blazorise.GapSide.X">
            <summary>
            Left and right side.
            </summary>
        </member>
        <member name="F:Blazorise.GapSide.Y">
            <summary>
            Top and bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.GapSide.All">
            <summary>
            All 4 sides of the element.
            </summary>
        </member>
        <member name="T:Blazorise.GapSize">
            <summary>
            Utilities for controlling gutters between grid and flexbox items.
            </summary>
        </member>
        <member name="F:Blazorise.GapSize.Is0">
            <summary>
            For classes that eliminate the gap by setting it to 0.
            </summary>
        </member>
        <member name="F:Blazorise.GapSize.Is1">
            <summary>
            (by default) for classes that set the gap to size 1.
            </summary>
        </member>
        <member name="F:Blazorise.GapSize.Is2">
            <summary>
            (by default) for classes that set the gap to size 2.
            </summary>
        </member>
        <member name="F:Blazorise.GapSize.Is3">
            <summary>
            (by default) for classes that set the gap to size 3.
            </summary>
        </member>
        <member name="F:Blazorise.GapSize.Is4">
            <summary>
            (by default) for classes that set the gap to size 4.
            </summary>
        </member>
        <member name="F:Blazorise.GapSize.Is5">
            <summary>
            (by default) for classes that set the gap to size 5.
            </summary>
        </member>
        <member name="T:Blazorise.GridColumnsSize">
            <summary>
            Defines the number of columns to show in a grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Default">
            <summary>
            Nothing will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are1">
            <summary>
            One column per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are2">
            <summary>
            Two columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are3">
            <summary>
            Three columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are4">
            <summary>
            Four columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are5">
            <summary>
            Five columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are6">
            <summary>
            Six columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are7">
            <summary>
            Seven columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are8">
            <summary>
            Eight columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are9">
            <summary>
            Nine columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are10">
            <summary>
            Ten columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are11">
            <summary>
            Eleven columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.GridColumnsSize.Are12">
            <summary>
            Twelve columns per row.
            </summary>
        </member>
        <member name="T:Blazorise.GridRowsSize">
            <summary>
            Defines the number of rows to show in a grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Default">
            <summary>
            Nothing will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Are1">
            <summary>
            One row per grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Are2">
            <summary>
            Two rows per grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Are3">
            <summary>
            Three rows per grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Are4">
            <summary>
            Four rows per grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Are5">
            <summary>
            Five rows per grid.
            </summary>
        </member>
        <member name="F:Blazorise.GridRowsSize.Are6">
            <summary>
            Six rows per grid.
            </summary>
        </member>
        <member name="T:Blazorise.HeadingSize">
            <summary>
            Defines the heading size.
            </summary>
        </member>
        <member name="F:Blazorise.HeadingSize.Is1">
            <summary>
            Represents the h1 size element.
            </summary>
        </member>
        <member name="F:Blazorise.HeadingSize.Is2">
            <summary>
            Represents the h2 size element.
            </summary>
        </member>
        <member name="F:Blazorise.HeadingSize.Is3">
            <summary>
            Represents the h3 size element.
            </summary>
        </member>
        <member name="F:Blazorise.HeadingSize.Is4">
            <summary>
            Represents the h4 size element.
            </summary>
        </member>
        <member name="F:Blazorise.HeadingSize.Is5">
            <summary>
            Represents the h5 size element.
            </summary>
        </member>
        <member name="F:Blazorise.HeadingSize.Is6">
            <summary>
            Represents the h6 size element.
            </summary>
        </member>
        <member name="T:Blazorise.IconSize">
            <summary>
            Defines the size of an <see cref="T:Blazorise.Icon"/> element.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.Default">
            <summary>
            The icon size will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.ExtraSmall">
            <summary>
            The icon will be size 0.75em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.Small">
            <summary>
            The icon will be size 0.875em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.Large">
            <summary>
            The icon will be size 1.33em (Also applies vertical-align: -25%).
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x2">
            <summary>
            The icon will be size 2em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x3">
            <summary>
            The icon will be size 3em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x4">
            <summary>
            The icon will be size 4em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x5">
            <summary>
            The icon will be size 5em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x6">
            <summary>
            The icon will be size 6em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x7">
            <summary>
            The icon will be size 7em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x8">
            <summary>
            The icon will be size 8em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x9">
            <summary>
            The icon will be size 9em.
            </summary>
        </member>
        <member name="F:Blazorise.IconSize.x10">
            <summary>
            The icon will be size 10em.
            </summary>
        </member>
        <member name="T:Blazorise.IconStyle">
            <summary>
            Represents a different look of the same icons.
            </summary>
        </member>
        <member name="F:Blazorise.IconStyle.Solid">
            <summary>
            Icon will be filled with single-color.
            </summary>
        </member>
        <member name="F:Blazorise.IconStyle.Regular">
            <summary>
            Icon will be outlined with single-color.
            </summary>
        </member>
        <member name="F:Blazorise.IconStyle.Light">
            <summary>
            Icon will be slightly lighter.
            </summary>
        </member>
        <member name="F:Blazorise.IconStyle.DuoTone">
            <summary>
            Icon will be shown in two-color tones.
            </summary>
        </member>
        <member name="T:Blazorise.InputMaskCaretPosition">
            <summary>
            Positioning of the caret on click.
            </summary>
        </member>
        <member name="F:Blazorise.InputMaskCaretPosition.None">
            <summary>
            Nothing will happen.
            </summary>
        </member>
        <member name="F:Blazorise.InputMaskCaretPosition.LastValidPosition">
            <summary>
            Based on the last valid position (default).
            </summary>
        </member>
        <member name="F:Blazorise.InputMaskCaretPosition.RadixFocus">
            <summary>
            Position caret to radixpoint on initial click.
            </summary>
        </member>
        <member name="F:Blazorise.InputMaskCaretPosition.Select">
            <summary>
            Select the whole input.
            </summary>
        </member>
        <member name="F:Blazorise.InputMaskCaretPosition.Ignore">
            <summary>
            Ignore the click and continue the mask.
            </summary>
        </member>
        <member name="T:Blazorise.JumbotronTitleSize">
            <summary>
            Defines the jumbotron title size.
            </summary>
        </member>
        <member name="F:Blazorise.JumbotronTitleSize.Is1">
            <summary>
            Represents the h1 size element.
            </summary>
        </member>
        <member name="F:Blazorise.JumbotronTitleSize.Is2">
            <summary>
            Represents the h2 size element.
            </summary>
        </member>
        <member name="F:Blazorise.JumbotronTitleSize.Is3">
            <summary>
            Represents the h3 size element.
            </summary>
        </member>
        <member name="F:Blazorise.JumbotronTitleSize.Is4">
            <summary>
            Represents the h4 size element.
            </summary>
        </member>
        <member name="T:Blazorise.JustifyContent">
            <summary>
            Aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
            </summary>
        </member>
        <member name="F:Blazorise.JustifyContent.Default">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="F:Blazorise.JustifyContent.Start">
            <summary>
            Items are positioned at the beginning of the container.
            </summary>
        </member>
        <member name="F:Blazorise.JustifyContent.End">
            <summary>
            Items are positioned at the end of the container.
            </summary>
        </member>
        <member name="F:Blazorise.JustifyContent.Center">
            <summary>
            Items are positioned at the center of the container.
            </summary>
        </member>
        <member name="F:Blazorise.JustifyContent.Between">
            <summary>
            Items are positioned with space between the lines.
            </summary>
        </member>
        <member name="F:Blazorise.JustifyContent.Around">
            <summary>
            Items are positioned with space before, between, and after the lines.
            </summary>
        </member>
        <member name="T:Blazorise.LabelType">
            <summary>
            Defines the styling of a label for the component it belongs to.
            </summary>
        </member>
        <member name="F:Blazorise.LabelType.None">
            <summary>
            No additional styling is applied.
            </summary>
        </member>
        <member name="F:Blazorise.LabelType.Check">
            <summary>
            Style for check box will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.LabelType.Radio">
            <summary>
            Style for radio will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.LabelType.Switch">
            <summary>
            Style for switch will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.LabelType.File">
            <summary>
            Style for file input will be applied.
            </summary>
        </member>
        <member name="T:Blazorise.ListGroupMode">
            <summary>
            Defines the <see cref="T:Blazorise.ListGroup"/> behavior.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupMode.Static">
            <summary>
            List group will act as a static list.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupMode.Selectable">
            <summary>
            List group will act on clicking the items.
            </summary>
        </member>
        <member name="T:Blazorise.ListGroupSelectionMode">
            <summary>
            Specifies the selection mode for the list group.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupSelectionMode.Single">
            <summary>
            Allows only a single item to be selected.
            </summary>
        </member>
        <member name="F:Blazorise.ListGroupSelectionMode.Multiple">
            <summary>
            Allows multiple items to be selected.
            </summary>
        </member>
        <member name="T:Blazorise.MaskType">
            <summary>
            Lists values that specify the type of mask used by an editor.
            </summary>
        </member>
        <member name="F:Blazorise.MaskType.None">
            <summary>
            Specifies that the mask feature is disabled.
            </summary>
        </member>
        <member name="F:Blazorise.MaskType.Numeric">
            <summary>
            Specifies that the editor should accept numeric values and that the mask string must use the Numeric format syntax.
            </summary>
        </member>
        <member name="F:Blazorise.MaskType.DateTime">
            <summary>
            Specifies that the editor should accept date/time values and that the mask string must use the DateTime format syntax.
            </summary>
        </member>
        <member name="F:Blazorise.MaskType.RegEx">
            <summary>
            Specifies that the mask should be created using full-functional regular expressions.
            </summary>
        </member>
        <member name="T:Blazorise.Match">
            <summary>
            Modifies the URL matching behavior for a link.
            </summary>
        </member>
        <member name="F:Blazorise.Match.Prefix">
            <summary>
            Specifies that the link should be active when it matches any prefix of the current URL.
            </summary>
        </member>
        <member name="F:Blazorise.Match.All">
            <summary>
            Specifies that the link should be active when it matches the entire current URL.
            </summary>
        </member>
        <member name="F:Blazorise.Match.Custom">
            <summary>
            Specifies that the link should be active when it matches the supplied <see cref="P:Blazorise.BaseLinkComponent.CustomMatch"/> method callback.
            </summary>
        </member>
        <member name="T:Blazorise.MessageType">
            <summary>
            Defines the possible UI message types with predefined actions.
            </summary>
        </member>
        <member name="F:Blazorise.MessageType.Info">
            <summary>
            Shows the simple info message.
            </summary>
        </member>
        <member name="F:Blazorise.MessageType.Success">
            <summary>
            Shows the success message.
            </summary>
        </member>
        <member name="F:Blazorise.MessageType.Warning">
            <summary>
            Shows the warning message.
            </summary>
        </member>
        <member name="F:Blazorise.MessageType.Error">
            <summary>
            Shows the error message.
            </summary>
        </member>
        <member name="F:Blazorise.MessageType.Confirmation">
            <summary>
            Prompt the user with the confirmation dialog.
            </summary>
        </member>
        <member name="T:Blazorise.ModalRenderMode">
            <summary>
            Defines how the modal content will be rendered.
            </summary>
        </member>
        <member name="F:Blazorise.ModalRenderMode.Default">
            <summary>
            Always renders the modal html content to the DOM.
            </summary>
        </member>
        <member name="F:Blazorise.ModalRenderMode.LazyLoad">
            <summary>
            Lazy loads modal, meaning the modal html content will only be rendered/loaded the first time it is visited.
            </summary>
        </member>
        <member name="F:Blazorise.ModalRenderMode.LazyReload">
            <summary>
            Lazy loads modal everytime, meaning the modal html content will have it's html re-rendered to the DOM everytime.
            </summary>
        </member>
        <member name="T:Blazorise.ModalSize">
            <summary>
            Changes the size of the modal.
            </summary>
        </member>
        <member name="F:Blazorise.ModalSize.Default">
            <summary>
            Default modal size.
            </summary>
        </member>
        <member name="F:Blazorise.ModalSize.Small">
            <summary>
            Small modal.
            </summary>
        </member>
        <member name="F:Blazorise.ModalSize.Large">
            <summary>
            Large modal.
            </summary>
        </member>
        <member name="F:Blazorise.ModalSize.ExtraLarge">
            <summary>
            Extra large modal.
            </summary>
        </member>
        <member name="F:Blazorise.ModalSize.Fullscreen">
            <summary>
            Defines the modal that covers the user viewport.
            </summary>
        </member>
        <member name="T:Blazorise.MouseButton">
            <summary>
            Defines values that specify the buttons on a mouse device.
            </summary>
        </member>
        <member name="F:Blazorise.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Blazorise.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Blazorise.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="T:Blazorise.NotificationLocation">
            <summary>
            Defines the notification location.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationLocation.Center">
            <summary>
            Default behavior, shows the notification on the center.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationLocation.Start">
            <summary>
            Show the notification on the left side of the screen.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationLocation.End">
            <summary>
            Show the notification on the right side of the screen.
            </summary>
        </member>
        <member name="T:Blazorise.NotificationType">
            <summary>
            Defines the possible UI notification types with predefined actions.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationType.Info">
            <summary>
            Shows the simple info message.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationType.Success">
            <summary>
            Shows the success message.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationType.Warning">
            <summary>
            Shows the warning message.
            </summary>
        </member>
        <member name="F:Blazorise.NotificationType.Error">
            <summary>
            Shows the error message.
            </summary>
        </member>
        <member name="T:Blazorise.NumericAllowDecimalPadding">
            <summary>
            Defines if the decimal places should be padded with zeroes.
            </summary>
        </member>
        <member name="F:Blazorise.NumericAllowDecimalPadding.Always">
            <summary>
            Always pad decimals with zeros (ie. '12.3400').
            </summary>
        </member>
        <member name="F:Blazorise.NumericAllowDecimalPadding.Never">
            <summary>
            Never pad with zeros (ie. '12.34').
            </summary>
        </member>
        <member name="F:Blazorise.NumericAllowDecimalPadding.Floats">
            <summary>
            Pad with zeroes only when there are decimals (ie. '12' and '12.3400').
            </summary>
        </member>
        <member name="T:Blazorise.NumericMinMaxLimitsOverride">
            <summary>
            Override the minimum and maximum limits.
            </summary>
        </member>
        <member name="F:Blazorise.NumericMinMaxLimitsOverride.Ignore">
            <summary>
            Ignores both minimumValue &amp; maximumValue.
            </summary>
        </member>
        <member name="F:Blazorise.NumericMinMaxLimitsOverride.DoNotOverride">
            <summary>
            The minimumValue and maximumValue limits are respected.
            </summary>
        </member>
        <member name="F:Blazorise.NumericMinMaxLimitsOverride.Ceiling">
            <summary>
            Adheres to maximumValue and ignores minimumValue settings.
            </summary>
        </member>
        <member name="F:Blazorise.NumericMinMaxLimitsOverride.Floor">
            <summary>
            Adheres to minimumValue and ignores maximumValue settings.
            </summary>
        </member>
        <member name="T:Blazorise.NumericRoundingMethod">
            <summary>
            Defines the rounding method to use.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.HalfUpSymmetric">
            <summary>
            Round-Half-Up Symmetric (default).
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.HalfUpAsymmetric">
            <summary>
            Round-Half-Up Asymmetric.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.HalfDownSymmetric">
            <summary>
            Round-Half-Down Symmetric.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.HalfDownAsymmetric">
            <summary>
            Round-Half-Down Asymmetric.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.HalfEvenBankersRounding">
            <summary>
            Round-Half-Even "Bankers Rounding".
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.UpRoundAwayFromZero">
            <summary>
            Round Up "Round-Away-From-Zero".
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.DownRoundTowardZero">
            <summary>
            Round Down "Round-Toward-Zero" - same as truncate.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.ToCeilingTowardPositiveInfinity">
            <summary>
            Round to Ceiling "Toward Positive Infinity".
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.ToFloorTowardNegativeInfinity">
            <summary>
            Round to Floor "Toward Negative Infinity".
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.ToNearest05">
            <summary>
            Rounds to the nearest .05 => same as <see cref="F:Blazorise.NumericRoundingMethod.ToNearest05Alt"/> used in 1.9X and still valid.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.ToNearest05Alt">
            <summary>
            Rounds up to next .05.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.UpToNext05">
            <summary>
            Rounds up to next .05.
            </summary>
        </member>
        <member name="F:Blazorise.NumericRoundingMethod.DownToNext05">
            <summary>
            Rounds down to next .05.
            </summary>
        </member>
        <member name="T:Blazorise.NumericWheelOn">
            <summary>
            Defines when the wheel event will increment or decrement the element value.
            </summary>
        </member>
        <member name="F:Blazorise.NumericWheelOn.Focus">
            <summary>
            When `wheelOn` is set to `'focus'`, you can use the 'Shift' modifier key while using the mouse wheel in order to temporarily activate the increment/decrement feature even if the element is not focused.
            </summary>
        </member>
        <member name="F:Blazorise.NumericWheelOn.Hover">
            <summary>
            When `wheelOn` is set to `'hover'`, you can use the 'Shift' modifier key while using the mouse wheel in order to temporarily disable the increment/decrement feature even if the element is not hovered.
            </summary>
        </member>
        <member name="T:Blazorise.OrderedListType">
            <summary>
            Defines the type of the list item marker.
            </summary>
        </member>
        <member name="F:Blazorise.OrderedListType.Default">
            <summary>
            The list items will be numbered with numbers (default).
            </summary>
        </member>
        <member name="F:Blazorise.OrderedListType.LowerAlpha">
            <summary>
            The list items will be numbered with lowercase letters.
            </summary>
        </member>
        <member name="F:Blazorise.OrderedListType.LowerRoman">
            <summary>
            	The list items will be numbered with lowercase roman numbers.
            </summary>
        </member>
        <member name="F:Blazorise.OrderedListType.UpperAlpha">
            <summary>
            The list items will be numbered with uppercase letters.
            </summary>
        </member>
        <member name="F:Blazorise.OrderedListType.UpperRoman">
            <summary>
            The list items will be numbered with uppercase roman numbers.
            </summary>
        </member>
        <member name="T:Blazorise.Orientation">
            <summary>
            Defines the orientation of the elements.
            </summary>
        </member>
        <member name="F:Blazorise.Orientation.Horizontal">
            <summary>
            Elements will be stacked horizontally.
            </summary>
        </member>
        <member name="F:Blazorise.Orientation.Vertical">
            <summary>
            Elements will be stacked vertically.
            </summary>
        </member>
        <member name="T:Blazorise.OverflowType">
            <summary>
            The overflow property controls what happens to content that is too big to fit into an area.
            </summary>
        </member>
        <member name="F:Blazorise.OverflowType.Default">
            <summary>
            No overflow will be applied
            </summary>
        </member>
        <member name="F:Blazorise.OverflowType.Visible">
            <summary>
            The overflow is not clipped. The content renders outside the element's box.
            </summary>
        </member>
        <member name="F:Blazorise.OverflowType.Hidden">
            <summary>
            The overflow is clipped, and the rest of the content will be invisible.
            </summary>
        </member>
        <member name="F:Blazorise.OverflowType.Scroll">
            <summary>
            The overflow is clipped, and a scrollbar is added to see the rest of the content.
            </summary>
        </member>
        <member name="F:Blazorise.OverflowType.Auto">
            <summary>
            Similar to scroll, but it adds scrollbars only when necessary.
            </summary>
        </member>
        <member name="T:Blazorise.Placement">
            <summary>
            Defines the placement of an element.
            </summary>
        </member>
        <member name="F:Blazorise.Placement.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Blazorise.Placement.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.Placement.Start">
            <summary>
            Start side.
            </summary>
        </member>
        <member name="F:Blazorise.Placement.End">
            <summary>
            End side.
            </summary>
        </member>
        <member name="T:Blazorise.PositionEdgeType">
            <summary>
            Defines the type of position edge type.
            </summary>
        </member>
        <member name="F:Blazorise.PositionEdgeType.Default">
            <summary>
            Edge type will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.PositionEdgeType.Top">
            <summary>
            For the vertical top position.
            </summary>
        </member>
        <member name="F:Blazorise.PositionEdgeType.Start">
            <summary>
            For the horizontal start position.
            </summary>
        </member>
        <member name="F:Blazorise.PositionEdgeType.Bottom">
            <summary>
            For the vertical bottom position.
            </summary>
        </member>
        <member name="F:Blazorise.PositionEdgeType.End">
            <summary>
            For the horizontal end position.
            </summary>
        </member>
        <member name="T:Blazorise.PositionTranslateType">
            <summary>
            Defines the element translation based on its center.
            </summary>
        </member>
        <member name="F:Blazorise.PositionTranslateType.None">
            <summary>
            Translation will not be applied to an element.
            </summary>
        </member>
        <member name="F:Blazorise.PositionTranslateType.Middle">
            <summary>
            Translate on both X and Y coordinates.
            </summary>
        </member>
        <member name="F:Blazorise.PositionTranslateType.MiddleX">
            <summary>
            Translate on X coordinate.
            </summary>
        </member>
        <member name="F:Blazorise.PositionTranslateType.MiddleY">
            <summary>
            Translate on Y coordinate.
            </summary>
        </member>
        <member name="T:Blazorise.PositionType">
            <summary>
            Type of positions allowed for the fluent position builder.
            </summary>
        </member>
        <member name="F:Blazorise.PositionType.Default">
            <summary>
            Position will not be applied to an element.
            </summary>
        </member>
        <member name="F:Blazorise.PositionType.Static">
            <summary>
            An element is not positioned in any special way; it is always positioned according to the normal flow of the page.
            </summary>
        </member>
        <member name="F:Blazorise.PositionType.Relative">
            <summary>
            An element is positioned relative to its normal position.
            </summary>
        </member>
        <member name="F:Blazorise.PositionType.Absolute">
            <summary>
            An element is positioned relative to the nearest positioned ancestor (instead of positioned relative to the
            viewport, like fixed).
            </summary>
        </member>
        <member name="F:Blazorise.PositionType.Fixed">
            <summary>
            An element is positioned relative to the viewport, which means it always stays in the
            same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
            </summary>
        </member>
        <member name="F:Blazorise.PositionType.Sticky">
            <summary>
            An element is positioned based on the user's scroll position.
            </summary>
        </member>
        <member name="T:Blazorise.RowColumnsSize">
            <summary>
            Defines the number of columns to show in a row.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Default">
            <summary>
            Nothing will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Are1">
            <summary>
            One column per row.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Are2">
            <summary>
            Two columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Are3">
            <summary>
            Three columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Are4">
            <summary>
            Four columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Are5">
            <summary>
            Five columns per row.
            </summary>
        </member>
        <member name="F:Blazorise.RowColumnsSize.Are6">
            <summary>
            Six columns per row.
            </summary>
        </member>
        <member name="T:Blazorise.Screenreader">
            <summary>
            Screen reader visibility.
            </summary>
        </member>
        <member name="F:Blazorise.Screenreader.Always">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Blazorise.Screenreader.Only">
            <summary>
            Hide an element to all devices except screen readers.
            </summary>
        </member>
        <member name="F:Blazorise.Screenreader.OnlyFocusable">
            <summary>
            Show the element again when it’s focused.
            </summary>
        </member>
        <member name="T:Blazorise.Shadow">
            <summary>
            Add or remove shadows to elements with box-shadow utilities.
            </summary>
        </member>
        <member name="F:Blazorise.Shadow.None">
            <summary>
            Shadow will not be applied.
            </summary>
        </member>
        <member name="F:Blazorise.Shadow.Remove">
            <summary>
            Disables any shadow on the element.
            </summary>
        </member>
        <member name="F:Blazorise.Shadow.Default">
            <summary>
            Regular shadow.
            </summary>
        </member>
        <member name="F:Blazorise.Shadow.Small">
            <summary>
            Small shadow.
            </summary>
        </member>
        <member name="F:Blazorise.Shadow.Large">
            <summary>
            Larger shadow.
            </summary>
        </member>
        <member name="T:Blazorise.Side">
            <summary>
            Defines the side on which to apply the spacing.
            </summary>
        </member>
        <member name="F:Blazorise.Side.None">
            <summary>
            No side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.Start">
            <summary>
            Start side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.End">
            <summary>
            End side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.X">
            <summary>
            Left and right side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.Y">
            <summary>
            Top and bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.Side.All">
            <summary>
            All 4 sides of the element.
            </summary>
        </member>
        <member name="T:Blazorise.Size">
            <summary>
            Defines an element size.
            </summary>
        </member>
        <member name="F:Blazorise.Size.Default">
            <summary>
            No particular size rule will be applied, meaning a default size will be used.
            </summary>
        </member>
        <member name="F:Blazorise.Size.ExtraSmall">
            <summary>
            Makes an element extra small size.
            </summary>
        </member>
        <member name="F:Blazorise.Size.Small">
            <summary>
            Makes an element small size.
            </summary>
        </member>
        <member name="F:Blazorise.Size.Medium">
            <summary>
            Makes an element medium size.
            </summary>
        </member>
        <member name="F:Blazorise.Size.Large">
            <summary>
            Makes an element large.
            </summary>
        </member>
        <member name="F:Blazorise.Size.ExtraLarge">
            <summary>
            Makes an element extra large.
            </summary>
        </member>
        <member name="T:Blazorise.SizingSize">
            <summary>
            Predefined list of element sizes.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Default">
            <summary>
            No size will be defined.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Is25">
            <summary>
            An element will occupy 25% of its parent space.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Is33">
            <summary>
            An element will occupy third of its parent space.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Is50">
            <summary>
            An element will occupy 50% of its parent space.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Is66">
            <summary>
            An element will occupy two thirds of its parent space.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Is75">
            <summary>
            An element will occupy 75% of its parent space.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Is100">
            <summary>
            An element will occupy 100% of its parent space.
            </summary>
        </member>
        <member name="F:Blazorise.SizingSize.Auto">
            <summary>
            The browser calculates the size.
            </summary>
        </member>
        <member name="T:Blazorise.SizingType">
            <summary>
            Defines the sizing types.
            </summary>
        </member>
        <member name="F:Blazorise.SizingType.None">
            <summary>
            No sizing will be defined.
            </summary>
        </member>
        <member name="F:Blazorise.SizingType.Width">
            <summary>
            Sizing will be defined for the element width attribute(s).
            </summary>
        </member>
        <member name="F:Blazorise.SizingType.Height">
            <summary>
            Sizing will be defined for the element height attribute(s).
            </summary>
        </member>
        <member name="T:Blazorise.SortDirection">
            <summary>
            Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:Blazorise.SortDirection.Default">
            <summary>
            No sorting will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.SortDirection.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Blazorise.SortDirection.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Blazorise.Spacing">
            <summary>
            Defines the spacing property.
            </summary>
        </member>
        <member name="F:Blazorise.Spacing.None">
            <summary>
            No spacing will be used.
            </summary>
        </member>
        <member name="F:Blazorise.Spacing.Margin">
            <summary>
            Use the margin spacing.
            </summary>
        </member>
        <member name="F:Blazorise.Spacing.Padding">
            <summary>
            Use the padding spacing.
            </summary>
        </member>
        <member name="T:Blazorise.SpacingSize">
            <summary>
            Defines all supported spacing(margin and padding) sizes.
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.Is0">
            <summary>
            For classes that eliminate the margin or padding by setting it to 0.
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.Is1">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .25
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.Is2">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .5
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.Is3">
            <summary>
            (by default) for classes that set the margin or padding to $spacer
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.Is4">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 1.5
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.Is5">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 3
            </summary>
        </member>
        <member name="F:Blazorise.SpacingSize.IsAuto">
            <summary>
            For classes that set the margin to auto.
            </summary>
        </member>
        <member name="T:Blazorise.TableColumnFixedPosition">
            <summary>
            Defines the column fixed position within the table.
            </summary>
        </member>
        <member name="F:Blazorise.TableColumnFixedPosition.None">
            <summary>
            No fixed rules will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.TableColumnFixedPosition.Start">
            <summary>
            Column will be fixed to the beginning of the table.
            </summary>
        </member>
        <member name="F:Blazorise.TableColumnFixedPosition.End">
            <summary>
            Column will be fixed to the end of the table.
            </summary>
        </member>
        <member name="T:Blazorise.TableResizeMode">
            <summary>
            Defines the resize mode of the Table's columns.
            </summary>
        </member>
        <member name="F:Blazorise.TableResizeMode.Header">
            <summary>
            The Table can only be resized from the columns header.
            </summary>
        </member>
        <member name="F:Blazorise.TableResizeMode.Columns">
            <summary>
            The Table can be resized from the entire column area.
            </summary>
        </member>
        <member name="T:Blazorise.TabPosition">
            <summary>
            Defines the placement of a tab items.
            </summary>
        </member>
        <member name="F:Blazorise.TabPosition.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Blazorise.TabPosition.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.TabPosition.Start">
            <summary>
            Start side.
            </summary>
        </member>
        <member name="F:Blazorise.TabPosition.End">
            <summary>
            End side.
            </summary>
        </member>
        <member name="T:Blazorise.TabsRenderMode">
            <summary>
            Defines the Tabs Mode.
            </summary>
        </member>
        <member name="F:Blazorise.TabsRenderMode.Default">
            <summary>
            Always renders the tabs html content to the DOM.
            </summary>
        </member>
        <member name="F:Blazorise.TabsRenderMode.LazyLoad">
            <summary>
            Lazy loads tabs, meaning each tab will only be rendered/loaded the first time it is visited.
            </summary>
        </member>
        <member name="F:Blazorise.TabsRenderMode.LazyReload">
            <summary>
            Lazy loads tabs everytime, meaning only the active tab will have it's html rendered to the DOM.
            </summary>
        </member>
        <member name="T:Blazorise.Target">
            <summary>
            The target attribute specifies where to open the linked document.
            </summary>
        </member>
        <member name="M:Blazorise.Target.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Target.#ctor(Blazorise.Target,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Target.op_Implicit(System.String)~Blazorise.Target">
            <summary>
            Creates the new custom target based on the supplied enum value.
            </summary>
            <param name="name">Name value of the enum.</param>
        </member>
        <member name="F:Blazorise.Target.Default">
            <summary>
            No target will be applied. Usually this is the same as <see cref="F:Blazorise.Target.Self"/>.
            </summary>
        </member>
        <member name="F:Blazorise.Target.Self">
            <summary>
            Opens the linked document in the same frame as it was clicked (this is default).
            </summary>
        </member>
        <member name="F:Blazorise.Target.Blank">
            <summary>
            Opens the linked document in a new window or tab.
            </summary>
        </member>
        <member name="F:Blazorise.Target.Parent">
            <summary>
            Opens the linked document in the parent frame.
            </summary>
        </member>
        <member name="F:Blazorise.Target.Top">
            <summary>
            Opens the linked document in the full body of the window.
            </summary>
        </member>
        <member name="M:Blazorise.Target.Frame(System.String)">
            <summary>
            Opens the linked document in the named iframe.
            </summary>
            <param name="name">Name of the frame element.</param>
            <returns>Returns the new target.</returns>
        </member>
        <member name="T:Blazorise.TextAlignment">
            <summary>
            Defines the text alignment.
            </summary>
        </member>
        <member name="F:Blazorise.TextAlignment.Default">
            <summary>
            No alignment will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.TextAlignment.Start">
            <summary>
            Aligns the text to the start.
            </summary>
        </member>
        <member name="F:Blazorise.TextAlignment.End">
            <summary>
            Aligns the text to the end.
            </summary>
        </member>
        <member name="F:Blazorise.TextAlignment.Center">
            <summary>
            Centers the text.
            </summary>
        </member>
        <member name="F:Blazorise.TextAlignment.Justified">
            <summary>
            Stretches the lines so that each line has equal width.
            </summary>
        </member>
        <member name="T:Blazorise.TextColor">
            <summary>
            Predefined set of contextual text colors.
            </summary>
        </member>
        <member name="M:Blazorise.TextColor.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextColor.#ctor(Blazorise.TextColor,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.TextColor.op_Implicit(System.String)~Blazorise.TextColor">
            <summary>
            Creates the new custom text color based on the supplied enum value.
            </summary>
            <param name="name">Name value of the enum.</param>
        </member>
        <member name="F:Blazorise.TextColor.Default">
            <summary>
            No color will be applied to an element, meaning it will appear as default to whatever current theme is set to.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Primary">
            <summary>
            Primary color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Secondary">
            <summary>
            Secondary color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Success">
            <summary>
            Success color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Danger">
            <summary>
            Danger color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Warning">
            <summary>
            Warning color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Light">
            <summary>
            Light color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Dark">
            <summary>
            Dark color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Body">
            <summary>
            Body color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Muted">
            <summary>
            Muted color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.Black50">
            <summary>
            Black text with 50% opacity on white background.
            </summary>
        </member>
        <member name="F:Blazorise.TextColor.White50">
            <summary>
            White text with 50% opacity on black background.
            </summary>
        </member>
        <member name="T:Blazorise.TextInputMode">
            <summary>
            Specifies what kind of input mechanism would be most helpful for users entering content.
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.None">
            <summary>
            The user agent should not display a virtual keyboard. This keyword is useful for content that renders its own keyboard control.
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Text">
            <summary>
            The user agent should display a virtual keyboard capable of text input in the user's locale.
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Tel">
            <summary>
            The user agent should display a virtual keyboard capable of telephone number input. This should including keys for the digits 0 to 9, the "#" character, and the "*" character. In some locales, this can also include alphabetic mnemonic labels (e.g., in the US, the key labeled "2" is historically also labeled with the letters A, B, and C).
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Url">
            <summary>
            The user agent should display a virtual keyboard capable of text input in the user's locale, with keys for aiding in the input of URLs, such as that for the "/" and "." characters and for quick input of strings commonly found in domain names such as "www." or ".com".
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Email">
            <summary>
            The user agent should display a virtual keyboard capable of text input in the user's locale, with keys for aiding in the input of e-mail addresses, such as that for the "@" character and the "." character.
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Numeric">
            <summary>
            The user agent should display a virtual keyboard capable of numeric input. This keyword is useful for PIN entry.
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Decimal">
            <summary>
            The user agent should display a virtual keyboard capable of fractional numeric input. Numeric keys and the format separator for the locale should be shown.
            </summary>
        </member>
        <member name="F:Blazorise.TextInputMode.Search">
            <summary>
            The user agent should display a virtual keyboard optimized for search.
            </summary>
        </member>
        <member name="T:Blazorise.TextOverflow">
            <summary>
            Determines how the text will behave when it is larger than a parent container.
            </summary>
        </member>
        <member name="F:Blazorise.TextOverflow.Default">
            <summary>
            No overflow will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.TextOverflow.Wrap">
            <summary>
            Text will wrap into a new line when it reaches the end of container.
            </summary>
        </member>
        <member name="F:Blazorise.TextOverflow.NoWrap">
            <summary>
            Prevents text from wrapping.
            </summary>
        </member>
        <member name="F:Blazorise.TextOverflow.Truncate">
            <summary>
            Truncate the text with an ellipsis.
            </summary>
        </member>
        <member name="T:Blazorise.TextRole">
            <summary>
            Defines the behaviour of the text input.
            </summary>
        </member>
        <member name="F:Blazorise.TextRole.Text">
            <summary>
            Defines a default text input field.
            </summary>
        </member>
        <member name="F:Blazorise.TextRole.Email">
            <summary>
            Used for input fields that should contain an e-mail address.
            </summary>
        </member>
        <member name="F:Blazorise.TextRole.Password">
            <summary>
            Defines a password field.
            </summary>
        </member>
        <member name="F:Blazorise.TextRole.Url">
            <summary>
            Used for input fields that should contain a URL address.
            </summary>
        </member>
        <member name="F:Blazorise.TextRole.Search">
            <summary>
            Define a search field (like a site search, or Google search).
            </summary>
        </member>
        <member name="F:Blazorise.TextRole.Telephone">
            <summary>
            Define a field for entering a telephone number.
            </summary>
        </member>
        <member name="T:Blazorise.TextSizeType">
            <summary>
            Defines the text size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Default">
            <summary>
            No particular size rule will be applied, meaning a default size will be used.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.ExtraSmall">
            <summary>
            Makes an element text extra small size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Small">
            <summary>
            Makes an element text small size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Medium">
            <summary>
            Makes an element text medium size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Large">
            <summary>
            Makes an element text large.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.ExtraLarge">
            <summary>
            Makes an element text extra large.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Heading1">
            <summary>
            Matches the element text size with the h1 text size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Heading2">
            <summary>
            Matches the element text size with the h2 text size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Heading3">
            <summary>
            Matches the element text size with the h3 text size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Heading4">
            <summary>
            Matches the element text size with the h4 text size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Heading5">
            <summary>
            Matches the element text size with the h5 text size.
            </summary>
        </member>
        <member name="F:Blazorise.TextSizeType.Heading6">
            <summary>
            Matches the element text size with the h6 text size.
            </summary>
        </member>
        <member name="T:Blazorise.TextTransform">
            <summary>
            Defines the text transformation.
            </summary>
        </member>
        <member name="F:Blazorise.TextTransform.Default">
            <summary>
            No capitalization. The text renders as it is. This is default.
            </summary>
        </member>
        <member name="F:Blazorise.TextTransform.Lowercase">
            <summary>
            Transforms all characters to lowercase.
            </summary>
        </member>
        <member name="F:Blazorise.TextTransform.Uppercase">
            <summary>
            Transforms all characters to uppercase.
            </summary>
        </member>
        <member name="F:Blazorise.TextTransform.Capitalize">
            <summary>
            Transforms the first character of each word to uppercase.
            </summary>
        </member>
        <member name="T:Blazorise.TextWeight">
            <summary>
            Defines the text weight.
            </summary>
        </member>
        <member name="F:Blazorise.TextWeight.Default">
            <summary>
            No weight will be applied.
            </summary>
        </member>
        <member name="F:Blazorise.TextWeight.Normal">
            <summary>
            Defines normal characters. This is default.
            </summary>
        </member>
        <member name="F:Blazorise.TextWeight.SemiBold">
            <sumary>
            Defines semi thick characters.
            </sumary>
        </member>
        <member name="F:Blazorise.TextWeight.Bold">
            <summary>
            Defines thick characters.
            </summary>
        </member>
        <member name="F:Blazorise.TextWeight.Light">
            <summary>
            Defines lighter characters.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeContrast">
            <summary>
            Adjusts the theme contrast.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeContrast.None">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeContrast.Light">
            <summary>
            Adjusts the theme for a light colors.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeContrast.Dark">
            <summary>
            Adjusts the theme for a dark colors.
            </summary>
        </member>
        <member name="T:Blazorise.ToasterPlacement">
            <summary>
            Defines the placement of a toaster container element.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacement.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacement.TopStart">
            <summary>
            Top start side.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacement.TopEnd">
            <summary>
            Top end side.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacement.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacement.BottomStart">
            <summary>
            Bottom start side.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacement.BottomEnd">
            <summary>
            Bottom end side.
            </summary>
        </member>
        <member name="T:Blazorise.ToasterPlacementStrategy">
            <summary>
            Defines the placement strategy strategy of a toast element.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacementStrategy.Fixed">
            <summary>
            Positioned relative to the screen coordinates.
            </summary>
        </member>
        <member name="F:Blazorise.ToasterPlacementStrategy.Absolute">
            <summary>
            Positioned relative to the closest positioned ancestor.
            </summary>
        </member>
        <member name="T:Blazorise.ToastIntent">
            <summary>
            Defines the intent of a toast message.
            </summary>
        </member>
        <member name="F:Blazorise.ToastIntent.Default">
            <summary>
            Shows as a regular message.
            </summary>
        </member>
        <member name="F:Blazorise.ToastIntent.Info">
            <summary>
            Shows as an info message.
            </summary>
        </member>
        <member name="F:Blazorise.ToastIntent.Success">
            <summary>
            Shows as a success message.
            </summary>
        </member>
        <member name="F:Blazorise.ToastIntent.Warning">
            <summary>
            Shows as a warning message.
            </summary>
        </member>
        <member name="F:Blazorise.ToastIntent.Error">
            <summary>
            Shows as an error message.
            </summary>
        </member>
        <member name="T:Blazorise.ToastPlacement">
            <summary>
            Defines the placement of a toast element.
            </summary>
        </member>
        <member name="F:Blazorise.ToastPlacement.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Blazorise.ToastPlacement.TopStart">
            <summary>
            Top start side.
            </summary>
        </member>
        <member name="F:Blazorise.ToastPlacement.TopEnd">
            <summary>
            Top end side.
            </summary>
        </member>
        <member name="F:Blazorise.ToastPlacement.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.ToastPlacement.BottomStart">
            <summary>
            Bottom start side.
            </summary>
        </member>
        <member name="F:Blazorise.ToastPlacement.BottomEnd">
            <summary>
            Bottom end side.
            </summary>
        </member>
        <member name="T:Blazorise.TooltipPlacement">
            <summary>
            Defines the placement of an element.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.Top">
            <summary>
            Top-center side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.TopStart">
            <summary>
            Top-left side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.TopEnd">
            <summary>
            Top-right side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.Bottom">
            <summary>
            Bottom-center side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.BottomStart">
            <summary>
            Bottom-left side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.BottomEnd">
            <summary>
            Bottom-right side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.Left">
            <summary>
            Left-center side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.LeftStart">
            <summary>
            Left-top side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.LeftEnd">
            <summary>
            Left-bottom side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.Right">
            <summary>
            Right-center side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.RightStart">
            <summary>
            Right-top side.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipPlacement.RightEnd">
            <summary>
            Right-bottom side.
            </summary>
        </member>
        <member name="T:Blazorise.TooltipTrigger">
            <summary>
            Determines the events that cause the tooltip to show.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipTrigger.MouseEnterFocus">
            <summary>
            Tooltip will show on mouse enter and focus event (default option).
            </summary>
        </member>
        <member name="F:Blazorise.TooltipTrigger.Click">
            <summary>
            Tooltip will show on click event only.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipTrigger.Focus">
            <summary>
            Tooltip will show on focus event only.
            </summary>
        </member>
        <member name="F:Blazorise.TooltipTrigger.MouseEnterClick">
            <summary>
            Tooltip will show on mouse enter and click event.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationMode">
            <summary>
            Defines the validation execution mode.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationMode.Auto">
            <summary>
            Validation will execute on every input change.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationMode.Manual">
            <summary>
            Validation will run only when explicitly called. 
            </summary>
        </member>
        <member name="T:Blazorise.ValidationStatus">
            <summary>
            Defines the validation results.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationStatus.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationStatus.Success">
            <summary>
            Validation has passed the check.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationStatus.Error">
            <summary>
            Validation has failed.
            </summary>
        </member>
        <member name="T:Blazorise.VerticalAlignment">
            <summary>
            Used to change the vertical alignment of inline, inline-block, inline-table, and table cell elements.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.Default">
            <summary>
            Alignment will not be set.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.Baseline">
            <summary>
            Aligns the baseline of the element with the baseline of its parent.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.Top">
            <summary>
            Aligns the top of the element and its descendants with the top of the entire line.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.Middle">
            <summary>
            Centers the padding box of the cell within the row.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.Bottom">
            <summary>
            Aligns the bottom of the element and its descendants with the bottom of the entire line.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.TextTop">
            <summary>
            Aligns the top of the element with the top of the parent element's font.
            </summary>
        </member>
        <member name="F:Blazorise.VerticalAlignment.TextBottom">
            <summary>
            Aligns the bottom of the element with the bottom of the parent element's font.
            </summary>
        </member>
        <member name="T:Blazorise.Visibility">
            <summary>
            Control the visibility, without modifying the display, of elements with visibility utilities.
            </summary>
        </member>
        <member name="F:Blazorise.Visibility.Default">
            <summary>
            No visibility will be applied to an element.
            </summary>
        </member>
        <member name="F:Blazorise.Visibility.Visible">
            <summary>
            Default value. The element is visible
            </summary>
        </member>
        <member name="F:Blazorise.Visibility.Invisible">
            <summary>
            The element is hidden (but still takes up space)
            </summary>
        </member>
        <member name="T:Blazorise.AlertStateEventArgs">
            <summary>
            Supplies the information about the alert visibility state.
            </summary>
        </member>
        <member name="M:Blazorise.AlertStateEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.AlertStateEventArgs"/> constructor.
            </summary>
            <param name="visible">Visibility flag.</param>
        </member>
        <member name="P:Blazorise.AlertStateEventArgs.Visible">
            <summary>
            Gets that flag that indicates if the alert is visible.
            </summary>
        </member>
        <member name="T:Blazorise.BarDropdownStateEventArgs">
            <summary>
            Supplies the information about the bar-dropdown state.
            </summary>
        </member>
        <member name="M:Blazorise.BarDropdownStateEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.BarDropdownStateEventArgs"/> constructor.
            </summary>
            <param name="visible">Visibility flag.</param>
        </member>
        <member name="P:Blazorise.BarDropdownStateEventArgs.Visible">
            <summary>
            Gets that flag that indicates if the dropdown is opened.
            </summary>
        </member>
        <member name="T:Blazorise.BarStateEventArgs">
            <summary>
            Supplies the information about the bar state.
            </summary>
        </member>
        <member name="M:Blazorise.BarStateEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.BarStateEventArgs"/> constructor.
            </summary>
            <param name="visible">Visibility flag.</param>
        </member>
        <member name="P:Blazorise.BarStateEventArgs.Visible">
            <summary>
            Gets that flag that indicates if the bar is opened.
            </summary>
        </member>
        <member name="T:Blazorise.BLMouseEventArgs">
            <summary>
            Supplies information about a mouse event that is being raised.
            </summary>
        </member>
        <member name="M:Blazorise.BLMouseEventArgs.#ctor(Blazorise.MouseButton,System.Int64,System.Drawing.Point,System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.BLMouseEventArgs"/> constructor.
            </summary>
            <param name="button">Mouse button that was pressed.</param>
            <param name="clicks">Number of times the mouse button was pressed and released.</param>
            <param name="screen">Coordinate of the mouse pointer in global (screen) coordinates.</param>
            <param name="client">Coordinate of the mouse pointer in local (DOM content) coordinates.</param>
            <param name="ctrl">true if the control key was down when the event was fired. false otherwise.</param>
            <param name="shift">true if the shift key was down when the event was fired. false otherwise.</param>
            <param name="alt">true if the alt key was down when the event was fired. false otherwise.</param>
            <param name="meta">true if the meta key was down when the event was fired. false otherwise.</param>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.Screen">
            <summary>
            Gets the coordinate of the mouse pointer in global (screen) coordinates.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.Client">
            <summary>
            Gets the coordinate of the mouse pointer in local (DOM content) coordinates.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.CtrlKey">
            <summary>
            true if the control key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.ShiftKey">
            <summary>
            true if the shift key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.AltKey">
            <summary>
            true if the alt key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="P:Blazorise.BLMouseEventArgs.MetaKey">
            <summary>
            true if the meta key was down when the event was fired. false otherwise.
            </summary>
        </member>
        <member name="T:Blazorise.ClearedValidationsEventArgs">
            <summary>
            Supplies the information about the <see cref="M:Blazorise.Validations.ClearAll"/>. event.
            </summary>
        </member>
        <member name="F:Blazorise.ClearedValidationsEventArgs.Empty">
            <summary>
            Gets the default instance of <see cref="T:Blazorise.ClearedValidationsEventArgs"/>.
            </summary>
        </member>
        <member name="M:Blazorise.ClearedValidationsEventArgs.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ClearedValidationsEventArgs"/> constructor.
            </summary>
        </member>
        <member name="T:Blazorise.DropdownStateEventArgs">
            <summary>
            Supplies the information about the dropdown state.
            </summary>
        </member>
        <member name="M:Blazorise.DropdownStateEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.DropdownStateEventArgs"/> constructor.
            </summary>
            <param name="visible">Visibility flag.</param>
        </member>
        <member name="P:Blazorise.DropdownStateEventArgs.Visible">
            <summary>
            Gets that flag that indicates if the dropdown is opened.
            </summary>
        </member>
        <member name="T:Blazorise.FailedValidationsEventArgs">
            <summary>
            Supplies the information about the failed validation.
            </summary>
        </member>
        <member name="M:Blazorise.FailedValidationsEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            A default <see cref="T:Blazorise.FailedValidationsEventArgs"/> constructor.
            </summary>
            <param name="errorMessages">List of error messages.</param>
        </member>
        <member name="P:Blazorise.FailedValidationsEventArgs.ErrorMessages">
            <summary>
            Gets the list of all error messages.
            </summary>
        </member>
        <member name="T:Blazorise.FileChangedEventArgs">
            <summary>
            Supplies the information about the selected files ready to be uploaded.
            </summary>
        </member>
        <member name="M:Blazorise.FileChangedEventArgs.#ctor(Blazorise.IFileEntry[])">
            <summary>
            A default <see cref="T:Blazorise.FileChangedEventArgs"/> constructor.
            </summary>
            <param name="files">List of files.</param>
        </member>
        <member name="P:Blazorise.FileChangedEventArgs.Files">
            <summary>
            Gets the list of selected files.
            </summary>
        </member>
        <member name="T:Blazorise.FileEndedEventArgs">
            <summary>
            Provides the information about the file ended uploading.
            </summary>
        </member>
        <member name="M:Blazorise.FileEndedEventArgs.#ctor(Blazorise.IFileEntry,System.Boolean,Blazorise.FileInvalidReason)">
            <summary>
            A default <see cref="T:Blazorise.FileEndedEventArgs"/> constructor.
            </summary>
            <param name="file">File that is ended.</param>
            <param name="success">Result of file end upload.</param>
            <param name="fileInvalidReason">Reason for file failure.</param>
        </member>
        <member name="P:Blazorise.FileEndedEventArgs.File">
            <summary>
            Gets the file currently being uploaded.
            </summary>
        </member>
        <member name="P:Blazorise.FileEndedEventArgs.Success">
            <summary>
            Gets the value indicating if file has finished successfully.
            </summary>
        </member>
        <member name="P:Blazorise.FileEndedEventArgs.FileInvalidReason">
            <summary>
            Provides information about the invalid file.
            </summary>
        </member>
        <member name="T:Blazorise.FileProgressedEventArgs">
            <summary>
            Provides the progress state of uploaded file.
            </summary>
        </member>
        <member name="M:Blazorise.FileProgressedEventArgs.#ctor(Blazorise.IFileEntry,System.Double)">
            <summary>
            A default <see cref="T:Blazorise.FileProgressedEventArgs"/> constructor.
            </summary>
            <param name="file">File that is being processed.</param>
            <param name="progress">Percentage of file upload process.</param>
        </member>
        <member name="P:Blazorise.FileProgressedEventArgs.File">
            <summary>
            Gets the file currently being uploaded.
            </summary>
        </member>
        <member name="P:Blazorise.FileProgressedEventArgs.Progress">
            <summary>
            Gets the total progress in the range from 0 to 1.
            </summary>
        </member>
        <member name="P:Blazorise.FileProgressedEventArgs.Percentage">
            <summary>
            Gets the total progress in the range from 0 to 100.
            </summary>
        </member>
        <member name="T:Blazorise.FileStartedEventArgs">
            <summary>
            Provides the information about the file started to be uploaded.
            </summary>
        </member>
        <member name="M:Blazorise.FileStartedEventArgs.#ctor(Blazorise.IFileEntry)">
            <summary>
            A default <see cref="T:Blazorise.FileStartedEventArgs"/> constructor.
            </summary>
            <param name="file">File that is started with upload.</param>
        </member>
        <member name="P:Blazorise.FileStartedEventArgs.File">
            <summary>
            Gets the file currently being uploaded.
            </summary>
        </member>
        <member name="T:Blazorise.FileUploadEventArgs">
            <summary>
            Provides the file context for upload.
            </summary>
        </member>
        <member name="P:Blazorise.FileUploadEventArgs.File">
            <summary>
            Gets the file currently being uploaded.
            </summary>
        </member>
        <member name="M:Blazorise.FileUploadEventArgs.#ctor(Blazorise.IFileEntry)">
            <summary>
            A default <see cref="T:Blazorise.FileUploadEventArgs"/> constructor.
            </summary>
            <param name="file">File that is being processed.</param>
        </member>
        <member name="T:Blazorise.FileWrittenEventArgs">
            <summary>
            Supplies the information about the data being written while uploading.
            </summary>
        </member>
        <member name="M:Blazorise.FileWrittenEventArgs.#ctor(Blazorise.IFileEntry,System.Int64,System.Byte[])">
            <summary>
            A default <see cref="T:Blazorise.FileWrittenEventArgs"/> constructor.
            </summary>
            <param name="file">File that is being read.</param>
            <param name="position">Read offset in bytes within the file.</param>
            <param name="data">Bytes that are being read.</param>
        </member>
        <member name="P:Blazorise.FileWrittenEventArgs.File">
            <summary>
            Gets the file currently being uploaded.
            </summary>
        </member>
        <member name="P:Blazorise.FileWrittenEventArgs.Position">
            <summary>
            Gets the current position offset based on the original data source.
            </summary>
        </member>
        <member name="P:Blazorise.FileWrittenEventArgs.Data">
            <summary>
            Gets the data buffer.
            </summary>
        </member>
        <member name="T:Blazorise.MessageEventArgs">
            <summary>
            Supplies the information about the UI message.
            </summary>
        </member>
        <member name="M:Blazorise.MessageEventArgs.#ctor(Blazorise.MessageType,System.String,System.String,Blazorise.MessageOptions)">
            <summary>
            A default <see cref="T:Blazorise.MessageEventArgs"/> constructor.
            </summary>
            <param name="messageType">Type of the message to show.</param>
            <param name="message">Message content.</param>
            <param name="title">Title of the message.</param>
            <param name="options">Additional options to override default dialog settings.</param>
        </member>
        <member name="M:Blazorise.MessageEventArgs.#ctor(Blazorise.MessageType,Microsoft.AspNetCore.Components.MarkupString,System.String,Blazorise.MessageOptions)">
            <summary>
            A default <see cref="T:Blazorise.MessageEventArgs"/> constructor.
            </summary>
            <param name="messageType">Type of the message to show.</param>
            <param name="message">Message content.</param>
            <param name="title">Title of the message.</param>
            <param name="options">Additional options to override default dialog settings.</param>
        </member>
        <member name="M:Blazorise.MessageEventArgs.#ctor(Blazorise.MessageType,System.String,System.String,Blazorise.MessageOptions,System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            A default <see cref="T:Blazorise.MessageEventArgs"/> constructor.
            </summary>
            <param name="messageType">Type of the message to show.</param>
            <param name="message">Message content.</param>
            <param name="title">Title of the message.</param>
            <param name="options">Additional options to override default message settings.</param>
            <param name="callback">Callback that will execute once the user responds with an action.</param>
        </member>
        <member name="M:Blazorise.MessageEventArgs.#ctor(Blazorise.MessageType,Microsoft.AspNetCore.Components.MarkupString,System.String,Blazorise.MessageOptions,System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            A default <see cref="T:Blazorise.MessageEventArgs"/> constructor.
            </summary>
            <param name="messageType">Type of the message to show.</param>
            <param name="message">Message content.</param>
            <param name="title">Title of the message.</param>
            <param name="options">Additional options to override default message settings.</param>
            <param name="callback">Callback that will execute once the user responds with an action.</param>
        </member>
        <member name="P:Blazorise.MessageEventArgs.MessageType">
            <summary>
            Gets the message type.
            </summary>
        </member>
        <member name="P:Blazorise.MessageEventArgs.Message">
            <summary>
            Gets the message description.
            </summary>
        </member>
        <member name="P:Blazorise.MessageEventArgs.Title">
            <summary>
            Gets the message title.
            </summary>
        </member>
        <member name="P:Blazorise.MessageEventArgs.Options">
            <summary>
            Gets the options that will override default message settings.
            </summary>
        </member>
        <member name="P:Blazorise.MessageEventArgs.Callback">
            <summary>
            Gets the callback that will execute once the user responds with an action.
            </summary>
        </member>
        <member name="T:Blazorise.ModalClosingEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Modal.Closing"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.ModalClosingEventArgs.#ctor(System.Boolean,Blazorise.CloseReason)">
            <summary>
            A default <see cref="T:Blazorise.ModalClosingEventArgs"/> constructor.
            </summary>
            <param name="cancel">True if close event should be cancelled.</param>
            <param name="closeReason">Reason for closing.</param>
        </member>
        <member name="P:Blazorise.ModalClosingEventArgs.CloseReason">
            <summary>
            Gets a value that indicates why the modal is being closed.
            </summary>
        </member>
        <member name="T:Blazorise.ModalOpeningEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Modal.Opening"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.ModalOpeningEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.ModalOpeningEventArgs"/> constructor.
            </summary>
            <param name="cancel">True if close event should be cancelled.</param>
        </member>
        <member name="T:Blazorise.ModalStateEventArgs">
            <summary>
            Supplies the information about the modal visibility state.
            </summary>
        </member>
        <member name="M:Blazorise.ModalStateEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.ModalStateEventArgs"/> constructor.
            </summary>
            <param name="visible">Visibility flag.</param>
        </member>
        <member name="P:Blazorise.ModalStateEventArgs.Visible">
            <summary>
            Gets that flag that indicates if the modal is opened.
            </summary>
        </member>
        <member name="T:Blazorise.NotificationEventArgs">
            <summary>
            Supplies the information about the UI notification.
            </summary>
        </member>
        <member name="M:Blazorise.NotificationEventArgs.#ctor(Blazorise.NotificationType,System.String,System.String,Blazorise.NotificationOptions)">
            <summary>
            A default <see cref="T:Blazorise.NotificationEventArgs"/> constructor.
            </summary>
            <param name="notificationType">Type of the notification to show.</param>
            <param name="message">Notification content.</param>
            <param name="title">Title of the notification.</param>
            <param name="options">Additional options to override default notification settings.</param>
        </member>
        <member name="M:Blazorise.NotificationEventArgs.#ctor(Blazorise.NotificationType,Microsoft.AspNetCore.Components.MarkupString,System.String,Blazorise.NotificationOptions)">
            <summary>
            A default <see cref="T:Blazorise.NotificationEventArgs"/> constructor.
            </summary>
            <param name="notificationType">Type of the notification to show.</param>
            <param name="message">Notification content.</param>
            <param name="title">Title of the notification.</param>
            <param name="options">Additional options to override default notification settings.</param>
        </member>
        <member name="P:Blazorise.NotificationEventArgs.NotificationType">
            <summary>
            Gets the notification type.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationEventArgs.Message">
            <summary>
            Gets the notification description.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationEventArgs.Title">
            <summary>
            Gets the notification title.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationEventArgs.Options">
            <summary>
            Gets the options that will override default notification settings.
            </summary>
        </member>
        <member name="T:Blazorise.OffcanvasClosingEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Offcanvas.Closing"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.OffcanvasClosingEventArgs.#ctor(System.Boolean,Blazorise.CloseReason)">
            <summary>
            A default <see cref="T:Blazorise.OffcanvasClosingEventArgs"/> constructor.
            </summary>
            <param name="cancel">True if close event should be cancelled.</param>
            <param name="closeReason">Reason for closing.</param>
        </member>
        <member name="P:Blazorise.OffcanvasClosingEventArgs.CloseReason">
            <summary>
            Gets a value that indicates why the offcanvas is being closed.
            </summary>
        </member>
        <member name="T:Blazorise.OffcanvasOpeningEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Offcanvas.Opening"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.OffcanvasOpeningEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.OffcanvasOpeningEventArgs"/> constructor.
            </summary>
            <param name="cancel">True if close event should be cancelled.</param>
        </member>
        <member name="T:Blazorise.PageProgressEventArgs">
            <summary>
            Supplies the information about the UI page progress.
            </summary>
        </member>
        <member name="M:Blazorise.PageProgressEventArgs.#ctor(System.Nullable{System.Int32},Blazorise.PageProgressOptions)">
            <summary>
            A default <see cref="T:Blazorise.PageProgressEventArgs"/> constructor.
            </summary>
            <param name="percentage">Total percentage of the progress.</param>
            <param name="options">Additional options to override default progress settings.</param>
        </member>
        <member name="P:Blazorise.PageProgressEventArgs.Percentage">
            <summary>
            Gets the value in range 0-100 that tells us how much the progress has finished.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressEventArgs.Options">
            <summary>
            Gets the options that will override default progress settings.
            </summary>
        </member>
        <member name="T:Blazorise.RadioCheckedChangedEventArgs`1">
            <summary>
            Provides the information about the currently checked radio.
            </summary>
        </member>
        <member name="M:Blazorise.RadioCheckedChangedEventArgs`1.#ctor(`0)">
            <summary>
            A default <see cref="T:Blazorise.RadioCheckedChangedEventArgs`1"/> constructor.
            </summary>
            <param name="value">Radio value.</param>
        </member>
        <member name="P:Blazorise.RadioCheckedChangedEventArgs`1.Value">
            <summary>
            Gets the checked radio value.
            </summary>
        </member>
        <member name="T:Blazorise.TabsContentStateEventArgs">
            <summary>
            Supplies the information about the selected panel.
            </summary>
        </member>
        <member name="M:Blazorise.TabsContentStateEventArgs.#ctor(System.String)">
            <summary>
            A default <see cref="T:Blazorise.TabsContentStateEventArgs"/> constructor.
            </summary>
            <param name="panelName">Panel name.</param>
        </member>
        <member name="P:Blazorise.TabsContentStateEventArgs.PanelName">
            <summary>
            Gets the selected panel name.
            </summary>
        </member>
        <member name="T:Blazorise.TabsStateEventArgs">
            <summary>
            Supplies the information about the selected tab.
            </summary>
        </member>
        <member name="M:Blazorise.TabsStateEventArgs.#ctor(System.String)">
            <summary>
            A default <see cref="T:Blazorise.TabsStateEventArgs"/> constructor.
            </summary>
            <param name="tabName">Tab name.</param>
        </member>
        <member name="P:Blazorise.TabsStateEventArgs.TabName">
            <summary>
            Gets the selected tab name.
            </summary>
        </member>
        <member name="T:Blazorise.ToastClosingEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Toast.Closing"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.ToastClosingEventArgs.#ctor(System.Boolean,Blazorise.CloseReason)">
            <summary>
            A default <see cref="T:Blazorise.ToastClosingEventArgs"/> constructor.
            </summary>
            <param name="cancel">True if close event should be cancelled.</param>
            <param name="closeReason">Reason for closing.</param>
        </member>
        <member name="P:Blazorise.ToastClosingEventArgs.CloseReason">
            <summary>
            Gets a value that indicates why the toast is being closed.
            </summary>
        </member>
        <member name="T:Blazorise.ToastEventArgs">
            <summary>
            Supplies the information about the UI toast.
            </summary>
        </member>
        <member name="M:Blazorise.ToastEventArgs.#ctor(Blazorise.ToastIntent,System.String,System.String,Blazorise.ToastInstanceOptions)">
            <summary>
            A default <see cref="T:Blazorise.ToastEventArgs"/> constructor.
            </summary>
            <param name="intent">Type of the toast to show.</param>
            <param name="message">Toast content.</param>
            <param name="title">Title of the toast.</param>
            <param name="options">Additional options to override default toast settings.</param>
        </member>
        <member name="M:Blazorise.ToastEventArgs.#ctor(Blazorise.ToastIntent,Microsoft.AspNetCore.Components.MarkupString,System.String,Blazorise.ToastInstanceOptions)">
            <summary>
            A default <see cref="T:Blazorise.ToastEventArgs"/> constructor.
            </summary>
            <param name="intent">Type of the toast to show.</param>
            <param name="message">Toast content.</param>
            <param name="title">Title of the toast.</param>
            <param name="options">Additional options to override default toast settings.</param>
        </member>
        <member name="P:Blazorise.ToastEventArgs.Intent">
            <summary>
            Gets the toast type.
            </summary>
        </member>
        <member name="P:Blazorise.ToastEventArgs.Title">
            <summary>
            Gets the toast title.
            </summary>
        </member>
        <member name="P:Blazorise.ToastEventArgs.Message">
            <summary>
            Gets the toast description.
            </summary>
        </member>
        <member name="P:Blazorise.ToastEventArgs.Options">
            <summary>
            Gets the options that will override default toast settings.
            </summary>
        </member>
        <member name="T:Blazorise.ToastOpeningEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Toast.Opening"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.ToastOpeningEventArgs.#ctor(System.Boolean)">
            <summary>
            A default <see cref="T:Blazorise.ToastOpeningEventArgs"/> constructor.
            </summary>
            <param name="cancel">True if close event should be cancelled.</param>
        </member>
        <member name="T:Blazorise.ValidationsStatusChangedEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Validations.StatusChanged"/> event.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationsStatusChangedEventArgs.Empty">
            <summary>
            Gets the default <see cref="T:Blazorise.ValidationsStatusChangedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationsStatusChangedEventArgs.#ctor(Blazorise.ValidationStatus,System.Collections.Generic.IReadOnlyCollection{System.String},Blazorise.IValidation)">
            <summary>
            A default <see cref="T:Blazorise.ValidationsStatusChangedEventArgs"/> constructor.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationsStatusChangedEventArgs.Status">
            <summary>
            Gets the validation result.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationsStatusChangedEventArgs.Messages">
            <summary>
            Gets the custom validation message.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationsStatusChangedEventArgs.Validation">
            <summary>
            Gets the <see cref="T:Blazorise.IValidation"/> reference that initiated status changed event. If <c>null</c>, it means the 
            raise happened from the parent <see cref="T:Blazorise.Validations"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationStatusChangedEventArgs">
            <summary>
            Data about the <see cref="T:Blazorise.Validation"/> status change event.
            </summary>
        </member>
        <member name="F:Blazorise.ValidationStatusChangedEventArgs.Empty">
            <summary>
            Gets an empty status event.
            </summary>
        </member>
        <member name="M:Blazorise.ValidationStatusChangedEventArgs.#ctor(Blazorise.ValidationStatus,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A default constructor for <see cref="T:Blazorise.ValidationStatusChangedEventArgs"/>.
            </summary>
            <param name="status">Validation status.</param>
            <param name="messages">List of validation messages.</param>
        </member>
        <member name="P:Blazorise.ValidationStatusChangedEventArgs.Status">
            <summary>
            Gets the validation result.
            </summary>
        </member>
        <member name="P:Blazorise.ValidationStatusChangedEventArgs.Messages">
            <summary>
            Gets the custom validation message.
            </summary>
        </member>
        <member name="T:Blazorise.ValidatorEventArgs">
            <summary>
            Provides data for the <see cref="P:Blazorise.Validation.Validator"/> event.
            </summary>
        </member>
        <member name="M:Blazorise.ValidatorEventArgs.#ctor(System.Object)">
            <summary>
            A default <see cref="T:Blazorise.ValidatorEventArgs"/> constructor.
            </summary>
        </member>
        <member name="P:Blazorise.ValidatorEventArgs.Value">
            <summary>
            Gets the value to check for validation.
            </summary>
        </member>
        <member name="P:Blazorise.ValidatorEventArgs.Status">
            <summary>
            Gets or sets the validation result.
            </summary>
        </member>
        <member name="P:Blazorise.ValidatorEventArgs.ErrorText">
            <summary>
            Gets or sets the validation custom error message.
            </summary>
        </member>
        <member name="P:Blazorise.ValidatorEventArgs.MemberNames">
            <summary>
            Gets the collection of member names that indicate which fields have validation errors.
            </summary>
        </member>
        <member name="T:Blazorise.ClearAllValidationsEventHandler">
            <summary>
            Delegate for <see cref="E:Blazorise.Validations.ClearingAll"/> event.
            </summary>
        </member>
        <member name="T:Blazorise.ValidationsStatusChangedEventHandler">
            <summary>
            Delegate for the <see cref="P:Blazorise.Validations.StatusChanged"/> event.
            </summary>
            <param name="eventArgs">Status changed event arguments.</param>
        </member>
        <member name="T:Blazorise.ValidationStartedEventHandler">
            <summary>
            Delegate for the <see cref="E:Blazorise.Validation.ValidationStarted"/> event.
            </summary>
        </member>
        <member name="T:Blazorise.Extensions.ArrayExtensions">
            <summary>
            Helper methods for arrays and enumerables.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.ArrayExtensions.AreEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if all ellements in the supplied arrays are equal.
            </summary>
            <param name="array1">First array to check.</param>
            <param name="array2">Second array to check.</param>
            <returns>True if all elements are equal.</returns>
        </member>
        <member name="M:Blazorise.Extensions.ArrayExtensions.AreEqualOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if all ellements in the supplied arrays are equal. Orders the elements of both collections.
            </summary>
            <param name="array1">First array to check.</param>
            <param name="array2">Second array to check.</param>
            <returns>True if all elements are equal when ordered.</returns>
        </member>
        <member name="M:Blazorise.Extensions.ArrayExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the supplied collection is null or empty, i.e. not containing any element.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <param name="collection">The collection to check for emptiness.</param>
            <returns>True if the source sequence is null or if it does not contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:Blazorise.Extensions.ArrayExtensions.Index``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of an element that matches the specified predicate.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the specified <paramref name="predicate"/>, if found; otherwise it'll return -1.
            </returns>
        </member>
        <member name="T:Blazorise.Extensions.ColorExtensions">
            <summary>
            Helper methods for colors.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.ColorExtensions.IsNullOrDefault(Blazorise.Color)">
            <summary>
            Determines if the supplied color is null or empty, i.e. not containing any color.
            </summary>
            <param name="color">Color value to check.</param>
            <returns>True if color is <c>null</c> or <see cref="F:Blazorise.Color.Default"/>.</returns>
        </member>
        <member name="T:Blazorise.Extensions.EditContextExtensions">
            <summary>
            Contains extension methods for working with the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditForm"/> class.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.EditContextExtensions.ClearValidationMessages(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.FieldIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Clears all validation messages from the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> of the given <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/>.
            </summary>
            <param name="editContext">The <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> to use.</param>
            <param name="fieldIdentifier">The field for which to clear messages.</param>
            <param name="revalidate">
            Specifies whether the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> should revalidate after all validation messages have been cleared.
            </param>
            <param name="markAsUnmodified">
            Specifies whether the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> should be marked as unmodified. This will affect the assignment of css classes to a form's input controls in Blazor.
            </param>
        </member>
        <member name="M:Blazorise.Extensions.EnumExtensions.ToTargetString(Blazorise.Target)">
            <summary>
            Gets the link target name.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.EnumExtensions.IsNullOrDefault(System.Nullable{Blazorise.Size})">
            <summary>
            Indicates whether the specified enum size is null or a default value.
            </summary>
            <param name="size">Enum to test.</param>
            <returns>True if the value parameter is null or a default value; otherwise, false.</returns>
        </member>
        <member name="T:Blazorise.Extensions.EventArgsExtensions">
            <summary>
            EventArgs derived classes extensions.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.EventArgsExtensions.IsModifierKey(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Returns true if a modifier key was pressed.
            </summary>
        </member>
        <member name="T:Blazorise.Extensions.ModuleExtensions">
            <summary>
            Helper methods for JS modules.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.ModuleExtensions.SafeDestroy(Blazorise.Modules.IJSDestroyableModule,Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Safely destroys the JS module.
            </summary>
            <param name="module">Module instance.</param>
            <param name="elementRef">Reference to the rendered element.</param>s
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Extensions.ObjectExtensions">
            <summary>
            Generic methods for all object types.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.ObjectExtensions.IsEqual``1(``0,``0)">
            <summary>
            Determines whether two objects of type T are equal.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>True if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Blazorise.Extensions.ObjectExtensions.SafeDisposeAsync(System.IAsyncDisposable)">
            <summary>
            Safely disposes the object.
            </summary>
            <param name="disposable">Instance of the object to dispose.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Extensions.ObjectExtensions.ToCultureInvariantString``1(``0)">
            <summary>
            Converts the value to a culture-invariant string representation.
            </summary>
            <typeparam name="T">The type of the value to convert.</typeparam>
            <param name="value">The value to convert to a culture-invariant string.</param>
            <returns>A culture-invariant string representation of the value. If the value implements <see cref="T:System.IFormattable"/>, it uses <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>; otherwise, it uses <see cref="M:System.Object.ToString"/>.</returns>
        </member>
        <member name="T:Blazorise.Extensions.StringExtensions">
            <summary>
            Various extension methods for string object.
            </summary>
        </member>
        <member name="M:Blazorise.Extensions.StringExtensions.EmptyToNull(System.String)">
            <summary>
            Check if supplied string consists of empty spaces and returns null if it is.
            </summary>
            <param name="value">String to check.</param>
            <returns>Null of string is empty.</returns>
        </member>
        <member name="M:Blazorise.Extensions.StringExtensions.ToCamelcase(System.String)">
            <summary>
            Converts all string characters to lower-case except for the first character.
            </summary>
            <param name="value">String to convert.</param>
            <returns>Camelcased string.</returns>
        </member>
        <member name="T:Blazorise.IFluentBarCollapseMode">
            <summary>
            Base interface for all fluent bar collapse builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentBarCollapseMode.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on bar collapse rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentBarCollapseModeOnBreakpoint">
            <summary>
            Breakpoints allowed for bar collapse.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeOnBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeOnBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeOnBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeOnBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeOnBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeOnBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBarCollapseModeWithMode">
            <summary>
            Modes allowed for bar collapse.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeWithMode.Hide">
            <summary>
            Collapse will hide on breakpoint.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBarCollapseModeWithMode.Small">
            <summary>
            Collapse will go become smaller on breakpoint.
            </summary>
        </member>
        <member name="T:Blazorise.FluentBarCollapseMode">
            <summary>
            Default implementation of fluent bar collapse builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentBarCollapseMode.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentBarCollapseMode.WithMode(Blazorise.BarCollapseMode)">
            <summary>
            Starts the new mode.
            </summary>
            <param name="mode">Mode to start.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentBarCollapseMode.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            
            </summary>
            <param name="breakpoint"></param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.Hide">
            <summary>
            
            </summary>
        </member>
        <member name="P:Blazorise.FluentBarCollapseMode.Small">
            <summary>
            
            </summary>
        </member>
        <member name="T:Blazorise.BarCollapseModee">
            <summary>
            Starts the new bar collapse mode.
            </summary>
        </member>
        <member name="P:Blazorise.BarCollapseModee.Hide">
            <summary>
            Collapse will hide on breakpoint.
            </summary>
        </member>
        <member name="P:Blazorise.BarCollapseModee.Small">
            <summary>
            Collapse will go become smaller on breakpoint.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorder">
            <summary>
            Base interface for all fluent border builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentBorder.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on border rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentBorderSize">
            <summary>
            Sizes allowed for fluent border builder.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSize.Is0">
            <summary>
            Makes the element borderless.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSize.Is1">
            <summary>
            Borders will be 1px wide.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSize.Is2">
            <summary>
            Borders will be 2px wide.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSize.Is3">
            <summary>
            Borders will be 3px wide.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSize.Is4">
            <summary>
            Borders will be 4px wide.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSize.Is5">
            <summary>
            Borders will be 5px wide.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorderSide">
            <summary>
            Sides allowed for fluent border builder.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSide.OnTop">
            <summary>
            Shows the border on top side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSide.OnEnd">
            <summary>
            Shows the border on right side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSide.OnBottom">
            <summary>
            Shows the border on bottom side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSide.OnStart">
            <summary>
            Shows the border on left side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderSide.OnAll">
            <summary>
            Shows the border on all sides of the element.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorderColor">
            <summary>
            Colors allowed for fluent border builder.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Primary">
            <summary>
            Defines the border primary color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Secondary">
            <summary>
            Defines the border secondary color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Success">
            <summary>
            Defines the border success color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Danger">
            <summary>
            Defines the border danger color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Warning">
            <summary>
            Defines the border warning color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Info">
            <summary>
            Defines the border info color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Light">
            <summary>
            Defines the border light color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.Dark">
            <summary>
            Defines the border dark color.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderColor.White">
            <summary>
            Defines the border white color.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorderRadius">
            <summary>
            Radius styles allowed for fluent border builder.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.Rounded">
            <summary>
            Makes the element rounded on all sides.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedTop">
            <summary>
            Makes the element rounded on top side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedEnd">
            <summary>
            Makes the element rounded on right side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedBottom">
            <summary>
            Makes the element rounded on bottom side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedStart">
            <summary>
            Makes the element rounded on left side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedCircle">
            <summary>
            Makes the element as circle shaped.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedPill">
            <summary>
            Makes the element as pill shaped.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentBorderRadius.RoundedZero">
            <summary>
            Makes the element without any round corners.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorderWithSizeAndSide">
            <summary>
            Combination of border, with sizes and sides.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorderColorWithSide">
            <summary>
            Combination of border colors with sides.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentBorderWithAll">
            <summary>
            Combination of all border rules.
            </summary>
        </member>
        <member name="T:Blazorise.FluentBorder">
            <summary>
            Default implementation of fluent border builder.
            </summary>
        </member>
        <member name="T:Blazorise.FluentBorder.BorderDefinition">
            <summary>
            Holds the additions information for current border rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentBorder.currentBorderDefinition">
            <summary>
            Currently used border rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentBorder.rules">
            <summary>
            List of all border rules to build.
            </summary>
        </member>
        <member name="F:Blazorise.FluentBorder.borderRadius">
            <summary>
            Rule for border radius.
            </summary>
        </member>
        <member name="F:Blazorise.FluentBorder.dirty">
            <summary>
            Indicates if the rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentBorder.classNames">
            <summary>
            Holds the built classnames bases on the border rules.
            </summary>
        </member>
        <member name="M:Blazorise.FluentBorder.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentBorder.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentBorder.WithSize(Blazorise.BorderSize)">
            <summary>
            Starts the new size rule.
            </summary>
            <param name="borderSize">Border size to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentBorder.WithSide(Blazorise.BorderSide)">
            <summary>
            Starts the new side rule.
            </summary>
            <param name="borderSide">Border side to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentBorder.WithColor(Blazorise.BorderColor)">
            <summary>
            Starts the new color rule.
            </summary>
            <param name="borderColor">Border color to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentBorder.WithRadius(Blazorise.BorderRadius)">
            <summary>
            Starts the new radius rule.
            </summary>
            <param name="borderRadius">Border radius to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentBorder.Is0">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Is1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Is2">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Is3">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Is4">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Is5">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.OnTop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.OnEnd">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.OnBottom">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.OnStart">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.OnAll">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Primary">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Secondary">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Success">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Danger">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Warning">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Info">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Light">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Dark">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.White">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.Rounded">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedTop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedEnd">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedBottom">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedStart">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedCircle">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedPill">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentBorder.RoundedZero">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Border">
            <summary>
            Set of border rules to start the build process.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Is0">
            <summary>
            Makes the element borderless.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Is1">
            <summary>
            Borders will be 1px wide.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Is2">
            <summary>
            Borders will be 2px wide.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Is3">
            <summary>
            Borders will be 3px wide.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Is4">
            <summary>
            Borders will be 4px wide.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Is5">
            <summary>
            Borders will be 5px wide.
            </summary>
        </member>
        <member name="P:Blazorise.Border.OnTop">
            <summary>
            Shows the 1px wide border on the top side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.OnEnd">
            <summary>
            Shows the 1px wide border on the right side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.OnBottom">
            <summary>
            Shows the 1px wide border on the bottom side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.OnStart">
            <summary>
            Shows the 1px wide border on the left side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Primary">
            <summary>
            Defines the border primary color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Secondary">
            <summary>
            Defines the border primary color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Success">
            <summary>
            Defines the border success color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Danger">
            <summary>
            Defines the border danger color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Warning">
            <summary>
            Defines the border warning color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Info">
            <summary>
            Defines the border info color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Light">
            <summary>
            Defines the border light color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Dark">
            <summary>
            Defines the border dark color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.White">
            <summary>
            Defines the border white color on all sided of an element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.Rounded">
            <summary>
            Makes the element rounded on all sides.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedTop">
            <summary>
            Makes the element rounded on top side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedEnd">
            <summary>
            Makes the element rounded on right side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedBottom">
            <summary>
            Makes the element rounded on bottom side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedStart">
            <summary>
            Makes the element rounded on left side of the element.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedCircle">
            <summary>
            Makes the element as circle shaped.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedPill">
            <summary>
            Makes the element as pill shaped.
            </summary>
        </member>
        <member name="P:Blazorise.Border.RoundedZero">
            <summary>
            Makes the element without any round corners.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentColumn">
            <summary>
            Base interface for column fluent builder.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentColumn.Class(System.Boolean,Blazorise.IClassProvider)">
            <summary>
            Builds and returns the classnames for column sizes.
            </summary>
            <param name="grid">If true, column is the child of the <see cref="T:Blazorise.Grid"/> component.</param>
            <param name="classProvider">Class provider used by the current framework provider.</param>
            <returns>Return list of css classnames.</returns>
        </member>
        <member name="P:Blazorise.IFluentColumn.HasSizes">
            <summary>
            True if there are column sizes defined.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize">
            <summary>
            Contains all the rules for column sizes.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentColumnOnBreakpoint">
            <summary>
            Allowed breakpoints for column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnOnBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnOnBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnOnBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnOnBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnOnBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnOnBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentColumnWithOffset">
            <summary>
            Offset rule for column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithOffset.WithOffset">
            <summary>
            Move columns to the right.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentColumnWithSize">
            <summary>
            Allowed sizes for column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is1">
            <summary>
            One column width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is2">
            <summary>
            Two columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is3">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is4">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is5">
            <summary>
            Five columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is6">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is7">
            <summary>
            Seven columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is8">
            <summary>
            Eight columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is9">
            <summary>
            Nine columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is10">
            <summary>
            Ten columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is11">
            <summary>
            Eleven columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.Is12">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.IsFull">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.IsHalf">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.IsThird">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.IsQuarter">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentColumnWithSize.IsAuto">
            <summary>
            Fill all available space.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentColumnWithSize.Is(System.String)">
            <summary>
            Used to add custom column rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.ColumnDefinition">
            <summary>
            Holds the build information for current column rules.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnDefinition.ColumnWidth">
            <summary>
            Gets or sets the column size.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnDefinition.Breakpoint">
            <summary>
            Gets or sets the breakpoint rule.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnDefinition.Offset">
            <summary>
            Gets or sets the flag to indicate we want to offset column by the <see cref="P:Blazorise.ColumnDefinition.ColumnWidth"/>.
            </summary>
        </member>
        <member name="T:Blazorise.FluentColumn">
            <summary>
            Default implementation of fluent column builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentColumn.Class(System.Boolean,Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentColumn.WithColumnSize(Blazorise.ColumnWidth)">
            <summary>
            Appends the new size rule.
            </summary>
            <param name="columnSize">Column size to start the rule.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentColumn.WithColumnSize(System.String)">
            <summary>
            Appends the new custom size rule.
            </summary>
            <param name="value">Custom size to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentColumn.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentColumn.Is(System.String)">
            <summary>
            Used to add custom column rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="P:Blazorise.FluentColumn.HasSizes">
            <summary>
            Defines if column has any size rule defined.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.WithOffset">
            <summary>
            Move columns to the right.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is1">
            <summary>
            One column width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is2">
            <summary>
            Two columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is3">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is4">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is5">
            <summary>
            Five columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is6">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is7">
            <summary>
            Seven columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is8">
            <summary>
            Eight columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is9">
            <summary>
            Nine columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is10">
            <summary>
            Ten columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is11">
            <summary>
            Eleven columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.Is12">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.IsFull">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.IsHalf">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.IsThird">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.IsQuarter">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.FluentColumn.IsAuto">
            <summary>
            Fill all available space.
            </summary>
        </member>
        <member name="T:Blazorise.ColumnSize">
            <summary>
            Fluent builder for the column sizes.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is1">
            <summary>
            One column width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is2">
            <summary>
            Two columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is3">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is4">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is5">
            <summary>
            Five columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is6">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is7">
            <summary>
            Seven columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is8">
            <summary>
            Eight columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is9">
            <summary>
            Nine columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is10">
            <summary>
            Ten columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is11">
            <summary>
            Eleven columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.Is12">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.IsFull">
            <summary>
            Twelve columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.IsHalf">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.IsThird">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.IsQuarter">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.ColumnSize.IsAuto">
            <summary>
            Fill all available space.
            </summary>
        </member>
        <member name="M:Blazorise.ColumnSize.Is(System.String)">
            <summary>
            Add custom column rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.IFluentDisplay">
            <summary>
            Base interface for all fluent display builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentDisplay.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on display rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection">
            <summary>
            Contains all the allowed display rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentDisplayOnBreakpoint">
            <summary>
            Allowed breakpoints for display rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayOnBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayOnBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayOnBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayOnBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayOnBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayOnBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentDisplayWithDisplayFlexWithDirection">
            <summary>
            Allowed rules for flex display.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplayFlexWithDirection.Row">
            <summary>
            Default value. The flexible items are displayed horizontally, as a row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplayFlexWithDirection.ReverseRow">
            <summary>
            Same as row, but in reverse order.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplayFlexWithDirection.Column">
            <summary>
            The flexible items are displayed vertically, as a column.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplayFlexWithDirection.ReverseColumn">
            <summary>
            Same as column, but in reverse order.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentDisplayWithDisplay">
            <summary>
            All allowed display rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.None">
            <summary>
            The element is completely removed.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.Block">
            <summary>
            Displays an element as a block element. It starts on a new line, and takes up the whole width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.Inline">
            <summary>
            Displays an element as an inline element. Any height and width properties will have no effect.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.InlineBlock">
            <summary>
            Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.Table">
            <summary>
            Let the element behave like a table element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.TableRow">
            <summary>
            Let the element behave like a table row element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.TableCell">
            <summary>
            Let the element behave like a table cell element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.Flex">
            <summary>
            Displays an element as a block-level flex container.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentDisplayWithDisplay.InlineFlex">
            <summary>
            Displays an element as an inline-level flex container.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentDisplayOnCondition">
            <summary>
            Conditions for display rules.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentDisplayOnCondition.If(System.Boolean)">
            <summary>
            Add a condition rule to the display.
            </summary>
            <param name="condition">Condition result.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="T:Blazorise.DisplayDefinition">
            <summary>
            Holds the build information for current flex rules.
            </summary>
        </member>
        <member name="P:Blazorise.DisplayDefinition.Breakpoint">
            <summary>
            Defines the flex breakpoint rule.
            </summary>
        </member>
        <member name="P:Blazorise.DisplayDefinition.Direction">
            <summary>
            Defines the flex direction rule.
            </summary>
        </member>
        <member name="P:Blazorise.DisplayDefinition.Condition">
            <summary>
            If condition is true the rule will will be applied.
            </summary>
        </member>
        <member name="T:Blazorise.FluentDisplay">
            <summary>
            Default implementation of <see cref="T:Blazorise.IFluentDisplay"/>.
            </summary>
        </member>
        <member name="F:Blazorise.FluentDisplay.currentDisplay">
            <summary>
            Currently used display rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentDisplay.rules">
            <summary>
            List of all display rules to build.
            </summary>
        </member>
        <member name="F:Blazorise.FluentDisplay.dirty">
            <summary>
            Indicates if the rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentDisplay.classNames">
            <summary>
            Holds the built classnames based on the display rules.
            </summary>
        </member>
        <member name="M:Blazorise.FluentDisplay.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentDisplay.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentDisplay.WithDisplay(Blazorise.DisplayType)">
            <summary>
            Appends the new display rule.
            </summary>
            <param name="displayType">Display type to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentDisplay.WithFlex(Blazorise.DisplayType)">
            <summary>
            Appends the new flex rule.
            </summary>
            <param name="displayType">Display type to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentDisplay.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentDisplay.WithDirection(Blazorise.DisplayDirection)">
            <summary>
            Sets the display direction rule.
            </summary>
            <param name="direction">Flex direction to set.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentDisplay.If(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentDisplay.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.Always">
            <summary>
            Display will not be applied, meaning an element will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.None">
            <summary>
            Hides an element.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.Block">
            <summary>
            Displays an element as a block element.
            </summary>
            <remarks>
            It starts on a new line, and takes up the whole width.
            </remarks>
        </member>
        <member name="P:Blazorise.FluentDisplay.Inline">
            <summary>
            Displays an element as an inline element.
            </summary>
            <remarks>
            Any height and width properties will have no effect.
            </remarks>
        </member>
        <member name="P:Blazorise.FluentDisplay.InlineBlock">
            <summary>
            Displays an element as an inline-level block container.
            </summary>
            <remarks>
            The element itself is formatted as an inline element, but you can apply height and width values
            </remarks>
        </member>
        <member name="P:Blazorise.FluentDisplay.Table">
            <summary>
            Let the element behave like a table element.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.TableRow">
            <summary>
            Let the element behave like a tr element.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.TableCell">
            <summary>
            Let the element behave like a td element.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.Flex">
            <summary>
            Displays an element as a block-level flex container.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.InlineFlex">
            <summary>
            Displays an element as an inline-level flex container.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.Row">
            <summary>
            The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.Column">
            <summary>
            The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.ReverseRow">
            <summary>
            Behaves the same as row but the main-start and main-end points are permuted.
            </summary>
        </member>
        <member name="P:Blazorise.FluentDisplay.ReverseColumn">
            <summary>
            Behaves the same as column but the main-start and main-end are permuted.
            </summary>
        </member>
        <member name="T:Blazorise.Display">
            <summary>
            Fluent builder for the display utilities.
            </summary>
        </member>
        <member name="P:Blazorise.Display.Always">
            <summary>
            The element is always present.
            </summary>
        </member>
        <member name="P:Blazorise.Display.None">
            <summary>
            The element is completely removed.
            </summary>
        </member>
        <member name="P:Blazorise.Display.Block">
            <summary>
            Displays an element as a block element.
            </summary>
            <remarks>
            It starts on a new line, and takes up the whole width.
            </remarks>
        </member>
        <member name="P:Blazorise.Display.Inline">
            <summary>
            Displays an element as an inline element.
            </summary>
            <remarks>
            Any height and width properties will have no effect.
            </remarks>
        </member>
        <member name="P:Blazorise.Display.InlineBlock">
            <summary>
            Displays an element as an inline-level block container.
            </summary>
            <remarks>
            The element itself is formatted as an inline element, but you can apply height and width values
            </remarks>
        </member>
        <member name="P:Blazorise.Display.Table">
            <summary>
            Let the element behave like a table element.
            </summary>
        </member>
        <member name="P:Blazorise.Display.TableRow">
            <summary>
            Let the element behave like a tr element.
            </summary>
        </member>
        <member name="P:Blazorise.Display.TableCell">
            <summary>
            Let the element behave like a td element.
            </summary>
        </member>
        <member name="P:Blazorise.Display.Flex">
            <summary>
            Displays an element as a block-level flex container.
            </summary>
        </member>
        <member name="P:Blazorise.Display.InlineFlex">
            <summary>
            Displays an element as an inline-level flex container.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlex">
            <summary>
            Base interface for all fluent flex builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentFlex.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on flex rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentFlexAll">
            <summary>
            Contains all the allowed flex rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexBreakpoint">
            <summary>
            Allowed breakpoints for flex rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexDirection">
            <summary>
            Allowed rules for flex direction.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexDirection.Row">
            <summary>
            Default value. The flexible items are displayed horizontally, as a row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexDirection.ReverseRow">
            <summary>
            Same as row, but in reverse order.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexDirection.Column">
            <summary>
            The flexible items are displayed vertically, as a column.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexDirection.ReverseColumn">
            <summary>
            Same as column, but in reverse order.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexJustifyContent">
            <summary>
            Rule for starting the flex justify-content.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexJustifyContent.JustifyContent">
            <summary>
            Defines the alignment along the main axis.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexJustifyContentPositions">
            <summary>
            Defines all the allowed positions for justify-content rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexJustifyContentPositions.Start">
            <summary>
            Items are packed toward the start of the flex-direction.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexJustifyContentPositions.End">
            <summary>
            Items are packed toward the end of the flex-direction.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexJustifyContentPositions.Center">
            <summary>
            Items are centered along the line.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexJustifyContentPositions.Between">
            <summary>
            Items are evenly distributed in the line; first item is on the start line, last item on the end line.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexJustifyContentPositions.Around">
            <summary>
            Items are evenly distributed in the line with equal space around them.
            Note that visually the spaces aren't equal, since all the items have equal space on both sides.
            </summary>
            <remarks>
            The first item will have one unit of space against the container edge, but two units of space
            between the next item because that next item has its own spacing that applies.
            </remarks>
        </member>
        <member name="T:Blazorise.IFluentFlexAlignItems">
            <summary>
            Rule for starting the flex align-items.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignItems.AlignItems">
            <summary>
            Defines the default behavior for how flex items are laid out along the cross axis on the current line.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexAlignItemsPosition">
            <summary>
            Defines all the allowed positions for align-items rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignItemsPosition.Start">
            <summary>
            Items are placed at the start of the cross axis. The difference between these is subtle,
            and is about respecting the flex-direction rules or the writing-mode rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignItemsPosition.End">
            <summary>
            Items are placed at the end of the cross axis. The difference again is subtle and is about
            respecting flex-direction rules vs. writing-mode rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignItemsPosition.Center">
            <summary>
            Items are centered in the cross-axis.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignItemsPosition.Baseline">
            <summary>
            Items are aligned such as their baselines align.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignItemsPosition.Stretch">
            <summary>
            Stretch to fill the container (still respect min-width/max-width).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexAlignSelf">
            <summary>
            Rule for starting the flex align-self.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelf.AlignSelf">
            <summary>
            Allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexAlignSelfPosition">
            <summary>
            Defines all the allowed positions for align-self rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelfPosition.Auto">
            <summary>
            Equals to the value specified in the align-items property for the flex container (it’s the default value).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelfPosition.Start">
            <summary>
            Items are placed at the start of the cross axis. The difference between these is subtle,
            and is about respecting the flex-direction rules or the writing-mode rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelfPosition.End">
            <summary>
            Items are placed at the end of the cross axis. The difference again is subtle and is about
            respecting flex-direction rules vs. writing-mode rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelfPosition.Center">
            <summary>
            Items are centered in the cross-axis.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelfPosition.Baseline">
            <summary>
            Items are aligned such as their baselines align.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignSelfPosition.Stretch">
            <summary>
            Stretch to fill the container (still respect min-width/max-width).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexAlignContent">
            <summary>
            Rule for starting the flex align-content.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContent.AlignContent">
            <summary>
            The align-content property aligns a flex container’s lines within the
            flex container when there is extra space in the cross-axis.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexAlignContentPosition">
            <summary>
            Defines all the allowed positions for align-content rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContentPosition.Start">
            <summary>
            Lines are packed toward the start of the flex container.
            </summary>
            <remarks>
            The cross-start edge of the first line in the flex container is placed flush
            with the cross-start edge of the flex container, and each subsequent line
            is placed flush with the preceding line.
            </remarks>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContentPosition.End">
            <summary>
            Lines are packed toward the end of the flex container.
            </summary>
            <remarks>
            The cross-end edge of the last line is placed flush with the cross-end edge
            of the flex container, and each preceding line is placed flush with the subsequent line.
            </remarks>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContentPosition.Center">
            <summary>
            Lines are packed toward the center of the flex container.
            </summary>
            <remarks>
            The lines in the flex container are placed flush with each other and aligned in the center
            of the flex container, with equal amounts of space between the cross-start content edge of
            the flex container and the first line in the flex container, and between the cross-end
            content edge of the flex container and the last line in the flex container.
            (If the leftover free-space is negative, the lines will overflow equally in both directions.)
            </remarks>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContentPosition.Between">
            <summary>
            Lines are evenly distributed in the flex container.
            </summary>
            <remarks>
            If the leftover free-space is negative or there is only a single flex line in the flex container,
            this value is identical to flex-start. Otherwise, the cross-start edge of the first line in the flex
            container is placed flush with the cross-start content edge of the flex container, the cross-end edge
            of the last line in the flex container is placed flush with the cross-end content edge of the flex
            container, and the remaining lines in the flex container are distributed so that the spacing between
            any two adjacent lines is the same.
            </remarks>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContentPosition.Around">
            <summary>
            Lines are evenly distributed in the flex container, with half-size spaces on either end.
            </summary>
            <remarks>
            If the leftover free-space is negative this value is identical to center.
            Otherwise, the lines in the flex container are distributed such that the spacing between
            any two adjacent lines is the same, and the spacing between the first/last lines and the
            flex container edges is half the size of the spacing between flex lines.
            </remarks>
        </member>
        <member name="P:Blazorise.IFluentFlexAlignContentPosition.Stretch">
            <summary>
            Lines stretch to take up the remaining space.
            </summary>
            <remarks>
            If the leftover free-space is negative, this value is identical to flex-start.
            Otherwise, the free-space is split equally between all of the lines, increasing their cross size.
            </remarks>
        </member>
        <member name="T:Blazorise.IFluentFlexGrowShrink">
            <summary>
            Rule for starting the flex grow and shrink.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexGrowShrink.Grow">
            <summary>
            Defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves
            as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexGrowShrink.Shrink">
            <summary>
            This defines the ability for a flex item to shrink if necessary.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexGrowShrinkSize">
            <summary>
            Defines all the allowed sizes for grow and shrink rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexGrowShrinkSize.Is0">
            <summary>
            Element uses a default space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexGrowShrinkSize.Is1">
            <summary>
            Element uses all available space it can.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexOrder">
            <summary>
            Rule for starting the flex order.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrder.Order">
            <summary>
            Controls the order in which items appear in the flex container.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexOrderNumber">
            <summary>
            Controls the order in which items appear in the flex container.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is0">
            <summary>
            A default order.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is1">
            <summary>
            An element will be shown as first item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is2">
            <summary>
            An element will be shown as second item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is3">
            <summary>
            An element will be shown as third item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is4">
            <summary>
            An element will be shown as fourth item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is5">
            <summary>
            An element will be shown as fifth item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is6">
            <summary>
            An element will be shown as sixth item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is7">
            <summary>
            An element will be shown as seventh item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is8">
            <summary>
            An element will be shown as eight item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is9">
            <summary>
            An element will be shown as ninth item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is10">
            <summary>
            An element will be shown as tenth item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is11">
            <summary>
            An element will be shown as eleventh item.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexOrderNumber.Is12">
            <summary>
            An element will be shown as twelvth item.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexWrap">
            <summary>
            Rule for starting the flex wrap.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexWrap.Wrap">
            <summary>
            Flex items will wrap onto multiple lines, from top to bottom.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexWrap.ReverseWrap">
            <summary>
            Flex items will wrap onto multiple lines from bottom to top.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexWrap.NoWrap">
            <summary>
            (default): all flex items will be on one line.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexFill">
            <summary>
            Rule for starting the flex fill.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentFlexFill.Fill">
            <summary>
            Force all child items to be equal widths.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentFlexCondition">
            <summary>
            Conditions for display rules.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentFlexCondition.If(System.Boolean)">
            <summary>
            Add a condition rule to the display.
            </summary>
            <param name="condition">Condition result.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="T:Blazorise.FlexDefinition">
            <summary>
            Holds the build information for current flex rules.
            </summary>
        </member>
        <member name="F:Blazorise.FlexDefinition.Empty">
            <summary>
            Gets the empty flex definition.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.Breakpoint">
            <summary>
            Defines the flex breakpoint rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.Direction">
            <summary>
            Defines the flex direction rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.JustifyContent">
            <summary>
            Defines the flex justify-content rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.AlignItems">
            <summary>
            Defines the flex align-items rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.AlignSelf">
            <summary>
            Defines the flex align-self rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.AlignContent">
            <summary>
            Defines the flex align-content rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.GrowShrink">
            <summary>
            Defines the flex grow or shrink rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.GrowShrinkSize">
            <summary>
            Defines the flex grow or shrink size.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.Wrap">
            <summary>
            Defines the flex wrap rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.Order">
            <summary>
            Defines the flex order rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.Fill">
            <summary>
            Defines the flex fill rule.
            </summary>
        </member>
        <member name="P:Blazorise.FlexDefinition.Condition">
            <summary>
            If condition is true the rule will will be applied.
            </summary>
        </member>
        <member name="T:Blazorise.FluentFlex">
            <summary>
            Default builder implementation of <see cref="T:Blazorise.IFluentFlex"/>.
            </summary>
        </member>
        <member name="F:Blazorise.FluentFlex.currentFlexType">
            <summary>
            Currently used display type.
            </summary>
        </member>
        <member name="F:Blazorise.FluentFlex.currentFlexDefinition">
            <summary>
            Currently used flex rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentFlex.rules">
            <summary>
            List of all flex rules to build.
            </summary>
        </member>
        <member name="F:Blazorise.FluentFlex.dirty">
            <summary>
            Indicates if the rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentFlex.classNames">
            <summary>
            Holds the built classnames based on the flex rules.
            </summary>
        </member>
        <member name="M:Blazorise.FluentFlex.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentFlex.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentFlex.WithFlexType(Blazorise.FlexType)">
            <summary>
            Starts the new flex type rule.
            </summary>
            <param name="flexType">Flex type to start.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.GetDefinition">
            <summary>
            Gets the current flex definition.
            </summary>
            <returns>Current definition or new if none was found.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.CreateDefinition">
            <summary>
            Creates the new flex definition.
            </summary>
            <returns>The newly created flex definition.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Applies the breakpoint rule to the current flex definition.
            </summary>
            <param name="breakpoint">Breakpoint to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithDirection(Blazorise.FlexDirection)">
            <summary>
            Applies the direction rule to the current flex definition.
            </summary>
            <param name="direction">Direction to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithJustifyContent">
            <summary>
            Creates the new justify-content rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithJustifyContent(Blazorise.FlexJustifyContent)">
            <summary>
            Applies the justify-content rule to the current flex definition.
            </summary>
            <param name="justifyContent">Justify-content to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithAlignItems">
            <summary>
            Creates the new align-items rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithAlignItems(Blazorise.FlexAlignItems)">
            <summary>
            Applies the align-items rule to the current flex definition.
            </summary>
            <param name="alignItems">Align-items to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithAlignSelf">
            <summary>
            Creates the new align-self rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithAlignSelf(Blazorise.FlexAlignSelf)">
            <summary>
            Applies the align-self rule to the current flex definition.
            </summary>
            <param name="alignSelf">Align-self to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithAlignContent">
            <summary>
            Creates the new align-content rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithAlignContent(Blazorise.FlexAlignContent)">
            <summary>
            Applies the align-content rule to the current flex definition.
            </summary>
            <param name="alignContent">Align-content to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithGrowShrink(Blazorise.FlexGrowShrink)">
            <summary>
            Creates the new grow or shrink rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithGrowShrinkSize(Blazorise.FlexGrowShrinkSize)">
            <summary>
            Applies the grow or shrink size rule to the current flex definition.
            </summary>
            <param name="growShrinkSize">Grow or shrink size to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithWrap(Blazorise.FlexWrap)">
            <summary>
            Creates the new wrap rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithOrder">
            <summary>
            Creates the new order rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithOrder(Blazorise.FlexOrder)">
            <summary>
            Applies the order rule to the current flex definition.
            </summary>
            <param name="order">Order to be apply.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.WithFill">
            <summary>
            Creates the new fill rule on the current flex definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentFlex.If(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.OnMobile">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.OnTablet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.OnDesktop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.OnWidescreen">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.OnFullHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.OnQuadHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Row">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.ReverseRow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Column">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.ReverseColumn">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Wrap">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.ReverseWrap">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.NoWrap">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.JustifyContent">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexJustifyContentPositions#Start">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexJustifyContentPositions#End">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexJustifyContentPositions#Center">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexJustifyContentPositions#Between">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexJustifyContentPositions#Around">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignItems#AlignItems">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignItemsPosition#Start">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignItemsPosition#End">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignItemsPosition#Center">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignItemsPosition#Baseline">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignItemsPosition#Stretch">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelf#AlignSelf">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelfPosition#Auto">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelfPosition#Start">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelfPosition#End">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelfPosition#Center">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelfPosition#Baseline">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignSelfPosition#Stretch">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContent#AlignContent">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContentPosition#Start">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContentPosition#End">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContentPosition#Center">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContentPosition#Between">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContentPosition#Around">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexAlignContentPosition#Stretch">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexGrowShrink#Grow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexGrowShrink#Shrink">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexGrowShrinkSize#Is0">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexGrowShrinkSize#Is1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexFill#Fill">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrder#Order">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is0">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is2">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is3">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is4">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is5">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is6">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is7">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is8">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is9">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is10">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is11">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentFlex.Blazorise#IFluentFlexOrderNumber#Is12">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Flex">
            <summary>
            Set of flex rules to start the build process.
            </summary>
        </member>
        <member name="P:Blazorise.Flex._">
            <summary>
            Explicitly starts the new set of rules for flex display.
            </summary>
            <remarks>
            By default all rules use "flex" type but in case someone wants to define it explicitly
            I have added this option. It is named as "_" because "Flex" cannot be used(Compiler Error CS0542).
            </remarks>
        </member>
        <member name="P:Blazorise.Flex.InlineFlex">
            <summary>
            Starts the new set of rules for inline-flex display.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Row">
            <summary>
            Default value. The flexible items are displayed horizontally, as a row.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.ReverseRow">
            <summary>
            Same as row, but in reverse order.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Column">
            <summary>
            The flexible items are displayed vertically, as a column.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.ReverseColumn">
            <summary>
            Same as column, but in reverse order.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.JustifyContent">
            <summary>
            Defines the alignment along the main axis.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.AlignItems">
            <summary>
            Defines the default behavior for how flex items are laid out along the cross axis on the current line.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.AlignSelf">
            <summary>
            Allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.AlignContent">
            <summary>
            The align-content property aligns a flex container’s lines within the
            flex container when there is extra space in the cross-axis.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Grow">
            <summary>
            Defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves
            as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Shrink">
            <summary>
            This defines the ability for a flex item to shrink if necessary.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Order">
            <summary>
            Controls the order in which items appear in the flex container.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Wrap">
            <summary>
            Flex items will wrap onto multiple lines, from top to bottom.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.ReverseWrap">
            <summary>
            Flex items will wrap onto multiple lines from bottom to top.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.NoWrap">
            <summary>
            All flex items will be on one line.
            </summary>
        </member>
        <member name="P:Blazorise.Flex.Fill">
            <summary>
            Force all child items to be equal widths.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGap">
            <summary>
            Base interface for all fluent gap builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentGap.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on gap rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentGapWithSide">
            <summary>
            Contains all the allowed gap rules, except sizes.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGapWithSideAndSize">
            <summary>
            Contains all the allowed gap rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGapFromSide">
            <summary>
            Allowed sides for gap rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapFromSide.OnX">
            <summary>
            For classes that set both *-left and *-right.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapFromSide.OnY">
            <summary>
            For classes that set both *-top and *-bottom.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapFromSide.OnAll">
            <summary>
            For classes that set a margin or padding on all 4 sides of the element.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGapWithSize">
            <summary>
            Allowed sizes for gap rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapWithSize.Is0">
            <summary>
            For classes that eliminate the margin or padding by setting it to 0.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapWithSize.Is1">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapWithSize.Is2">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapWithSize.Is3">
            <summary>
            (by default) for classes that set the margin or padding to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapWithSize.Is4">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGapWithSize.Is5">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 3
            </summary>
        </member>
        <member name="M:Blazorise.IFluentGapWithSize.Is(System.String)">
            <summary>
            Used to add custom gap rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.FluentGap">
            <summary>
            Default implementation of <see cref="T:Blazorise.IFluentGap"/>.
            </summary>
        </member>
        <member name="M:Blazorise.FluentGap.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentGap.WithSize(Blazorise.GapSize)">
            <summary>
            Appends the new gap size rule.
            </summary>
            <param name="gapSize">Gap size to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentGap.WithSide(Blazorise.GapSide)">
            <summary>
            Appends the new side rule.
            </summary>
            <param name="side">Side to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentGap.Is(System.String)">
            <summary>
            Used to add custom column rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="P:Blazorise.FluentGap.Is0">
            <summary>
            For classes that eliminate the margin or padding by setting it to 0.
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.Is1">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.Is2">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.Is3">
            <summary>
            (by default) for classes that set the margin or padding to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.Is4">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.Is5">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 3
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.OnX">
            <summary>
            For classes that set both *-left and *-right.
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.OnY">
            <summary>
            For classes that set both *-top and *-bottom.
            </summary>
        </member>
        <member name="P:Blazorise.FluentGap.OnAll">
            <summary>
            For classes that set a margin or padding on all 4 sides of the element.
            </summary>
        </member>
        <member name="T:Blazorise.Gap">
            <summary>
            Gap builder.
            </summary>
        </member>
        <member name="P:Blazorise.Gap.Is0">
            <summary>
            for classes that eliminate the margin by setting it to 0
            </summary>
        </member>
        <member name="P:Blazorise.Gap.Is1">
            <summary>
            (by default) for classes that set the margin to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.Gap.Is2">
            <summary>
            (by default) for classes that set the margin to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.Gap.Is3">
            <summary>
            (by default) for classes that set the margin to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.Gap.Is4">
            <summary>
            (by default) for classes that set the margin to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.Gap.Is5">
            <summary>
            (by default) for classes that set the margin to $spacer * 3
            </summary>
        </member>
        <member name="M:Blazorise.Gap.Is(System.String)">
            <summary>
            Add custom margin rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.IFluentGridColumns">
            <summary>
            Base interface for grid columns fluent builder.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentGridColumns.Class(Blazorise.IClassProvider)">
            <summary>
            Builds and returns the classnames for column sizes.
            </summary>
            <param name="classProvider">Class provider used by the current framework provider.</param>
            <returns>Return list of css classnames.</returns>
        </member>
        <member name="P:Blazorise.IFluentGridColumns.HasSizes">
            <summary>
            True if there are column sizes defined.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridColumnsBreakpoint">
            <summary>
            Allowed breakpoints for grid column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridColumnsSize">
            <summary>
            Allowed sizes for grid column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are1">
            <summary>
            One column width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are2">
            <summary>
            Two columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are3">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are4">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are5">
            <summary>
            Five columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are6">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are7">
            <summary>
            Seven columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are8">
            <summary>
            Eight columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are9">
            <summary>
            Nine columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are10">
            <summary>
            Ten columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are11">
            <summary>
            Eleven columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridColumnsSize.Are12">
            <summary>
            Twelve columns per row.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridColumnsAll">
            <summary>
            Contains all the rules for column sizes.
            </summary>
        </member>
        <member name="T:Blazorise.GridColumnsDefinition">
            <summary>
            Holds the build information for current grid columns rules.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumnsDefinition.Breakpoint">
            <summary>
            Defines the breakpoint rule.
            </summary>
        </member>
        <member name="T:Blazorise.FluentGridColumns">
            <summary>
            Default implementation of fluent grid columns builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentGridColumns.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentGridColumns.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentGridColumns.WithGridColumnsSize(Blazorise.GridColumnsSize)">
            <summary>
            Appends the new grid columns rule.
            </summary>
            <param name="gridColumnsSize">Grid column size to start the rule.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentGridColumns.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentGridColumns.HasSizes">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are2">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are3">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are4">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are5">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are6">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are7">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are8">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are9">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are10">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are11">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.Are12">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.OnMobile">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.OnTablet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.OnDesktop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.OnWidescreen">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.OnFullHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridColumns.OnQuadHD">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.GridColumns">
            <summary>
            Defines the number of columns to show in a grid.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are1">
            <summary>
            One column per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are2">
            <summary>
            Two columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are3">
            <summary>
            Three columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are4">
            <summary>
            Four columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are5">
            <summary>
            Five columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are6">
            <summary>
            Six columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are7">
            <summary>
            Seven columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are8">
            <summary>
            Eight columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are9">
            <summary>
            Nine columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are10">
            <summary>
            Ten columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are11">
            <summary>
            Eleven columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridColumns.Are12">
            <summary>
            Twelve columns per row.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridRows">
            <summary>
            Base interface for grid rows fluent builder.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentGridRows.Class(Blazorise.IClassProvider)">
            <summary>
            Builds and returns the classnames for row sizes.
            </summary>
            <param name="classProvider">Class provider used by the current framework provider.</param>
            <returns>Return list of css classnames.</returns>
        </member>
        <member name="P:Blazorise.IFluentGridRows.HasSizes">
            <summary>
            True if there are row sizes defined.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridRowsBreakpoint">
            <summary>
            Allowed breakpoints for grid row rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridRowsSize">
            <summary>
            Allowed sizes for grid row rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsSize.Are1">
            <summary>
            One row.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsSize.Are2">
            <summary>
            Two rows.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsSize.Are3">
            <summary>
            Three rows.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsSize.Are4">
            <summary>
            Four rows.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsSize.Are5">
            <summary>
            Five rows.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentGridRowsSize.Are6">
            <summary>
            Six rows.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentGridRowsAll">
            <summary>
            Contains all the rules for row sizes.
            </summary>
        </member>
        <member name="T:Blazorise.GridRowsDefinition">
            <summary>
            Holds the build information for current grid rows rules.
            </summary>
        </member>
        <member name="P:Blazorise.GridRowsDefinition.Breakpoint">
            <summary>
            Defines the breakpoint rule.
            </summary>
        </member>
        <member name="T:Blazorise.FluentGridRows">
            <summary>
            Default implementation of fluent grid rows builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentGridRows.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentGridRows.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentGridRows.WithGridRowsSize(Blazorise.GridRowsSize)">
            <summary>
            Appends the new grid rows rule.
            </summary>
            <param name="gridRowsSize">Grid row size to start the rule.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentGridRows.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentGridRows.HasSizes">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.Are1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.Are2">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.Are3">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.Are4">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.Are5">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.Are6">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.OnMobile">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.OnTablet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.OnDesktop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.OnWidescreen">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.OnFullHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentGridRows.OnQuadHD">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.GridRows">
            <summary>
            Defines the number of rows to show in a grid.
            </summary>
        </member>
        <member name="P:Blazorise.GridRows.Are1">
            <summary>
            One row per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridRows.Are2">
            <summary>
            Two rows per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridRows.Are3">
            <summary>
            Three rows per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridRows.Are4">
            <summary>
            Four rows per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridRows.Are5">
            <summary>
            Five rows per row.
            </summary>
        </member>
        <member name="P:Blazorise.GridRows.Are6">
            <summary>
            Six rows per row.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentOverflow">
            <summary>
            Base interface for all fluent overflow builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentOverflow.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on overflow rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentOverflowSecondRule">
            <summary>
            Second set of overflow rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentOverflowSecondRule.Visible">
            <summary>
            The overflow is not clipped. The content renders outside the element's box.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentOverflowSecondRule.Hidden">
            <summary>
            The overflow is clipped, and the rest of the content will be invisible.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentOverflowSecondRule.Scroll">
            <summary>
            The overflow is clipped, and a scrollbar is added to see the rest of the content.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentOverflowSecondRule.Auto">
            <summary>
            Similar to scroll, but it adds scrollbars only when necessary.
            </summary>
        </member>
        <member name="T:Blazorise.FluentOverflow">
            <summary>
            Default implementation of fluent overflow builder.
            </summary>
        </member>
        <member name="F:Blazorise.FluentOverflow.overflowType">
            <summary>
            Holds the default overflow type.
            </summary>
        </member>
        <member name="F:Blazorise.FluentOverflow.secondOverflowType">
            <summary>
            Holds the second overflow type.
            </summary>
        </member>
        <member name="F:Blazorise.FluentOverflow.dirty">
            <summary>
            Indicates if the rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentOverflow.classNames">
            <summary>
            Holds the built classnames bases on the overflow rules.
            </summary>
        </member>
        <member name="M:Blazorise.FluentOverflow.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentOverflow.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentOverflow.WithOverflow(Blazorise.OverflowType)">
            <summary>
            Starts the new overflow rule.
            </summary>
            <param name="overflowType">Overflow type to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentOverflow.WithSecondOverflow(Blazorise.OverflowType)">
            <summary>
            Starts the new overflow rule.
            </summary>
            <param name="overflowType">Overflow type to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentOverflow.Visible">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentOverflow.Hidden">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentOverflow.Scroll">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentOverflow.Auto">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Overflow">
            <summary>
            The overflow property controls what happens to content that is too big to fit into an area.
            </summary>
        </member>
        <member name="P:Blazorise.Overflow.Visible">
            <summary>
            The overflow is not clipped. The content renders outside the element's box.
            </summary>
        </member>
        <member name="P:Blazorise.Overflow.Hidden">
            <summary>
            The overflow is clipped, and the rest of the content will be invisible.
            </summary>
        </member>
        <member name="P:Blazorise.Overflow.Scroll">
            <summary>
            The overflow is clipped, and a scrollbar is added to see the rest of the content.
            </summary>
        </member>
        <member name="P:Blazorise.Overflow.Auto">
            <summary>
            Similar to scroll, but it adds scrollbars only when necessary.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPosition">
            <summary>
            Base interface for all fluent position builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentPosition.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on position rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentPositionType">
            <summary>
            Type of positions allowed for the fluent position builder.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionType.Static">
            <summary>
            An element is not positioned in any special way; it is always positioned according to the normal flow of the page.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionType.Relative">
            <summary>
            An element is positioned relative to its normal position.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionType.Absolute">
            <summary>
            An element is positioned relative to the nearest positioned ancestor (instead of positioned relative to the
            viewport, like fixed).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionType.Fixed">
            <summary>
            An element is positioned relative to the viewport, which means it always stays in the
            same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionType.Sticky">
            <summary>
            An element is positioned based on the user's scroll position.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPositionEdgeType">
            <summary>
            Defines the position of the element relative to its side.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeType.Top">
            <summary>
            The top property affects the vertical position of a positioned element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeType.Start">
            <summary>
            The left property affects the horizontal position of a positioned element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeType.Bottom">
            <summary>
            The top property affects the vertical position of a positioned element.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeType.End">
            <summary>
            The right property affects the horizontal position of a positioned element.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPositionEdgeOffset">
            <summary>
            Defines the offset, in percentages, relative to its edge.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeOffset.Is0">
            <summary>
            For 0 edge position.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeOffset.Is50">
            <summary>
            For 50% edge position.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionEdgeOffset.Is100">
            <summary>
            For 100% edge position.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPositionTranslate">
            <summary>
            Starts the translation rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionTranslate.Translate">
            <summary>
            Translation rule to start.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPositionTranslateType">
            <summary>
            Defines the types of element translations based on its center.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionTranslateType.Middle">
            <summary>
            Translate on both X and Y coordinates.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionTranslateType.MiddleX">
            <summary>
            Translate on X coordinate.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentPositionTranslateType.MiddleY">
            <summary>
            Translate on Y coordinate.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPositionWithEdgeTypeAndTranslateType">
            <summary>
            Set of rules for edges and translations.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentPositionWithAll">
            <summary>
            Combination of all position rules.
            </summary>
        </member>
        <member name="T:Blazorise.FluentPosition">
            <summary>
            Default implementation of fluent position builder.
            </summary>
        </member>
        <member name="T:Blazorise.FluentPosition.PositionEdgeDefinition">
            <summary>
            Holds the additions information for the current position rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentPosition.positionType">
            <summary>
            Holds the type of position for the current element. Only one can be applied by the element.
            </summary>
        </member>
        <member name="F:Blazorise.FluentPosition.currentPositionEdgeDefinition">
            <summary>
            Currently used edge rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentPosition.edgeRules">
            <summary>
            List of all position edge rules to build.
            </summary>
        </member>
        <member name="F:Blazorise.FluentPosition.translateType">
            <summary>
            Holds the type of translation for the current element.
            </summary>
        </member>
        <member name="F:Blazorise.FluentPosition.dirty">
            <summary>
            Indicates if the rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentPosition.classNames">
            <summary>
            Holds the built classnames bases on the position rules.
            </summary>
        </member>
        <member name="M:Blazorise.FluentPosition.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentPosition.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentPosition.WithPosition(Blazorise.PositionType)">
            <summary>
            Starts the new position rule.
            </summary>
            <param name="positionType">Position type to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentPosition.WithEdge(Blazorise.PositionEdgeType)">
            <summary>
            Starts the new edge rule.
            </summary>
            <param name="edgeType">Edge side to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentPosition.WithEdgeOffset(System.Int32)">
            <summary>
            Starts the new edge offset.
            </summary>
            <param name="offset">Edge offset to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentPosition.WithTranslate(Blazorise.PositionTranslateType)">
            <summary>
            Starts the new translate rule.
            </summary>
            <param name="translateType">Translate type to be applied.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentPosition.Static">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Relative">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Absolute">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Fixed">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Sticky">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Top">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Start">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Bottom">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.End">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Is0">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Is50">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Is100">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Translate">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.Middle">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.MiddleX">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentPosition.MiddleY">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Position">
            <summary>
            Set of position rules to start the build process.
            </summary>
        </member>
        <member name="P:Blazorise.Position.Static">
            <summary>
            An element is not positioned in any special way; it is always positioned according to the normal flow of the page.
            </summary>
            <remarks>
            Static positioned elements are not affected by the top, bottom, left, and right properties.
            </remarks>
        </member>
        <member name="P:Blazorise.Position.Relative">
            <summary>
            An element is positioned relative to its normal position.
            </summary>
        </member>
        <member name="P:Blazorise.Position.Absolute">
            <summary>
            An element is positioned relative to the nearest positioned ancestor (instead of positioned relative to the
            viewport, like fixed).
            </summary>
        </member>
        <member name="P:Blazorise.Position.Fixed">
            <summary>
            An element is positioned relative to the viewport, which means it always stays in the
            same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
            </summary>
        </member>
        <member name="P:Blazorise.Position.Sticky">
            <summary>
            An element is positioned based on the user's scroll position.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentRowColumns">
            <summary>
            Base interface for row columns fluent builder.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentRowColumns.Class(Blazorise.IClassProvider)">
            <summary>
            Builds and returns the classnames for column sizes.
            </summary>
            <param name="classProvider">Class provider used by the current framework provider.</param>
            <returns>Return list of css classnames.</returns>
        </member>
        <member name="P:Blazorise.IFluentRowColumns.HasSizes">
            <summary>
            True if there are column sizes defined.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentRowColumnsBreakpoint">
            <summary>
            Allowed breakpoints for row column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentRowColumnsSize">
            <summary>
            Allowed sizes for row column rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsSize.Are1">
            <summary>
            One column width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsSize.Are2">
            <summary>
            Two columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsSize.Are3">
            <summary>
            Three columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsSize.Are4">
            <summary>
            Four columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsSize.Are5">
            <summary>
            Five columns width.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentRowColumnsSize.Are6">
            <summary>
            Six columns width.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentRowColumnsAll">
            <summary>
            Contains all the rules for column sizes.
            </summary>
        </member>
        <member name="T:Blazorise.RowColumnsDefinition">
            <summary>
            Holds the build information for current row columns rules.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumnsDefinition.Breakpoint">
            <summary>
            Defines the breakpoint rule.
            </summary>
        </member>
        <member name="T:Blazorise.FluentRowColumns">
            <summary>
            Default implementation of fluent row columns builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentRowColumns.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentRowColumns.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentRowColumns.WithRowColumnsSize(Blazorise.RowColumnsSize)">
            <summary>
            Appends the new row columns rule.
            </summary>
            <param name="rowColumnsSize">Row column size to start the rule.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentRowColumns.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentRowColumns.HasSizes">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.Are1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.Are2">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.Are3">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.Are4">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.Are5">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.Are6">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.OnMobile">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.OnTablet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.OnDesktop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.OnWidescreen">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.OnFullHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentRowColumns.OnQuadHD">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.RowColumns">
            <summary>
            Defines the number of columns to show in a row.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumns.Are1">
            <summary>
            One column per row.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumns.Are2">
            <summary>
            Two columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumns.Are3">
            <summary>
            Three columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumns.Are4">
            <summary>
            Four columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumns.Are5">
            <summary>
            Five columns per row.
            </summary>
        </member>
        <member name="P:Blazorise.RowColumns.Are6">
            <summary>
            Six columns per row.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizing">
            <summary>
            Base interface for all fluent sizing builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentSizing.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on sizing rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="M:Blazorise.IFluentSizing.Style(Blazorise.IStyleProvider)">
            <summary>
            Builds the styles based on sizing rules.
            </summary>
            <param name="styleProvider">Currently used style provider.</param>
            <returns>List of styles for the given rules and the style provider.</returns>
        </member>
        <member name="P:Blazorise.IFluentSizing.FixedSize">
            <summary>
            Gets the fixed size value, or null if it's undefined.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll">
            <summary>
            Contains all the allowed sizing rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingWithSizeOnBreakpoint">
            <summary>
            Contains sizing rules for size and breakpoint.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingOnBreakpoint">
            <summary>
            Allowed breakpoints for sizing rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingOnBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingOnBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingOnBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingOnBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingOnBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingOnBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingSize">
            <summary>
            Allowed rules for sizing rule sizes.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Is25">
            <summary>
            An element will occupy 25% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Is33">
            <summary>
            An element will occupy third of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Is50">
            <summary>
            An element will occupy 50% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Is66">
            <summary>
            An element will occupy two thirds of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Is75">
            <summary>
            An element will occupy 75% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Is100">
            <summary>
            An element will occupy 100% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingSize.Auto">
            <summary>
            The browser calculates the size.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentSizingSize.Is(System.String,System.Double)">
            <summary>
            Defines the manual size.
            </summary>
            <param name="unit">Unit value, eg. in px, rem, em, etc.</param>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="T:Blazorise.IFluentSizingMinMaxViewport">
            <summary>
            Contains the min, max and viewport rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingMinMaxViewportOnBreakpoint">
            <summary>
            Contains the min, max and viewport rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingMin">
            <summary>
            Contains the min rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingMin.Min">
            <summary>
            Size will be defined for the min attribute(s) of the element style.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingViewport">
            <summary>
            Contains the viewport rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingViewport.Viewport">
            <summary>
            Size will be defined for the viewport.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSizingMax">
            <summary>
            Contains the max rule.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSizingMax.Max">
            <summary>
            Size will be defined for the max attribute(s) of the element style.
            </summary>
        </member>
        <member name="T:Blazorise.SizingDefinition">
            <summary>
            Holds the build information for current sizing rules.
            </summary>
        </member>
        <member name="P:Blazorise.SizingDefinition.IsMin">
            <summary>
            Size will be defined for the min attribute(s) of the element style.
            </summary>
        </member>
        <member name="P:Blazorise.SizingDefinition.IsMax">
            <summary>
            Size will be defined for the max attribute(s) of the element style.
            </summary>
        </member>
        <member name="P:Blazorise.SizingDefinition.IsViewport">
            <summary>
            Size will be defined for the viewport.
            </summary>
        </member>
        <member name="P:Blazorise.SizingDefinition.Breakpoint">
            <summary>
            Defines the media breakpoint where the sizing rule will be applied.
            </summary>
        </member>
        <member name="T:Blazorise.FixedSizingDefiniton">
            <summary>
            Holds the build information for fixes sizing rules.
            </summary>
        </member>
        <member name="P:Blazorise.FixedSizingDefiniton.Unit">
            <summary>
            Defines the CSS unit name.
            </summary>
        </member>
        <member name="P:Blazorise.FixedSizingDefiniton.Size">
            <summary>
            Defines the size value.
            </summary>
        </member>
        <member name="T:Blazorise.FluentSizing">
            <summary>
            Default builder implementation of <see cref="T:Blazorise.IFluentSizing"/>.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.sizingType">
            <summary>
            Currently used sizing type.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.currentSizingDefinition">
            <summary>
            Currently used sizing rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.rules">
            <summary>
            Holds the list of defined sizing rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.styleRule">
            <summary>
            Holds the sizing rules for the style.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.dirty">
            <summary>
            Indicates if the rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.styleDirty">
            <summary>
            Indicates if the style rules have changed.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.classNames">
            <summary>
            Holds the built classnames based on the sizing rules.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSizing.styleNames">
            <summary>
            Holds the built stylenames based on the sizing rules.
            </summary>
        </member>
        <member name="M:Blazorise.FluentSizing.#ctor(Blazorise.SizingType)">
            <summary>
            A default <see cref="T:Blazorise.FluentSizing"/> constructor.
            </summary>
            <param name="sizingType">Sizing builder type.</param>
        </member>
        <member name="M:Blazorise.FluentSizing.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentSizing.Style(Blazorise.IStyleProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentSizing.Dirty">
            <summary>
            Flags the classnames to be rebuilt.
            </summary>
        </member>
        <member name="M:Blazorise.FluentSizing.WithSize(Blazorise.SizingSize)">
            <summary>
            Starts the new sizing rule.
            </summary>
            <param name="sizingSize">Size of the element.</param>
            <returns>Next rule reference.</returns>returns>
        </member>
        <member name="M:Blazorise.FluentSizing.WithSize(System.String,System.Double)">
            <summary>
            Starts the new sizing rule for styles.
            </summary>
            <param name="unit">Unit it the style.</param>
            <param name="size">Size of the element.</param>
            <returns>Next rule reference.</returns>returns>
        </member>
        <member name="M:Blazorise.FluentSizing.WithMin">
            <summary>
            Sets the min rule for the current definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentSizing.WithMax">
            <summary>
            Sets the max rule for the current definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentSizing.WithViewport">
            <summary>
            Sets the viewport rule for the current definition.
            </summary>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentSizing.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentSizing.FixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Is25">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Is33">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Is50">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Is66">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Is75">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Is100">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingSize#Auto">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingMin#Min">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingMax#Max">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.Blazorise#IFluentSizingViewport#Viewport">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.OnMobile">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.OnTablet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.OnDesktop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.OnWidescreen">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.OnFullHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentSizing.OnQuadHD">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Width">
            <summary>
            Set of width sizing rules to start the build process.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Is25">
            <summary>
            An element will occupy 25% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Is33">
            <summary>
            An element will occupy third of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Is50">
            <summary>
            An element will occupy 50% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Is66">
            <summary>
            An element will occupy two thirds of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Is75">
            <summary>
            An element will occupy 75% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Is100">
            <summary>
            An element will occupy 100% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Width.Auto">
            <summary>
            The browser calculates the size.
            </summary>
        </member>
        <member name="M:Blazorise.Width.Px(System.Double)">
            <summary>
            Defines the element size in pixels (1px = 1/96th of 1in).
            </summary>
            <param name="size">Size value.</param>
            <remarks>
            Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.
            </remarks>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="M:Blazorise.Width.Rem(System.Double)">
            <summary>
            Defines the element size, relative to font-size of the root element.
            </summary>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="M:Blazorise.Width.Em(System.Double)">
            <summary>
            Defines the element size, relative to the font-size of the element (2em means 2 times the size of the current font).
            </summary>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="M:Blazorise.Width.Ch(System.Double)">
            <summary>
            Defines the advance measure (width) of the glyph "0" of the element's font.
            </summary>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="P:Blazorise.Width.Max100">
            <summary>
            Defines the maximum allowed element width. Shorthand for "Width.Is100.Max".
            </summary>
        </member>
        <member name="T:Blazorise.Height">
            <summary>
            Set of height sizing rules to start the build process.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Is25">
            <summary>
            An element will occupy 25% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Is33">
            <summary>
            An element will occupy third of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Is50">
            <summary>
            An element will occupy 50% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Is66">
            <summary>
            An element will occupy two thirds of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Is75">
            <summary>
            An element will occupy 75% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Is100">
            <summary>
            An element will occupy 100% of its parent space.
            </summary>
        </member>
        <member name="P:Blazorise.Height.Auto">
            <summary>
            The browser calculates the size.
            </summary>
        </member>
        <member name="M:Blazorise.Height.Px(System.Double)">
            <summary>
            Defines the element size in pixels (1px = 1/96th of 1in).
            </summary>
            <param name="size">Size value.</param>
            <remarks>
            Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.
            </remarks>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="M:Blazorise.Height.Rem(System.Double)">
            <summary>
            Defines the element size, relative to font-size of the root element.
            </summary>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="M:Blazorise.Height.Em(System.Double)">
            <summary>
            Defines the element size, relative to the font-size of the element (2em means 2 times the size of the current font).
            </summary>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="M:Blazorise.Height.Ch(System.Double)">
            <summary>
            Defines the advance measure (width) of the glyph "0" of the element's font.
            </summary>
            <param name="size">Size value.</param>
            <returns>Returns the <see cref="T:Blazorise.IFluentSizing"/> reference.</returns>
        </member>
        <member name="P:Blazorise.Height.Max100">
            <summary>
            Defines the maximum allowed element height. Shorthand for "Height.Is100.Max".
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSpacing">
            <summary>
            Base interface for all fluent spacing builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentSpacing.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on spacing rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentSpacingOnBreakpointWithSide">
            <summary>
            Contains all the allowed spacing rules, except sizes.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSpacingOnBreakpointWithSideAndSize">
            <summary>
            Contains all the allowed spacing rules.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSpacingFromSide">
            <summary>
            Allowed sides for spacing rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.FromTop">
            <summary>
            For classes that set margin-top or padding-top.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.FromBottom">
            <summary>
            For classes that set margin-bottom or padding-bottom.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.FromStart">
            <summary>
            For classes that set margin-left or padding-left.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.FromEnd">
            <summary>
            For classes that set margin-right or padding-right.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.OnX">
            <summary>
            For classes that set both *-left and *-right.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.OnY">
            <summary>
            For classes that set both *-top and *-bottom.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingFromSide.OnAll">
            <summary>
            For classes that set a margin or padding on all 4 sides of the element.
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSpacingOnBreakpoint">
            <summary>
            Allowed breakpoints for spacing rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingOnBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingOnBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingOnBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingOnBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingOnBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingOnBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentSpacingWithSize">
            <summary>
            Allowed sizes for spacing rules.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.Is0">
            <summary>
            For classes that eliminate the margin or padding by setting it to 0.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.Is1">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.Is2">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.Is3">
            <summary>
            (by default) for classes that set the margin or padding to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.Is4">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.Is5">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 3
            </summary>
        </member>
        <member name="P:Blazorise.IFluentSpacingWithSize.IsAuto">
            <summary>
            For classes that set the margin to auto.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentSpacingWithSize.Is(System.String)">
            <summary>
            Used to add custom spacing rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.FluentSpacing">
            <summary>
            Default implementation of <see cref="T:Blazorise.IFluentSpacing"/>.
            </summary>
        </member>
        <member name="F:Blazorise.FluentSpacing.spacing">
            <summary>
            Spacing type.
            </summary>
        </member>
        <member name="M:Blazorise.FluentSpacing.#ctor(Blazorise.Spacing)">
            <summary>
            A default <see cref="T:Blazorise.FluentSpacing"/> constructor.
            </summary>
            <param name="spacing">Spacing builder type.</param>
        </member>
        <member name="M:Blazorise.FluentSpacing.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentSpacing.WithSize(Blazorise.SpacingSize)">
            <summary>
            Appends the new spacing size rule.
            </summary>
            <param name="spacingSize">Spacing size to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentSpacing.WithSide(Blazorise.Side)">
            <summary>
            Appends the new side rule.
            </summary>
            <param name="side">Side to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentSpacing.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            Appends the new breakpoint rule.
            </summary>
            <param name="breakpoint">Breakpoint to append.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentSpacing.Is(System.String)">
            <summary>
            Used to add custom column rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="P:Blazorise.FluentSpacing.Spacing">
            <summary>
            Gets the spacing type.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.Is0">
            <summary>
            For classes that eliminate the margin or padding by setting it to 0.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.Is1">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.Is2">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.Is3">
            <summary>
            (by default) for classes that set the margin or padding to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.Is4">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.Is5">
            <summary>
            (by default) for classes that set the margin or padding to $spacer * 3
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.IsAuto">
            <summary>
            For classes that set the margin to auto.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.FromTop">
            <summary>
            For classes that set margin-top or padding-top.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.FromBottom">
            <summary>
            For classes that set margin-bottom or padding-bottom.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.FromStart">
            <summary>
            For classes that set margin-left or padding-left.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.FromEnd">
            <summary>
            For classes that set margin-right or padding-right.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnX">
            <summary>
            For classes that set both *-left and *-right.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnY">
            <summary>
            For classes that set both *-top and *-bottom.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnAll">
            <summary>
            For classes that set a margin or padding on all 4 sides of the element.
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.FluentSpacing.OnQuadHD">
            <summary>
            Breakpoint on large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.FluentMargin">
            <summary>
            Implementation of margin spacing builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentMargin.#ctor">
            <summary>
            A default <see cref="T:Blazorise.FluentMargin"/> constructor.
            </summary>
        </member>
        <member name="T:Blazorise.FluentPadding">
            <summary>
            Implementation of padding spacing builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentPadding.#ctor">
            <summary>
            A default <see cref="T:Blazorise.FluentPadding"/> constructor.
            </summary>
        </member>
        <member name="T:Blazorise.Margin">
            <summary>
            Margin builder.
            </summary>
        </member>
        <member name="P:Blazorise.Margin.Is0">
            <summary>
            for classes that eliminate the margin by setting it to 0
            </summary>
        </member>
        <member name="P:Blazorise.Margin.Is1">
            <summary>
            (by default) for classes that set the margin to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.Margin.Is2">
            <summary>
            (by default) for classes that set the margin to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.Margin.Is3">
            <summary>
            (by default) for classes that set the margin to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.Margin.Is4">
            <summary>
            (by default) for classes that set the margin to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.Margin.Is5">
            <summary>
            (by default) for classes that set the margin to $spacer * 3
            </summary>
        </member>
        <member name="P:Blazorise.Margin.IsAuto">
            <summary>
            For classes that set the margin to auto.
            </summary>
        </member>
        <member name="M:Blazorise.Margin.Is(System.String)">
            <summary>
            Add custom margin rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.Padding">
            <summary>
            Padding builder.
            </summary>
        </member>
        <member name="P:Blazorise.Padding.Is0">
            <summary>
            for classes that eliminate the padding by setting it to 0
            </summary>
        </member>
        <member name="P:Blazorise.Padding.Is1">
            <summary>
            (by default) for classes that set the padding to $spacer * .25
            </summary>
        </member>
        <member name="P:Blazorise.Padding.Is2">
            <summary>
            (by default) for classes that set the padding to $spacer * .5
            </summary>
        </member>
        <member name="P:Blazorise.Padding.Is3">
            <summary>
            (by default) for classes that set the padding to $spacer
            </summary>
        </member>
        <member name="P:Blazorise.Padding.Is4">
            <summary>
            (by default) for classes that set the padding to $spacer * 1.5
            </summary>
        </member>
        <member name="P:Blazorise.Padding.Is5">
            <summary>
            (by default) for classes that set the padding to $spacer * 3
            </summary>
        </member>
        <member name="P:Blazorise.Padding.IsAuto">
            <summary>
            For classes that set the margin to auto.
            </summary>
        </member>
        <member name="M:Blazorise.Padding.Is(System.String)">
            <summary>
            Add custom padding rule.
            </summary>
            <param name="value">Custom css classname.</param>
        </member>
        <member name="T:Blazorise.IFluentTextSize">
            <summary>
            Base interface for all fluent text size builders.
            </summary>
        </member>
        <member name="M:Blazorise.IFluentTextSize.Class(Blazorise.IClassProvider)">
            <summary>
            Builds the classnames based on text size rules.
            </summary>
            <param name="classProvider">Currently used class provider.</param>
            <returns>List of classnames for the given rules and the class provider.</returns>
        </member>
        <member name="T:Blazorise.IFluentTextSizeOnBreakpoint">
            <summary>
            Breakpoints allowed for text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeOnBreakpoint.OnMobile">
            <summary>
            Valid on all devices. (extra small)
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeOnBreakpoint.OnTablet">
            <summary>
            Breakpoint on tablets (small).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeOnBreakpoint.OnDesktop">
            <summary>
             Breakpoint on desktop (medium).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeOnBreakpoint.OnWidescreen">
            <summary>
            Breakpoint on widescreen (large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeOnBreakpoint.OnFullHD">
            <summary>
            Breakpoint on large desktops (extra large).
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeOnBreakpoint.OnQuadHD">
            <summary>
            Breakpoint on extra large desktops (extra extra large).
            </summary>
        </member>
        <member name="T:Blazorise.IFluentTextSizeWithSize">
            <summary>
            Sizes allowed for text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Default">
            <summary>
            No particular size rule will be applied, meaning a default size will be used.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.ExtraSmall">
            <summary>
            Makes an element text extra small size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Small">
            <summary>
            Makes an element text small size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Medium">
            <summary>
            Makes an element text medium size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Large">
            <summary>
            Makes an element text large.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.ExtraLarge">
            <summary>
            Makes an element text extra large.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Heading1">
            <summary>
            Matches the element text size with the h1 text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Heading2">
            <summary>
            Matches the element text size with the h2 text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Heading3">
            <summary>
            Matches the element text size with the h3 text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Heading4">
            <summary>
            Matches the element text size with the h4 text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Heading5">
            <summary>
            Matches the element text size with the h5 text size.
            </summary>
        </member>
        <member name="P:Blazorise.IFluentTextSizeWithSize.Heading6">
            <summary>
            Matches the element text size with the h6 text size.
            </summary>
        </member>
        <member name="T:Blazorise.TextSizeDefinition">
            <summary>
            Defines the size information for the breakpoint.
            </summary>
        </member>
        <member name="P:Blazorise.TextSizeDefinition.Breakpoint">
            <summary>
            Defines the breakpoint on which the text size will apply.
            </summary>
        </member>
        <member name="T:Blazorise.FluentTextSize">
            <summary>
            Default implementation of fluent text size builder.
            </summary>
        </member>
        <member name="M:Blazorise.FluentTextSize.Class(Blazorise.IClassProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FluentTextSize.WithSize(Blazorise.TextSizeType)">
            <summary>
            Starts the new text size.
            </summary>
            <param name="textSize">Text size to start.</param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="M:Blazorise.FluentTextSize.WithBreakpoint(Blazorise.Breakpoint)">
            <summary>
            
            </summary>
            <param name="breakpoint"></param>
            <returns>Next rule reference.</returns>
        </member>
        <member name="P:Blazorise.FluentTextSize.OnMobile">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.OnTablet">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.OnDesktop">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.OnWidescreen">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.OnFullHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.OnQuadHD">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Default">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.ExtraSmall">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Small">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Medium">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Large">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.ExtraLarge">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Heading1">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Heading2">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Heading3">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Heading4">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Heading5">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FluentTextSize.Heading6">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.TextSize">
            <summary>
            Defines the text size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Default">
            <summary>
            No particular size rule will be applied, meaning a default size will be used.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.ExtraSmall">
            <summary>
            Makes an element text extra small size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Small">
            <summary>
            Makes an element text small size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Medium">
            <summary>
            Makes an element text medium size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Large">
            <summary>
            Makes an element text large.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.ExtraLarge">
            <summary>
            Makes an element text extra large.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Heading1">
            <summary>
            Matches the element text size with the h1 text size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Heading2">
            <summary>
            Matches the element text size with the h2 text size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Heading3">
            <summary>
            Matches the element text size with the h3 text size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Heading4">
            <summary>
            Matches the element text size with the h4 text size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Heading5">
            <summary>
            Matches the element text size with the h5 text size.
            </summary>
        </member>
        <member name="P:Blazorise.TextSize.Heading6">
            <summary>
            Matches the element text size with the h6 text size.
            </summary>
        </member>
        <member name="T:Blazorise.Infrastructure.EventCallbackSubscribable`1">
            <summary>
            Represents an event that you may subscribe to. This differs from normal C# events in that the handlers
            are EventCallback<typeparamref name="T"/>, and so may have async behaviors and cause component re-rendering
            while retaining error flow.
            </summary>
            <typeparam name="T">A type for the eventargs.</typeparam>
        </member>
        <member name="M:Blazorise.Infrastructure.EventCallbackSubscribable`1.InvokeCallbackAsync(`0)">
            <summary>
            Invokes all the registered callbacks sequentially, in an undefined order.
            </summary>
        </member>
        <member name="M:Blazorise.Infrastructure.EventCallbackSubscribable`1.Subscribe(Blazorise.Infrastructure.EventCallbackSubscriber{`0},Microsoft.AspNetCore.Components.EventCallback{`0})">
            <summary>
            Don't call this directly - it gets called by EventCallbackSubscription.
            </summary>
            <param name="owner"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Blazorise.Infrastructure.EventCallbackSubscribable`1.Unsubscribe(Blazorise.Infrastructure.EventCallbackSubscriber{`0})">
            <summary>
            Don't call this directly - it gets called by EventCallbackSubscription.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="T:Blazorise.Infrastructure.EventCallbackSubscriber`1">
            <summary>
            Represents a subscriber that may be subscribe to an <see cref="T:Blazorise.Infrastructure.EventCallbackSubscribable`1"/>.
            The subscription can move between <see cref="T:Blazorise.Infrastructure.EventCallbackSubscribable`1"/> instances over time,
            and automatically unsubscribes from earlier <see cref="T:Blazorise.Infrastructure.EventCallbackSubscribable`1"/> instances
            whenever it moves to a new one.
            </summary>
        </member>
        <member name="M:Blazorise.Infrastructure.EventCallbackSubscriber`1.#ctor(Microsoft.AspNetCore.Components.EventCallback{`0})">
            <summary>
            A default <see cref="T:Blazorise.Infrastructure.EventCallbackSubscriber`1"/> constructor.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Blazorise.Infrastructure.EventCallbackSubscriber`1.SubscribeOrMove(Blazorise.Infrastructure.EventCallbackSubscribable{`0})">
             <summary>
             Creates a subscription on the <paramref name="subscribable"/>, or moves any existing subscription to it
             by first unsubscribing from the previous <see cref="T:Blazorise.Infrastructure.EventCallbackSubscribable`1"/>.
            
             If the supplied <paramref name="subscribable"/> is null, no new subscription will be created, but any
             existing one will still be unsubscribed.
             </summary>
             <param name="subscribable"></param>
        </member>
        <member name="M:Blazorise.Infrastructure.EventCallbackSubscriber`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.IAnimatedComponent">
            <summary>
            Providers the necessary logic to open or close an animated component
            </summary>
        </member>
        <member name="P:Blazorise.IAnimatedComponent.Animated">
            <summary>
            Gets or sets whether the component has any animations.
            </summary>
        </member>
        <member name="P:Blazorise.IAnimatedComponent.AnimationDuration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="M:Blazorise.IAnimatedComponent.BeginAnimation(System.Boolean)">
            <summary>
            Starts the component animation.
            </summary>
            <param name="visible">Visibility flag.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IAnimatedComponent.EndAnimation(System.Boolean)">
            <summary>
            Ends the component animation.
            </summary>
            <param name="visible">Visibility flag.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IBreakpointActivator">
            <summary>
            Interface to be used for the "togglers" that are responsible to open/close other components(dropdown, bar, modal, etc.).
            </summary>
        </member>
        <member name="P:Blazorise.IBreakpointActivator.ElementId">
            <summary>
            Gets the id of the component that has activated the close procedure.
            </summary>
        </member>
        <member name="P:Blazorise.IBreakpointActivator.Breakpoint">
            <summary>
            Gets the breakpoint.
            </summary>
        </member>
        <member name="M:Blazorise.IBreakpointActivator.OnBreakpoint(System.Boolean)">
            <summary>
            Triggers the component to activate breakpoint.
            </summary>
            <param name="broken">The reason for closing the component.</param>
        </member>
        <member name="P:Blazorise.IClassProvider.UseCustomInputStyles">
            <summary>
            Enables a custom css for select/check/radio/file inputs.
            </summary>
        </member>
        <member name="P:Blazorise.IClassProvider.Provider">
            <summary>
            Gets the provider implementation name.
            </summary>
        </member>
        <member name="T:Blazorise.ICloseActivator">
            <summary>
            Interface to be used for the "togglers" that are responsible to open/close other components(dropdown, bar, modal, etc.).
            </summary>
        </member>
        <member name="P:Blazorise.ICloseActivator.ElementRef">
            <summary>
            Gets the element reference of the component that has activated the close procedure.
            </summary>
        </member>
        <member name="P:Blazorise.ICloseActivator.ElementId">
            <summary>
            Gets the id of the component that has activated the close procedure.
            </summary>
        </member>
        <member name="M:Blazorise.ICloseActivator.IsSafeToClose(System.String,Blazorise.CloseReason,System.Boolean)">
            <summary>
            Finds if the closable component is ready to be closed.
            </summary>
            <param name="elementId">Currently clicked element id.</param>
            <param name="closeReason">The reason for closing the component.</param>
            <param name="isChild">Determines if the clicked element is a child.</param>
            <returns>Returns true if the closable component is ready to be closed.</returns>
        </member>
        <member name="M:Blazorise.ICloseActivator.Close(Blazorise.CloseReason)">
            <summary>
            Triggers the closable component to be closed.
            </summary>
            <param name="closeReason">The reason for closing the component.</param>
        </member>
        <member name="T:Blazorise.IColumnComponent">
            <summary>
            Interface for the components based on column sizes.
            </summary>
        </member>
        <member name="P:Blazorise.IColumnComponent.ColumnSize">
            <summary>
            Defines the sizing rules for the column.
            </summary>
        </member>
        <member name="T:Blazorise.IFocusableComponent">
            <summary>
            Default contract for the component that can be focused.
            </summary>
        </member>
        <member name="M:Blazorise.IFocusableComponent.Focus(System.Boolean)">
            <summary>
            Sets the focus on the underline element.
            </summary>
            <param name="scrollToElement">If true the browser should scroll the document to bring the newly-focused element into view.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Blazorise.IFocusableComponent.Autofocus">
            <summary>
            Gets the value that indicates if the component should autofocus.
            </summary>
        </member>
        <member name="T:Blazorise.IFocusableContainerComponent">
            <summary>
            Base component that is used as a container for focusable components.
            </summary>
        </member>
        <member name="M:Blazorise.IFocusableContainerComponent.NotifyFocusableComponentInitialized(Blazorise.IFocusableComponent)">
            <summary>
            Notifies the container component that its <see cref="T:Blazorise.IFocusableComponent"/> is initialized.
            </summary>
            <param name="focusableComponent">Nested focusable component.</param>
        </member>
        <member name="M:Blazorise.IFocusableContainerComponent.NotifyFocusableComponentRemoved(Blazorise.IFocusableComponent)">
            <summary>
            Notifies the container component that its <see cref="T:Blazorise.IFocusableComponent"/> is removed.
            </summary>
            <param name="focusableComponent">Nested focusable component.</param>
        </member>
        <member name="T:Blazorise.IHideableComponent">
            <summary>
            Providers the necessary logic to show or hide a component.
            </summary>
        </member>
        <member name="M:Blazorise.IHideableComponent.Show">
            <summary>
            Shows the component.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IHideableComponent.Hide">
            <summary>
            Hides the component.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IIconProvider">
            <summary>
            Default contract for all icon providers.
            </summary>
        </member>
        <member name="M:Blazorise.IIconProvider.Icon(System.Object,Blazorise.IconStyle)">
            <summary>
            Gets the predefined icon style.
            </summary>
            <param name="name">Icon name.</param>
            <param name="iconStyle">Icon style.</param>
            <returns>Icon name.</returns>
        </member>
        <member name="M:Blazorise.IIconProvider.IconSize(Blazorise.IconSize)">
            <summary>
            Gets the predefined icon size classname.
            </summary>
            <param name="iconSize">Icon size.</param>
            <returns>The size classname.</returns>
        </member>
        <member name="M:Blazorise.IIconProvider.GetIconName(Blazorise.IconName,Blazorise.IconStyle)">
            <summary>
            Gets the icon name by predefined icon type.
            </summary>
            <param name="name"></param>
            <param name="iconStyle">Icon style.</param>
            <returns>Icon name.</returns>
        </member>
        <member name="M:Blazorise.IIconProvider.SetIconName(Blazorise.IconName,System.String)">
            <summary>
            Overrides the predefined icon name.
            </summary>
            <param name="name">Icon to override.</param>
            <param name="newName">New icon name.</param>
        </member>
        <member name="M:Blazorise.IIconProvider.GetIconName(System.String)">
            <summary>
            Gets the icon name by the custom icon name.
            </summary>
            <param name="customName"></param>
            <returns>Icon name.</returns>
        </member>
        <member name="P:Blazorise.IIconProvider.IconNameAsContent">
            <summary>
            Indicates if the classname will be defined as tag content. 
            </summary>
        </member>
        <member name="T:Blazorise.IIdGenerator">
            <summary>
            An interface implemented by Id generators.
            </summary>
        </member>
        <member name="P:Blazorise.IIdGenerator.Generate">
            <summary>
            Gets the newly generated and globally unique value.
            </summary>
        </member>
        <member name="T:Blazorise.IMessageService">
            <summary>
            Service to show a simple message or prompt dialog with an optional icon.
            </summary>
        </member>
        <member name="E:Blazorise.IMessageService.MessageReceived">
            <summary>
            An event raised after the message is received. Used to notify the message dialog.
            </summary>
        </member>
        <member name="M:Blazorise.IMessageService.Info(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple info message with an optional icon.
            </summary>
            <param name="message">Info message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Info(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple info message with an optional icon.
            </summary>
            <param name="message">Info message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Success(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple success message with an optional icon.
            </summary>
            <param name="message">Success message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Success(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple success message with an optional icon.
            </summary>
            <param name="message">Success message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Warning(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple warning message with an optional icon.
            </summary>
            <param name="message">Warning message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Warning(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple warning message with an optional icon.
            </summary>
            <param name="message">Warning message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Error(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple error message with an optional icon.
            </summary>
            <param name="message">Error message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Error(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the simple error message with an optional icon.
            </summary>
            <param name="message">Error message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Confirm(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the confirmation message with an optional icon and will wait until user clicks on one of the supplied actions.
            </summary>
            <param name="message">Confirmation message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IMessageService.Confirm(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <summary>
            Show the confirmation message with an optional icon and will wait until user clicks on one of the supplied actions.
            </summary>
            <param name="message">Confirmation message to show.</param>
            <param name="title">Message title.</param>
            <param name="options">Options to override message dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IModalService">
            <summary>
            Together with ModalProvider, handles the instantiation of modals with custom content.
            </summary>
        </member>
        <member name="P:Blazorise.IModalService.ModalProvider">
            <summary>
            Required Modal Provider that manages the instantiation of modals with custom content.
            </summary>
        </member>
        <member name="M:Blazorise.IModalService.SetModalProvider(Blazorise.ModalProvider)">
            <summary>
            Sets the required Modal Provider.
            </summary>
            <param name="modalProvider"></param>
        </member>
        <member name="M:Blazorise.IModalService.Show``1">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="M:Blazorise.IModalService.Show``1(System.String)">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show``1(System.Action{Blazorise.ModalProviderParameterBuilder{``0}})">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show``1(System.Action{Blazorise.ModalProviderParameterBuilder{``0}},Blazorise.ModalInstanceOptions)">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="parameters"></param>
            <param name="modalInstanceOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show``1(System.String,System.Action{Blazorise.ModalProviderParameterBuilder{``0}})">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="title"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show``1(System.String,Blazorise.ModalInstanceOptions)">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="title"></param>
            <param name="modalInstanceOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show``1(System.String,System.Action{Blazorise.ModalProviderParameterBuilder{``0}},Blazorise.ModalInstanceOptions)">
            <summary>
            Shows a Modal where the content is TComponent.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="title"></param>
            <param name="parameters"></param>
            <param name="modalInstanceOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show(System.Type)">
            <summary>
            Shows a Modal where the content is of componentType.
            </summary>
            <param name="componentType"></param>
        </member>
        <member name="M:Blazorise.IModalService.Show(System.String,System.Type)">
            <summary>
            Shows a Modal where the content is of componentType.
            </summary>
            <param name="title"></param>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show(Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Shows a Modal where the content is a RenderFragment.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Shows a Modal where the content is a RenderFragment.
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Blazorise.ModalInstanceOptions)">
            <summary>
            Shows a Modal where the content is of componentType.
            </summary>
            <param name="title"></param>
            <param name="componentType"></param>
            <param name="componentParameters"></param>
            <param name="modalInstanceOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show(System.String,Microsoft.AspNetCore.Components.RenderFragment,Blazorise.ModalInstanceOptions)">
            <summary>
            Shows a Modal where the content is a RenderFragment.
            </summary>
            <param name="title"></param>
            <param name="childContent"></param>
            <param name="modalInstanceOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Show(Blazorise.ModalInstance)">
            <summary>
            Shows the modal from a given modal instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Hide">
            <summary>
            Hides currently opened modal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Hide(Blazorise.ModalInstance)">
            <summary>
            Hides the modal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.GetInstances">
            <summary>
            Returns all the modal instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Remove(Blazorise.ModalInstance)">
            <summary>
            Explicitly removes the modal instance from the ModalProvider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IModalService.Reset">
            <summary>
            Resets the state of the ModalProvider.
            Any existing instances will be cleared.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blazorise.INotificationService">
            <summary>
            Service to show a simple notification message.
            </summary>
        </member>
        <member name="E:Blazorise.INotificationService.NotificationReceived">
            <summary>
            An event raised after the notification is received.
            </summary>
        </member>
        <member name="M:Blazorise.INotificationService.Info(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple info notification.
            </summary>
            <param name="message">Info notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Info(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple info notification.
            </summary>
            <param name="message">Info notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Success(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple success notification.
            </summary>
            <param name="message">Success notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Success(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple success notification.
            </summary>
            <param name="message">Success notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Warning(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple warning notification.
            </summary>
            <param name="message">Warning notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Warning(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple warning notification.
            </summary>
            <param name="message">Warning notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Error(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple error notification.
            </summary>
            <param name="message">Error notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.INotificationService.Error(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <summary>
            Show the simple error notification.
            </summary>
            <param name="message">Error notification to show.</param>
            <param name="title">Notification title.</param>
            <param name="options">Options to override notification dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IPageProgressService">
            <summary>
            Service to show a page progress.
            </summary>
        </member>
        <member name="E:Blazorise.IPageProgressService.ProgressChanged">
            <summary>
            An event raised after the notification is received.
            </summary>
        </member>
        <member name="M:Blazorise.IPageProgressService.Go(System.Nullable{System.Int32},System.Action{Blazorise.PageProgressOptions})">
            <summary>
            Sets the progress percentage.
            </summary>
            <param name="percentage">Value of the progress from 0 to 100, or null for indeterminate progress.</param>
            <param name="options">Additional options.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.ISelectableComponent">
            <summary>
            Default contract for the component that can be select its text.
            </summary>
        </member>
        <member name="M:Blazorise.ISelectableComponent.Select(System.Boolean)">
            <summary>
            Select all text in the underline component.
            </summary>
            <param name="focus">If true, the input will be focused before the text is selected.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IThemeCache">
            <summary>
            Represents a cache for a <see cref="T:Blazorise.IThemeGenerator"/>.
            </summary>  
        </member>
        <member name="M:Blazorise.IThemeCache.CacheVariables(Blazorise.Theme,System.String)">
            <summary>
            Caches a theme and it's built CSS variables.
            </summary>
            <param name="theme">Theme to cache.</param>
            <param name="variables">CSS variables to cache.</param>
        </member>
        <member name="M:Blazorise.IThemeCache.CacheStyles(Blazorise.Theme,System.String)">
            <summary>
            Caches a theme and it's built CSS styles.
            </summary>
            <param name="theme">Theme to cache.</param>
            <param name="styles">CSS styles to cache.</param>
        </member>
        <member name="M:Blazorise.IThemeCache.TryGetVariablesFromCache(Blazorise.Theme,System.String@)">
            <summary>
            Gets the CSS variables associated with the specified theme.
            </summary>
            <param name="theme">Cached theme.</param>
            <param name="variables">When this method returns, contains the variables associated with the specified key.</param>
            <returns>true if the cache contains an element with the specified theme; otherwise, false.</returns>
        </member>
        <member name="M:Blazorise.IThemeCache.TryGetStylesFromCache(Blazorise.Theme,System.String@)">
            <summary>
            Gets the CSS styles associated with the specified theme.
            </summary>
            <param name="theme">Cached theme.</param>
            <param name="styles">When this method returns, contains the styles associated with the specified key.</param>
            <returns>true if the cache contains an element with the specified theme; otherwise, false.</returns>
        </member>
        <member name="T:Blazorise.IThemeGenerator">
            <summary>
            Represents a theme generator for a CSS variables and styles.
            </summary>
        </member>
        <member name="M:Blazorise.IThemeGenerator.GenerateVariables(Blazorise.Theme)">
            <summary>
            Generates a CSS variables based on the defined <see cref="T:Blazorise.Theme"/> options.
            </summary>
            <param name="theme">Theme options.</param>
            <returns>CSS variables.</returns>
        </member>
        <member name="M:Blazorise.IThemeGenerator.GenerateStyles(Blazorise.Theme)">
            <summary>
            Generates a CSS styles based on the defined <see cref="T:Blazorise.Theme"/> options.
            </summary>
            <param name="theme">Theme options.</param>
            <returns>CSS styles.</returns>
        </member>
        <member name="T:Blazorise.IToastService">
            <summary>
            Service to show a simple toast message.
            </summary>
        </member>
        <member name="E:Blazorise.IToastService.ToastReceived">
            <summary>
            An event raised after the toast is received.
            </summary>
        </member>
        <member name="M:Blazorise.IToastService.Show(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple toast message.
            </summary>
            <param name="message">Message to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Show(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple toast message.
            </summary>
            <param name="message">Message to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Info(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple info toast.
            </summary>
            <param name="message">Info toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Info(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple info toast.
            </summary>
            <param name="message">Info toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Success(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple success toast.
            </summary>
            <param name="message">Success toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Success(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple success toast.
            </summary>
            <param name="message">Success toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Warning(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple warning toast.
            </summary>
            <param name="message">Warning toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Warning(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple warning toast.
            </summary>
            <param name="message">Warning toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Error(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple error toast.
            </summary>
            <param name="message">Error toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IToastService.Error(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <summary>
            Show the simple error toast.
            </summary>
            <param name="message">Error toast to show.</param>
            <param name="title">Toast title.</param>
            <param name="options">Options to override toast dialog appearance.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IVersionProvider">
            <summary>
            Provider used to get the Blazorise version number.
            </summary>
        </member>
        <member name="P:Blazorise.IVersionProvider.Version">
            <summary>
            Gets the version number.
            </summary>
        </member>
        <member name="P:Blazorise.IVersionProvider.MilestoneVersion">
            <summary>
            Gets the milestone version number.
            </summary>
        </member>
        <member name="T:Blazorise.Modules.IBaseJSModule">
            <summary>
            Base contract for all JS modules.
            </summary>
        </member>
        <member name="P:Blazorise.Modules.IBaseJSModule.ModuleFileName">
            <summary>
            Gets the module file name.
            </summary>
        </member>
        <member name="P:Blazorise.Modules.IBaseJSModule.Module">
            <summary>
            Gets the awaitable <see cref="T:Microsoft.JSInterop.IJSObjectReference"/> task.
            </summary>
        </member>
        <member name="T:Blazorise.Modules.IJSBreakpointModule">
            <summary>
            Contracts for the closable JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSBreakpointModule.RegisterBreakpoint(Microsoft.JSInterop.DotNetObjectReference{Blazorise.BreakpointActivatorAdapter},System.String)">
            <summary>
            Registers the component to be listened for breakpoint events.
            </summary>
            <param name="dotNetObjectRef">Reference to the activator adapter.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSBreakpointModule.UnregisterBreakpoint(Blazorise.IBreakpointActivator)">
            <summary>
            Removes the component from the breakpoint events.
            </summary>
            <param name="component">Component activator.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSBreakpointModule.GetBreakpoint">
            <summary>
            Gets the last breakpoint name.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSButtonModule">
            <summary>
            Contracts for the button JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSButtonModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new button within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options for the button initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSClosableModule">
            <summary>
            Contracts for the closable JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSClosableModule.Register(Microsoft.JSInterop.DotNetObjectReference{Blazorise.CloseActivatorAdapter},Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Registers the component to be listened for closing events.
            </summary>
            <param name="dotNetObjectRef">Reference to the activator adapter.</param>
            <param name="elementRef">Reference to the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSClosableModule.RegisterLight(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Registers the component to be listened for closing events.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSClosableModule.Unregister(Blazorise.ICloseActivator)">
            <summary>
            Removes the component from the closable listener.
            </summary>
            <param name="component">Component activator.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSClosableModule.UnregisterLight(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Removes the component from the light closable listener.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSColorPickerModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.ColorPicker"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSColorPickerModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.ColorPicker},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new <see cref="T:Blazorise.ColorPicker"/> within the JS module.
            </summary>
            <param name="dotNetObjectRef">Reference to the color picker.</param>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options for the tooltip initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSColorPickerModule.UpdateValue(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.ColorPicker"/> value.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="value">Value to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSColorPickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.ColorPicker"/> options.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Options to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSColorPickerModule.UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.ColorPicker"/> localization.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="localization">Options to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSColorPickerModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Sets focus to the <see cref="T:Blazorise.ColorPicker"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="scrollToElement">If true, scrolls to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSColorPickerModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Selects the <see cref="T:Blazorise.ColorPicker"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="focus">If true, it will focus to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSDatePickerModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.DatePicker`1"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.DatePickerAdapter},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new <see cref="T:Blazorise.DatePicker`1"/> within the JS module.
            </summary>
            <param name="dotNetObjectReference">Reference to the date adapter.</param>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options for the tooltip initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Activate(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Activates the <see cref="T:Blazorise.DatePicker`1"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.UpdateValue(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.DatePicker`1"/> value.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="value">Value to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.DatePicker`1"/> options.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Options to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Open(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Opens the <see cref="T:Blazorise.DatePicker`1"/> dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Close(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Closes the <see cref="T:Blazorise.DatePicker`1"/> dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Toggle(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Toggles the <see cref="T:Blazorise.DatePicker`1"/> dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.DatePicker`1"/> localization.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="localization">Options to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Sets focus to the <see cref="T:Blazorise.DatePicker`1"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="scrollToElement">If true, scrolls to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDatePickerModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Selects the <see cref="T:Blazorise.DatePicker`1"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="focus">If true, it will focus to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSDestroyableModule">
            <summary>
            Contracts for the module needs to be properly destroyed, or disposed.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSDestroyableModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Removes the element from the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>s
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSDragDropModule">
            <summary>
            Contracts for the tooltip JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSDragDropModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Initializes the new dragdrop zone within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDragDropModule.InitializeThrottledDragEvents``1(Microsoft.AspNetCore.Components.ElementReference,System.String,Microsoft.JSInterop.DotNetObjectReference{``0})">
            <summary>
            Initializes throttled events for drag and drop events.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="dotNetObjectReference">The DotNet ObjectReference so javascript can interop back to blazor.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDragDropModule.DestroyThrottledDragEvents(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Destroys throttled events for drag and drop events.
            </summary>
            <param name="elementRef"></param>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="T:Blazorise.Modules.IJSDropdownModule">
            <summary>
            Contracts for the dropdown JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSDropdownModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes the new dropdown within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="targetElementId">Target element for the dropdown menu.</param>
            <param name="menuElementId">Dropdown menu element id.</param>
            <param name="options">Additional options for the button initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDropdownModule.Show(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Shows the dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSDropdownModule.Hide(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Hides the dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSFileEditModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.FileEdit"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSFileEditModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.FileEditAdapter},Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Initializes the new <see cref="T:Blazorise.FileEdit"/> within the JS module.
            </summary>
            <param name="dotNetObjectRef"></param>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSFileEditModule.Reset(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Resets the file input values.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSFileEditModule.RemoveFile(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Int32)">
            <summary>
            Removes a file from the current file selection.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="fileId">ID of the file to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Modules.IJSFileEditModule.OpenFileDialog(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Opens the file dialog.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSFileModule">
            <summary>
            Contracts for the reading a file JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSFileModule.ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference,System.Int32,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Reads the batch of data for the specified position and offset.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="fileEntryId">File id.</param>
            <param name="position">Byte position starting from zero.</param>
            <param name="length">Number of bytes to read.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSFileModule.ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the batch of data for the specified position and offset.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="fileEntryId">File id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSFilePickerModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.FilePicker"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSFilePickerModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Initializes the new <see cref="T:Blazorise.FilePicker"/> within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSInputMaskModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.InputMask"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSInputMaskModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.InputMask},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new <see cref="T:Blazorise.InputMask"/> within the JS module.
            </summary>
            <param name="dotNetObjectRef">Reference to the color picker.</param>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options for the mask initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSInputMaskModule.ExtendAliases(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Extends the alias options with the custom settings.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="aliasOptions">Options for the alias initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSMemoEditModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.MemoEdit"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSMemoEditModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new <see cref="T:Blazorise.MemoEdit"/> within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Options to initialize the memoedit.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSMemoEditModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the memo options.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">New options to initialize the memoedit.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSMemoEditModule.RecalculateAutoHeight(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Recalculates the textarea height.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSModalModule">
            <summary>
            Contracts for the modal JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSModalModule.OpenModal(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
            <summary>
            Opens the modal.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="scrollToTop">Indicates if the window will scroll to the top.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSModalModule.CloseModal(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Closes the modal.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSNumericPickerModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.NumericPicker`1"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSNumericPickerModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.NumericPickerAdapter},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new <see cref="T:Blazorise.TextEdit"/> within the JS module.
            </summary>
            <param name="dotNetObjectRef">Reference to the numeric adapter.</param>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Options for numeric edit.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSNumericPickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.NumericPicker`1"/> options.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Options for numeric edit.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSNumericPickerModule.UpdateValue``1(Microsoft.AspNetCore.Components.ElementReference,System.String,``0)">
            <summary>
            Updates the <see cref="T:Blazorise.NumericPicker`1"/> value.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="value">New value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSTableModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.Table"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSTableModule.InitializeFixedHeader(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Initializes the fixed header for the table.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTableModule.DestroyFixedHeader(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Removes the fixed header from the table.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTableModule.ScrollTableToPixels(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Int32)">
            <summary>
            Scrolls the table to the specified position in pixels.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="pixels">Position of scroll in pixels.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTableModule.ScrollTableToRow(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Int32)">
            <summary>
            Scrolls the table to the specified row number.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="row">Row number to scroll.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTableModule.InitializeResizable(Microsoft.AspNetCore.Components.ElementReference,System.String,Blazorise.TableResizeMode)">
            <summary>
            Initializes the table columns to be resized based on the given mode.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="resizeMode">Resize mode of the table column.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTableModule.DestroyResizable(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Removes the resize mode.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSTextEditModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.TextEdit"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSTextEditModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.String,System.String)">
            <summary>
            Initializes the new <see cref="T:Blazorise.TextEdit"/> within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="maskType">Type of the edit mask.</param>
            <param name="editMask">Edit mask value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSTimePickerModule">
            <summary>
            Contracts for the <see cref="T:Blazorise.TimePicker`1"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new <see cref="T:Blazorise.TimePicker`1"/> within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options for the tooltip initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Activate(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Activates the <see cref="T:Blazorise.TimePicker`1"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.UpdateValue(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.TimePicker`1"/> value.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="value">Value to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.TimePicker`1"/> options.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Options to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Open(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Opens the <see cref="T:Blazorise.TimePicker`1"/> dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Close(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Closes the <see cref="T:Blazorise.TimePicker`1"/> dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Toggle(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Toggles the <see cref="T:Blazorise.TimePicker`1"/> dropdown menu.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Updates the <see cref="T:Blazorise.TimePicker`1"/> localization.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="localization">Options to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Sets focus to the <see cref="T:Blazorise.TimePicker`1"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="scrollToElement">If true, scrolls to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTimePickerModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Selects the <see cref="T:Blazorise.TimePicker`1"/>.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="focus">If true, it will focus to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSTooltipModule">
            <summary>
            Contracts for the tooltip JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSTooltipModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Initializes the new tooltip within the JS module.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="options">Additional options for the tooltip initialization.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSTooltipModule.UpdateContent(Microsoft.AspNetCore.Components.ElementReference,System.String,System.String)">
            <summary>
            Updated tooltip content.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="content">New content value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.IJSUtilitiesModule">
            <summary>
            Contracts for the various utilites JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.AddClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Adds a classname to the specified element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="classname">CSS classname to add.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.RemoveClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Removes a classname from the specified element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="classname">CSS classname to remove.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.ToggleClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Toggles a classname on the given element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="classname">CSS classname to toggle.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.AddClassToBody(System.String)">
            <summary>
            Adds a classname to the body element.
            </summary>
            <param name="classname">CSS classname to add.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.RemoveClassFromBody(System.String)">
            <summary>
            Removes a classname from the body element.
            </summary>
            <param name="classname"></param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.ParentHasClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Indicates if parent element has a specified classname.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="classname">CSS classname to check.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Sets focus to the given element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="scrollToElement">If true, scrolls to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <summary>
            Selects the given element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <param name="focus">If true, it will focus to the element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.ShowPicker(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Show a browser picker for the supplied input element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.ScrollAnchorIntoView(System.String)">
            <summary>
            Scrolls the view to the given anchor element.
            </summary>
            <param name="anchorTarget">Anchor element id.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.ScrollElementIntoView(System.String,System.Boolean)">
            <summary>
            Scrolls the view to the given element.
            </summary>
            <param name="elementId">ID of the rendered element.</param>
            <param name="smooth">True if the scroll animation should be smoothed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.SetCaret(Microsoft.AspNetCore.Components.ElementReference,System.Int32)">
            <summary>
            Sets the caret to the specified position.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="caret">Caret position.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.GetCaret(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Gets the caret position.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.SetTextValue(Microsoft.AspNetCore.Components.ElementReference,System.Object)">
            <summary>
            Updates the input with the specified value.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="value">New element value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.SetProperty(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <summary>
            Apply the html property to the element.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="property">Property name.</param>
            <param name="value">Property value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.GetElementInfo(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Gets the element info.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.GetUserAgent">
            <summary>
            Gets the User Agent name.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.CopyToClipboard(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <summary>
            Copies the specified element content to the clipboard.
            </summary>
            <param name="elementRef">Reference to the rendered element.</param>
            <param name="elementId">ID of the rendered element.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Modules.IJSUtilitiesModule.Log(System.String,System.String[])">
            <summary>
            Writes a log message to the browser console.
            </summary>
            <param name="message">Message to write.</param>
            <param name="args">Optional parameters.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.Modules.BaseJSModule">
            <inheritdoc/>
        </member>
        <member name="F:Blazorise.Modules.BaseJSModule.jsRuntime">
            <summary>
            JavaScript runtime instance.
            </summary>
        </member>
        <member name="F:Blazorise.Modules.BaseJSModule.versionProvider">
            <summary>
            Version provider instance.
            </summary>
        </member>
        <member name="F:Blazorise.Modules.BaseJSModule.moduleTask">
            <summary>
            Awaitable module instance.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.InvokeVoidAsync(System.String,System.Object[])">
            <summary>
            Invokes the module instance javascript function.
            </summary>
            <param name="identifier"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.InvokeAsync``1(System.String,System.Object[])">
            <summary>
            Invokes the module instance javascript function.
            </summary>
            <param name="identifier"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.DisposeAsync(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the module and optionally releases the managed resources.
            </summary>
            <param name="disposing">True if the component is in the disposing process.</param>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.InvokeSafeVoidAsync(System.String,System.Object[])">
            <summary>
            Save invocation on the JavaScript <see cref="P:Blazorise.Modules.BaseJSModule.Module"/>.
            </summary>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>someScope.someFunction</c> on the target instance.</param>
            <param name="args">JSON-serializable arguments.</param>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.InvokeSafeAsync``1(System.String,System.Object[])">
            <summary>
            Save invocation on the JavaScript <see cref="P:Blazorise.Modules.BaseJSModule.Module"/>.
            </summary>
            <typeparam name="TValue">The JSON-serializable return type.</typeparam>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>someScope.someFunction</c> on the target instance.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TValue"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:Blazorise.Modules.BaseJSModule.OnModuleLoaded(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            Called after the JS <see cref="P:Blazorise.Modules.BaseJSModule.Module"/> has been loaded.
            </summary>
            <param name="jsObjectReference">The loaded JS module reference.</param>
        </member>
        <member name="P:Blazorise.Modules.BaseJSModule.IsUnsafe">
            <summary>
            Returns true if module was already being destroyed.
            </summary>
        </member>
        <member name="P:Blazorise.Modules.BaseJSModule.AsyncDisposed">
            <summary>
            Indicates if the component is already fully disposed (asynchronously).
            </summary>
        </member>
        <member name="P:Blazorise.Modules.BaseJSModule.Module">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.BaseJSModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.BaseJSModule.JSRuntime">
            <summary>
            Gets the JavaScript runtime instance.
            </summary>
        </member>
        <member name="P:Blazorise.Modules.BaseJSModule.VersionProvider">
            <summary>
            Gets the version provider instance.
            </summary>
        </member>
        <member name="T:Blazorise.Modules.JSBreakpointModule">
            <summary>
            Default implementation of the breakpoint JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSBreakpointModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSBreakpointModule.RegisterBreakpoint(Microsoft.JSInterop.DotNetObjectReference{Blazorise.BreakpointActivatorAdapter},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSBreakpointModule.UnregisterBreakpoint(Blazorise.IBreakpointActivator)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSBreakpointModule.GetBreakpoint">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSBreakpointModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSButtonModule">
            <summary>
            Default implementation of the button JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSButtonModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSButtonModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSButtonModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSButtonModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSClosableModule">
            <summary>
            Default implementation of the closable JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSClosableModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSClosableModule.Register(Microsoft.JSInterop.DotNetObjectReference{Blazorise.CloseActivatorAdapter},Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSClosableModule.RegisterLight(Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSClosableModule.Unregister(Blazorise.ICloseActivator)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSClosableModule.UnregisterLight(Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSClosableModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSColorPickerModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.ColorPicker"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.ColorPicker},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.Activate(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.UpdateValue(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSColorPickerModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSColorPickerModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSDatePickerModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.DatePicker`1"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.DatePickerAdapter},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Activate(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.UpdateValue(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Open(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Close(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Toggle(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDatePickerModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSDatePickerModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSDragDropModule">
            <summary>
            Default implementation of the tooltip JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSDragDropModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSDragDropModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDragDropModule.InitializeThrottledDragEvents``1(Microsoft.AspNetCore.Components.ElementReference,System.String,Microsoft.JSInterop.DotNetObjectReference{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDragDropModule.DestroyThrottledDragEvents(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDragDropModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSDragDropModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSDropdownModule">
            <summary>
            Default implementation of the dropdown JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSDropdownModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSDropdownModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDropdownModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDropdownModule.Show(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSDropdownModule.Hide(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSDropdownModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSFileEditModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.FileEdit"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSFileEditModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSFileEditModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.FileEditAdapter},Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSFileEditModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSFileEditModule.Reset(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSFileEditModule.RemoveFile(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSFileEditModule.OpenFileDialog(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSFileEditModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSFileModule">
            <summary>
            Default implementation of the file JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSFileModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSFileModule.ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference,System.Int32,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSFileModule.ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSFileModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSFilePickerModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.FilePicker"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSFilePickerModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSFilePickerModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSFilePickerModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSFilePickerModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSInputMaskModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.InputMask"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSInputMaskModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSInputMaskModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.InputMask},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSInputMaskModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSInputMaskModule.ExtendAliases(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSInputMaskModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSMemoEditModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.MemoEdit"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSMemoEditModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSMemoEditModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSMemoEditModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSMemoEditModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSMemoEditModule.RecalculateAutoHeight(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSMemoEditModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSModalModule">
            <summary>
            Default implementation of the modal JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSModalModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSModalModule.OpenModal(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSModalModule.CloseModal(Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSNumericPickerModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.NumericPicker`1"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSNumericPickerModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSNumericPickerModule.Initialize(Microsoft.JSInterop.DotNetObjectReference{Blazorise.NumericPickerAdapter},Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSNumericPickerModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSNumericPickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSNumericPickerModule.UpdateValue``1(Microsoft.AspNetCore.Components.ElementReference,System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSNumericPickerModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSTableModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.Table"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.InitializeFixedHeader(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.DestroyFixedHeader(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.ScrollTableToPixels(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.ScrollTableToRow(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.InitializeResizable(Microsoft.AspNetCore.Components.ElementReference,System.String,Blazorise.TableResizeMode)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTableModule.DestroyResizable(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSTableModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSTextEditModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.TextEdit"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSTextEditModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSTextEditModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTextEditModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSTextEditModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSTimePickerModule">
            <summary>
            Default implementation of the <see cref="T:Blazorise.TimePicker`1"/> JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Activate(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.UpdateValue(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.UpdateOptions(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Open(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Close(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Toggle(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTimePickerModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSTimePickerModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSTooltipModule">
            <summary>
            Default implementation of the tooltip JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSTooltipModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSTooltipModule.Initialize(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTooltipModule.Destroy(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSTooltipModule.UpdateContent(Microsoft.AspNetCore.Components.ElementReference,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.JSUtilitiesModule">
            <summary>
            Default implementation for the utilities JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.AddClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.RemoveClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.ToggleClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.AddClassToBody(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.RemoveClassFromBody(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.ParentHasClass(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.Focus(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.Select(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.ShowPicker(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.ScrollAnchorIntoView(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.ScrollElementIntoView(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.SetCaret(Microsoft.AspNetCore.Components.ElementReference,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.GetCaret(Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.SetTextValue(Microsoft.AspNetCore.Components.ElementReference,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.SetProperty(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.GetElementInfo(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.GetUserAgent">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.CopyToClipboard(Microsoft.AspNetCore.Components.ElementReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Modules.JSUtilitiesModule.Log(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Modules.JSUtilitiesModule.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Modules.WebAssemblyRsaVerifier">
            <summary>
            Default implementation of the RSA JS module.
            </summary>
        </member>
        <member name="M:Blazorise.Modules.WebAssemblyRsaVerifier.#ctor(Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider,System.String)">
            <summary>
            Default module constructor.
            </summary>
            <param name="jsRuntime">JavaScript runtime instance.</param>
            <param name="versionProvider">Version provider.</param>
            <param name="publicKey">Public RSA key used to generate the license.</param>
        </member>
        <member name="P:Blazorise.Modules.WebAssemblyRsaVerifier.ModuleFileName">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Vendors.IFlatPickrDateTimeDisplayFormatConverter">
            <summary>
            Interface for converting the date formats for the display mask.
            </summary>
        </member>
        <member name="M:Blazorise.Vendors.IFlatPickrDateTimeDisplayFormatConverter.Convert(System.String)">
            <summary>
            Converts the .NET date format into the internal date format.
            </summary>
            <param name="format">A string representing the .NET date format.</param>
            <returns>A date format ready for internal date editor.</returns>
        </member>
        <member name="T:Blazorise.Vendors.IInputMaskDateTimeInputFormatConverter">
            <summary>
            Interface for converting the date formats for the input mask.
            </summary>
        </member>
        <member name="M:Blazorise.Vendors.IInputMaskDateTimeInputFormatConverter.Convert(System.String)">
            <summary>
            Converts the .NET date format into the internal date format.
            </summary>
            <param name="format">A string representing the .NET date format.</param>
            <returns>A date format ready for internal date editor.</returns>
        </member>
        <member name="T:Blazorise.Licensing.BlazoriseLicenseChecker">
            <summary>
            Checks the validation for the current user session.
            </summary>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.#ctor(Blazorise.Licensing.BlazoriseLicenseProvider)">
             <summary>
            
             </summary>
             <param name="blazoriseLicenseProvider"></param>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.ShouldPrint">
            <summary>
            Indicates if the license warning should be displayed.
            </summary>
            <returns>True if the license warning should be displayed.</returns>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.GetDataGridRowsLimit">
            <summary>
            Returns the maximum number of rows that can be displayed.
            Null if no limit is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.GetAutoCompleteRowsLimit">
            <summary>
            Returns the maximum number of rows that can be displayed.
            Null if no limit is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.GetChartsRowsLimit">
            <summary>
            Returns the maximum number of rows that can be displayed.
            Null if no limit is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.GetListViewRowsLimit">
            <summary>
            Returns the maximum number of rows that can be displayed.
            Null if no limit is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseChecker.GetTreeViewRowsLimit">
            <summary>
            Returns the maximum number of rows that can be displayed.
            Null if no limit is set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blazorise.Licensing.BlazoriseLicenseProvider">
            <summary>
            Runs the license validation process.
            </summary>
        </member>
        <member name="M:Blazorise.Licensing.BlazoriseLicenseProvider.#ctor(Blazorise.BlazoriseOptions,Microsoft.JSInterop.IJSRuntime,Blazorise.IVersionProvider)">
             <summary>
            
             </summary>
             <param name="options"></param>
             <param name="jsRuntime"></param>
             <param name="versionProvider"></param>
        </member>
        <member name="P:Blazorise.Licensing.BlazoriseLicenseProvider.License">
            <summary>
            Gets the license.
            </summary>
        </member>
        <member name="P:Blazorise.Licensing.BlazoriseLicenseProvider.Result">
            <summary>
            Gets the result of the license validation.
            </summary>
        </member>
        <member name="P:Blazorise.Licensing.BlazoriseLicenseProvider.IsWebAssembly">
            <summary>
            Indicates if the current app is running in WebAssembly mode.
            </summary>
        </member>
        <member name="T:Blazorise.Licensing.BlazoriseLicenseResult">
            <summary>
            Defines the result of the license validation.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseResult.Initializing">
            <summary>
            License check is still initializing.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseResult.Unlicensed">
            <summary>
            Unlicensed user.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseResult.Community">
            <summary>
            License is issued to the community user.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseResult.Licensed">
            <summary>
            License is issued to the commercial user.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseResult.Trial">
            <summary>
            License is in trial mode.
            </summary>
        </member>
        <member name="T:Blazorise.Licensing.BlazoriseLicenseType">
            <summary>
            Defines the type of the license. This mirrors the type defined in the encrypted license.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseType.Regular">
            <summary>
            A regular commercial license.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseType.Trial">
            <summary>
            A commercial trial license.
            </summary>
        </member>
        <member name="F:Blazorise.Licensing.BlazoriseLicenseType.Community">
            <summary>
            A community license.
            </summary>
        </member>
        <member name="T:Blazorise.Localization.ITextLocalizer">
            <summary>
            Represents a service that provides localized strings.
            </summary>
        </member>
        <member name="P:Blazorise.Localization.ITextLocalizer.Item(System.String)">
            <summary>
            Gets the string resource with the given name.
            </summary>
            <param name="name">The name of the string resource.</param>
            <returns>The localized string or <paramref name="name"/> if not found.</returns>
        </member>
        <member name="P:Blazorise.Localization.ITextLocalizer.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given name and formatted with the supplied arguments.
            </summary>
            <param name="name">The name of the string resource.</param>
            <param name="arguments">The values to format the string with.</param>
            <returns>The formatted string resource <paramref name="name"/> if not found.</returns>
        </member>
        <member name="M:Blazorise.Localization.ITextLocalizer.AddLanguageResource(Blazorise.Localization.TextLocalizationResource)">
            <summary>
            Adds a custom language resource to the list of supported cultures.
            </summary>
            <param name="localizationResource">Custom resource model.</param>
        </member>
        <member name="M:Blazorise.Localization.ITextLocalizer.GetString(System.String,System.Object[])">
            <summary>
            Gets the localized string by the name with the optional list object for formatting.
            </summary>
            <param name="name">A name to localize.</param>
            <param name="arguments">An object array that contains zero or more objects to format.</param>
            <returns>Localized string.</returns>
        </member>
        <member name="M:Blazorise.Localization.ITextLocalizer.GetStrings(System.Object[])">
            <summary>
            Gets the localized string for each key in the localization object.
            </summary>
            <param name="arguments">An object array that contains zero or more objects to format.</param>
            <returns>Localized key/value pairs.</returns>
        </member>
        <member name="T:Blazorise.Localization.ITextLocalizer`1">
            <summary>
            Represents an <see cref="T:Blazorise.Localization.ITextLocalizer"/> that provides strings for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to provide strings for.</typeparam>
        </member>
        <member name="T:Blazorise.Localization.ITextLocalizerService">
            <summary>
            Provides the way to change the current culture and notify the app of the change.
            </summary>
        </member>
        <member name="E:Blazorise.Localization.ITextLocalizerService.LocalizationChanged">
            <summary>
            Occurs after the culture has changed.
            </summary>
        </member>
        <member name="M:Blazorise.Localization.ITextLocalizerService.AddLanguageResource(System.String)">
            <summary>
            Add's a new culture name to the list of supported cultures.
            </summary>
            <param name="cultureName">Culture name.</param>
        </member>
        <member name="M:Blazorise.Localization.ITextLocalizerService.ChangeLanguage(System.String,System.Boolean)">
            <summary>
            Changes the current thread culture.
            </summary>
            <param name="cultureName">Culture name to be set by the current thread.</param>
            <param name="changeThreadCulture">If true, the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> will also be updated.</param>
        </member>
        <member name="P:Blazorise.Localization.ITextLocalizerService.SelectedCulture">
            <summary>
            Gets the current culture info.
            </summary>
        </member>
        <member name="P:Blazorise.Localization.ITextLocalizerService.AvailableCultures">
            <summary>
            Gets the list of all available cultures supported by the Blazorise.
            </summary>
        </member>
        <member name="T:Blazorise.Localization.TextLocalizationResource">
            <summary>
            Model that holds all the translations for a given resource.
            </summary>
        </member>
        <member name="P:Blazorise.Localization.TextLocalizationResource.Culture">
            <summary>
            Language culture code like "en-US" or "nl-NL"
            </summary>
        </member>
        <member name="P:Blazorise.Localization.TextLocalizationResource.Translations">
            <summary>
            A key-value translations of this culture.
            </summary>
        </member>
        <member name="T:Blazorise.Localization.TextLocalizer`1">
            <summary>
            A default implementation of <see cref="T:Blazorise.Localization.ITextLocalizer"/> that reads all localized JSON resources for <typeparamref name="T"/> and cache it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to provide strings for.</typeparam>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.#ctor(Blazorise.Localization.ITextLocalizerService)">
            <summary>
            A default constructor for <see cref="T:Blazorise.Localization.TextLocalizer`1"/>.
            </summary>
            <param name="localizerService">Service that is responsible for triggering the localization change.</param>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.ReadResources(System.Type)">
            <summary>
            Reads the localization resource for the given type.
            </summary>
            <param name="resourceType">A resource type.</param>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.AddLanguageResource(Blazorise.Localization.TextLocalizationResource)">
            <summary>
            Adds a language resource to the list.
            </summary>
            <param name="localizationResource">Localization resource to add.</param>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.GetResourceName(System.Type)">
            <summary>
            Gets the resource name by the resource type.
            </summary>
            <param name="resourceType">A resource type.</param>
            <returns>A resource name.</returns>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.DeserializeResourceAsJson(System.Reflection.Assembly,System.String)">
            <summary>
            Deserializes a resource from the given assembly as the json string.
            </summary>
            <param name="assembly">Assembly that contains the resource.</param>
            <param name="resourceName">A resource name.</param>
            <returns>A deserialized resource object.</returns>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.ReadResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Reads the resource from the given assembly and returns it as a string.
            </summary>
            <param name="assembly">Assembly that contains the resource.</param>
            <param name="resourceName">A resource name.</param>
            <returns>A resource content as a string.</returns>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.GetLocalizationResourceNames(System.Reflection.Assembly,System.String)">
            <summary>
            Search for all localization resource names in a given assembly.
            </summary>
            <param name="assembly">Assembly that contains the resource.</param>
            <param name="resourceName">Part of a resource name to search.</param>
            <returns>List of resource names.</returns>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.GetTranslations">
            <summary>
            Gets all of the translations.
            </summary>
            <returns>Key/value pairs of translations.</returns>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.GetString(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizer`1.GetStrings(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Localization.TextLocalizer`1.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Localization.TextLocalizer`1.Item(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Localization.TextLocalizerHandler">
            <summary>
            Delegate used to handle custom localization that will override a default <see cref="T:Blazorise.Localization.ITextLocalizer"/>.
            </summary>
            <param name="name">Localization key.</param>
            <param name="arguments">Arguments used to format the localized text.</param>
            <returns>Returns the localized text.</returns>
        </member>
        <member name="T:Blazorise.Localization.TextLocalizerService">
            <summary>
            A default implementation of <see cref="T:Blazorise.Localization.ITextLocalizerService"/>.
            </summary>
        </member>
        <member name="E:Blazorise.Localization.TextLocalizerService.LocalizationChanged">
            <summary>
            An event that is raised after localization has changed.
            </summary>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizerService.#ctor">
            <summary>
            A default constructor for <see cref="T:Blazorise.Localization.TextLocalizerService"/>.
            </summary>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizerService.ReadResource">
            <summary>
            Reads all resources in the current assembly.
            </summary>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizerService.AddLanguageResource(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizerService.GetLocalizationResourceNames(System.Reflection.Assembly)">
            <summary>
            Gets the list of all resources names in the given assembly.
            </summary>
            <param name="assembly">Assembly that contains the resources.</param>
            <returns>List of resource names.</returns>
        </member>
        <member name="M:Blazorise.Localization.TextLocalizerService.ChangeLanguage(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Localization.TextLocalizerService.SelectedCulture">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Localization.TextLocalizerService.AvailableCultures">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.MessageOptions">
            <summary>
            Options to override message dialog appearance.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CenterMessage">
            <summary>
            If true, the message dialogue will be centered on the screen.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ScrollableMessage">
            <summary>
            If true, the message dialogue will be scrollable.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ShowMessageIcon">
            <summary>
            If true, the message dialogue will show the large icon for the current message type.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.MessageIcon">
            <summary>
            Overrides the build-in message icon.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.MessageIconColor">
            <summary>
            Overrides the build-in message icon color.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.OkButtonText">
            <summary>
            Custom text for the Ok button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.OkButtonIcon">
            <summary>
            Custom icon for the Ok button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.OkButtonIconColor">
            <summary>
            Custom icon color for the Ok button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.OkButtonColor">
            <summary>
            Custom color of the Ok button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.OkButtonClass">
            <summary>
            Custom OK button CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.OkButtonPadding">
            <summary>
            Custom OK button padding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CancelButtonPadding">
            <summary>
            Custom cancel button padding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ConfirmButtonPadding">
            <summary>
            Custom confirm button padding.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ConfirmButtonText">
            <summary>
            Custom text for the Confirmation button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ConfirmButtonIcon">
            <summary>
            Custom icon for the Confirmation button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ConfirmButtonIconColor">
            <summary>
            Custom icon color for the Confirmation button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ConfirmButtonColor">
            <summary>
            Custom color of the Confirmation button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ConfirmButtonClass">
            <summary>
            Custom Confirmation button CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CancelButtonText">
            <summary>
            Custom text for the Cancel button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CancelButtonIcon">
            <summary>
            Custom icon for the Cancel button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CancelButtonIconColor">
            <summary>
            Custom icon color for the Cancel button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CancelButtonColor">
            <summary>
            Custom color of the Cancel button.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.CancelButtonClass">
            <summary>
            Custom Cancel button CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.ShowCloseButton">
            <summary>
            If true, the modal close button will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.TitleClass">
            <summary>
            Custom title CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.MessageClass">
            <summary>
            Custom message CSS class.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.Size">
            <summary>
            Defines the message dialog size.
            </summary>
        </member>
        <member name="P:Blazorise.MessageOptions.Default">
            <summary>
            Creates the default message options.
            </summary>
            <returns>Default message options.</returns>
        </member>
        <member name="T:Blazorise.ModalInstanceOptions">
            <summary>
            Sets the options for Modal instance.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.UseModalStructure">
            <summary>
            Uses the modal standard structure, by setting this to true you are only in charge of providing the custom content.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Stateful">
            <summary>
            Keeps the ModalInstance in memory after it has been closed.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.ScrollToTop">
            <summary>
            If true modal will scroll to top when opened.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Opening">
            <summary>
            Occurs before the modal is opened.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Closing">
            <summary>
            Occurs before the modal is closed.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Opened">
            <summary>
            Occurs after the modal has opened.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Closed">
            <summary>
            Occurs after the modal has closed.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.ShowBackdrop">
            <summary>
            Specifies the backdrop needs to be rendered for this <see cref="T:Blazorise.Modal"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Animated">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.AnimationDuration">
            <summary>
            Gets or sets whether the component has any animations.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.RenderMode">
            <summary>
            Defines how the modal content will be rendered.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.FocusTrap">
            <summary>
            Defines if the modal should keep the input focus at all times.
            </summary>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.ElementRef">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.ElementId">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Class">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Style">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Float">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Clearfix">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Visibility">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Width">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Height">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Margin">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Padding">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Display">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Border">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Flex">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Position">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Overflow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Casing">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.TextColor">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.TextAlignment">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.TextTransform">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.TextWeight">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.TextOverflow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.VerticalAlignment">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Background">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Shadow">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Centered">
            <summary>
            Centers the modal content vertically.
            </summary>
            <remarks>
            Only considered if <see cref="P:Blazorise.ModalInstanceOptions.UseModalStructure"/> is set.
            </remarks>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Scrollable">
            <summary>
            Scrolls the modal content independent of the page itself.
            </summary>
            <remarks>
            Only considered if <see cref="P:Blazorise.ModalInstanceOptions.UseModalStructure"/> is set.
            </remarks>
        </member>
        <member name="P:Blazorise.ModalInstanceOptions.Size">
            <summary>
            Changes the size of the modal content.
            </summary>
            <remarks>
            Only considered if <see cref="P:Blazorise.ModalInstanceOptions.UseModalStructure"/> is set.
            </remarks>
        </member>
        <member name="T:Blazorise.NotificationOptions">
            <summary>
            Options to override notification appearance.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationOptions.OkButtonText">
            <summary>
            Custom text for the OK button.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationOptions.OkButtonIcon">
            <summary>
            Custom icon for the OK button.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationOptions.Default">
            <summary>
            Creates the default notification options.
            </summary>
            <returns>Default notification options.</returns>
        </member>
        <member name="P:Blazorise.NotificationOptions.IntervalBeforeClose">
            <summary>
            Delay in milliseconds to wait before closing.
            </summary>
        </member>
        <member name="P:Blazorise.NotificationOptions.Multiline">
            <summary>
            Defines if the notification will contain multiple lines.
            </summary>
        </member>
        <member name="T:Blazorise.PageProgressOptions">
            <summary>
            Options to override page progress appearance.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressOptions.Color">
            <summary>
            Type or color, of the page progress.
            </summary>
        </member>
        <member name="P:Blazorise.PageProgressOptions.Default">
            <summary>
            Creates the default progress options.
            </summary>
            <returns>Default progress options.</returns>
        </member>
        <member name="T:Blazorise.ParseValue`1">
            <summary>
            Provides the information about the parse operation.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Blazorise.ParseValue`1.Empty">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="M:Blazorise.ParseValue`1.#ctor(System.Boolean,`0,System.String)">
            <summary>
            A default <see cref="T:Blazorise.ParseValue`1"/> constructor.
            </summary>
            <param name="success">The result of parse operation.</param>
            <param name="parsedValue">Parsed value.</param>
            <param name="errorMessage">Error message if parse had failed.</param>
        </member>
        <member name="P:Blazorise.ParseValue`1.Success">
            <summary>
            Gets true if parse operation was successful.
            </summary>
        </member>
        <member name="P:Blazorise.ParseValue`1.ParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
        </member>
        <member name="P:Blazorise.ParseValue`1.ErrorMessage">
            <summary>
            Gets the error message if parse had failed.
            </summary>
        </member>
        <member name="T:Blazorise.RatingTooltip">
            <summary>
            Defines the tooltip information for the <see cref="T:Blazorise.Rating"/> component.
            </summary>
        </member>
        <member name="M:Blazorise.RatingTooltip.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazorise.RatingTooltip"/> class with specified tooltip text.
            The tooltip is placed at the top by default.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
        </member>
        <member name="M:Blazorise.RatingTooltip.#ctor(System.String,Blazorise.TooltipPlacement)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazorise.RatingTooltip"/> class with specified tooltip text and placement.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <param name="placement">The placement of the tooltip relative to its component.</param>
        </member>
        <member name="M:Blazorise.RatingTooltip.#ctor(System.String,Blazorise.TooltipPlacement,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazorise.RatingTooltip"/> class with specified tooltip text, placement, multiline option, and arrow visibility.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <param name="placement">The placement of the tooltip relative to its component.</param>
            <param name="multiline">Determines if the tooltip text should be displayed in multiple lines.</param>
            <param name="showArrow">Determines if the tooltip should show an arrow pointing to the component.</param>
        </member>
        <member name="P:Blazorise.RatingTooltip.Text">
            <summary>
            Gets the tooltip's content text.
            </summary>
        </member>
        <member name="P:Blazorise.RatingTooltip.Placement">
            <summary>
            Gets the tooltip's placement relative to the Rating component it is associated with.
            </summary>
        </member>
        <member name="P:Blazorise.RatingTooltip.Multiline">
            <summary>
            Gets a value indicating whether the tooltip text is displayed across multiple lines.
            </summary>
        </member>
        <member name="P:Blazorise.RatingTooltip.ShowArrow">
            <summary>
            Gets a value indicating whether the tooltip displays an arrow pointing towards the Rating component.
            </summary>
        </member>
        <member name="T:Blazorise.ToastInstanceOptions">
            <summary>
            Sets the options for Toast instance.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstanceOptions.Opened">
            <summary>
            Occurs after the toast has opened.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstanceOptions.Closed">
            <summary>
            Occurs after the toast has closed.
            </summary>
        </member>
        <member name="P:Blazorise.ToastInstanceOptions.Default">
            <summary>
            Creates the default toast options.
            </summary>
            <returns>Default toast options.</returns>
        </member>
        <member name="T:Blazorise.Providers.BaseIconProvider">
            <summary>
            Default implementation of <see cref="T:Blazorise.IIconProvider"/>.
            </summary>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.Icon(System.Object,Blazorise.IconStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.IconSize(Blazorise.IconSize)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.GetIconName(Blazorise.IconName,Blazorise.IconStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.SetIconName(Blazorise.IconName,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.GetIconName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.GetStyleName(Blazorise.IconStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Providers.BaseIconProvider.ContainsStyleName(System.String)">
            <summary>
            Determines if style contains the icon name.
            </summary>
            <param name="iconName">Icon name to search.</param>
            <returns>True if icon name is found within the style.</returns>
        </member>
        <member name="P:Blazorise.Providers.BaseIconProvider.IconNameAsContent">
            <summary>
            True if icon name should be placed as en element content.
            </summary>
        </member>
        <member name="T:Blazorise.Providers.EmptyBehaviourProvider">
            <summary>
            Used only when user wants to use extensions(Chart, Sidebar, etc) without CSS frameworks!!
            </summary>
        </member>
        <member name="T:Blazorise.Providers.EmptyClassProvider">
            <summary>
            Used only when user wants to use extensions(Chart, Sidebar, etc) without CSS frameworks!!
            </summary>
        </member>
        <member name="T:Blazorise.MessageService">
            <inheritdoc/>
        </member>
        <member name="E:Blazorise.MessageService.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Info(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Info(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Success(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Success(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Warning(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Warning(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Error(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Error(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Confirm(System.String,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.MessageService.Confirm(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.MessageOptions})">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ModalService">
            <summary>
            Together with ModalProvider, handles the instantiation of modals with custom content.
            </summary>
        </member>
        <member name="P:Blazorise.ModalService.ModalProvider">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.SetModalProvider(Blazorise.ModalProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1(System.String,Blazorise.ModalInstanceOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1(System.Action{Blazorise.ModalProviderParameterBuilder{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1(System.Action{Blazorise.ModalProviderParameterBuilder{``0}},Blazorise.ModalInstanceOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1(System.String,System.Action{Blazorise.ModalProviderParameterBuilder{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show``1(System.String,System.Action{Blazorise.ModalProviderParameterBuilder{``0}},Blazorise.ModalInstanceOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(Microsoft.AspNetCore.Components.RenderFragment)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Blazorise.ModalInstanceOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(System.String,Microsoft.AspNetCore.Components.RenderFragment,Blazorise.ModalInstanceOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Show(Blazorise.ModalInstance)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Hide">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Hide(Blazorise.ModalInstance)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.GetInstances">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ModalService.Remove(Blazorise.ModalInstance)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.NotificationService">
            <inheritdoc/>
        </member>
        <member name="E:Blazorise.NotificationService.NotificationReceived">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Info(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Info(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Success(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Success(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Warning(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Warning(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Error(System.String,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.NotificationService.Error(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.NotificationOptions})">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.PageProgressService">
            <inheritdoc/>
        </member>
        <member name="E:Blazorise.PageProgressService.ProgressChanged">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.PageProgressService.Go(System.Nullable{System.Int32},System.Action{Blazorise.PageProgressOptions})">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ToastService">
            <inheritdoc/>
        </member>
        <member name="E:Blazorise.ToastService.ToastReceived">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Show(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Show(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Info(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Info(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Success(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Success(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Warning(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Warning(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Error(System.String,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ToastService.Error(Microsoft.AspNetCore.Components.MarkupString,System.String,System.Action{Blazorise.ToastInstanceOptions})">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.States.AlertState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.AlertState.Dismisable">
            <summary>
            Enables the alert to be closed by placing the padding for close button.
            </summary>
        </member>
        <member name="P:Blazorise.States.AlertState.Visible">
            <summary>
            Gets or sets the alert visibility state.
            </summary>
        </member>
        <member name="P:Blazorise.States.AlertState.Color">
            <summary>
            Gets or sets the alert color.
            </summary>
        </member>
        <member name="T:Blazorise.States.BarDropdownState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.BarDropdown"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarDropdownState.Visible">
            <summary>
            Gets or sets the dropdown menu visibility state.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarDropdownState.RightAligned">
            <summary>
            If true, a dropdown menu will be right aligned.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarDropdownState.Mode">
            <summary>
            Gets or sets the bar mode in which the dropdown is placed.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarDropdownState.BarVisible">
            <summary>
            Gets or sets the visibility of the bar component.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarDropdownState.NestedIndex">
            <summary>
            Gets or sets the hierarchy index of the dropdown in the bar component.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarDropdownState.IsInlineDisplay">
            <summary>
            True if dropdown is in vertical inline mode and the bar is visible.
            </summary>
        </member>
        <member name="T:Blazorise.States.BarItemState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.BarItem"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarItemState.Active">
            <summary>
            Gets or sets the flag to indicate if <see cref="T:Blazorise.BarItem"/> is active, or focused.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarItemState.Disabled">
            <summary>
            Gets or sets the disabled state to make <see cref="T:Blazorise.BarItem"/> inactive.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarItemState.Mode">
            <summary>
            Gets or sets the bar mode in which the item is placed.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarItemState.BarVisible">
            <summary>
            Gets or sets the visibility of the bar component.
            </summary>
        </member>
        <member name="T:Blazorise.States.BarState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.Visible">
            <summary>
            Controls the state of toggler and the menu.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.Mode">
            <summary>
            Defines the orientation for the bar. Vertical is required when using as a Sidebar.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.CollapseMode">
            <summary>
            Defines how the bar will be collapsed.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.Breakpoint">
            <summary>
            Used for responsive collapsing.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.NavigationBreakpoint">
            <summary>
            Used for responsive collapsing after Navigation.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.ThemeContrast">
            <summary>
            Defines the preferred theme contrast for the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.Alignment">
            <summary>
            Defines the alignment within bar.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarState.BarTogglerState">
            <summary>
            Tracks the <see cref="T:Blazorise.BarToggler"/> State.
            </summary>
        </member>
        <member name="T:Blazorise.States.BarTogglerState">
            <summary>
            Tracks the Bar Toggler State.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarTogglerState.Clicked">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarTogglerState.Mode">
            <summary>
            Provides options for inline or popout styles. Only supported by Vertical Bar. Uses inline by default.
            </summary>
        </member>
        <member name="P:Blazorise.States.BarTogglerState.Bar">
            <summary>
            Controls which <see cref="P:Blazorise.States.BarTogglerState.Bar"/> will be toggled. Uses parent <see cref="P:Blazorise.States.BarTogglerState.Bar"/> by default. 
            </summary>
        </member>
        <member name="T:Blazorise.States.CarouselState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Carousel"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.CarouselState.Autoplay">
            <summary>
            Auto-plays the carousel slides from left to right.
            </summary>
        </member>
        <member name="P:Blazorise.States.CarouselState.AutoRepeat">
            <summary>
            Auto-repeats the carousel slides from the beginning once it reaches the end slide.
            </summary>
        </member>
        <member name="P:Blazorise.States.CarouselState.Crossfade">
            <summary>
            Animate slides with a fade transition instead of a slide animation.
            </summary>
        </member>
        <member name="P:Blazorise.States.CarouselState.SelectedSlide">
            <summary>
            Gets or sets currently selected slide name.
            </summary>
        </member>
        <member name="P:Blazorise.States.CarouselState.PreviouslySelectedSlide">
            <summary>
            Gets or sets previously selected slide name.
            </summary>
        </member>
        <member name="T:Blazorise.States.DropdownState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Dropdown"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.DropdownState.Visible">
            <summary>
            If true, a dropdown menu will be visible.
            </summary>
        </member>
        <member name="P:Blazorise.States.DropdownState.RightAligned">
            <summary>
            If true, a dropdown menu will be right aligned.
            </summary>
        </member>
        <member name="P:Blazorise.States.DropdownState.Disabled">
            <summary>
            If true, dropdown would not react to button click.
            </summary>
        </member>
        <member name="P:Blazorise.States.DropdownState.Direction">
            <summary>
            Dropdown-menu slide direction.
            </summary>
        </member>
        <member name="T:Blazorise.States.ListGroupState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.ListGroup"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.ListGroupState.Flush">
            <summary>
            Remove some borders and rounded corners to render list group items edge-to-edge in a parent container (e.g., cards).
            </summary>
        </member>
        <member name="P:Blazorise.States.ListGroupState.Scrollable">
            <summary>
            Makes the list group scrollable by adding a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Blazorise.States.ListGroupState.Mode">
            <summary>
            Defines the list-group behaviour mode.
            </summary>
        </member>
        <member name="P:Blazorise.States.ListGroupState.SelectionMode">
            <summary>
            Defines the list-group selection mode.
            </summary>
        </member>
        <member name="P:Blazorise.States.ListGroupState.SelectedItem">
            <summary>
            Gets or sets currently selected item name.
            </summary>
        </member>
        <member name="P:Blazorise.States.ListGroupState.SelectedItems">
            <summary>
            Gets or sets currently selected items.
            </summary>
        </member>
        <member name="T:Blazorise.States.ModalState">
            <summary>
            Represents the state of a modal dialog, including visibility and animation states.
            </summary>
        </member>
        <member name="P:Blazorise.States.ModalState.Visible">
            <summary>
            Gets a value indicating whether the modal is currently visible.
            </summary>
            <value><c>true</c> if the modal is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Blazorise.States.ModalState.Showing">
            <summary>
            Gets a value indicating whether the modal is currently being shown (animating into view).
            </summary>
            <value><c>true</c> if the modal is showing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Blazorise.States.ModalState.Hiding">
            <summary>
            Gets a value indicating whether the modal is currently being hidden (animating out of view).
            </summary>
            <value><c>true</c> if the modal is hiding; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Blazorise.States.ModalState.OpenIndex">
            <summary>
            Gets the index indicating the order in which this modal was opened relative to other modals.
            </summary>
            <value>The open index of the modal.</value>
        </member>
        <member name="T:Blazorise.States.OffcanvasState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Offcanvas"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.OffcanvasState.Visible">
            <summary>
            Defines the visibility of the offcanvas.
            </summary>
        </member>
        <member name="P:Blazorise.States.OffcanvasState.Showing">
            <summary>
            Flag that indicates that the showing animation is currently active.
            </summary>
        </member>
        <member name="P:Blazorise.States.OffcanvasState.Hiding">
            <summary>
            Flag that indicates that the hiding animation is currently active.
            </summary>
        </member>
        <member name="T:Blazorise.States.PaginationItemState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.PaginationItem"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.PaginationItemState.Active">
            <summary>
            Indicate the currently active page.
            </summary>
        </member>
        <member name="P:Blazorise.States.PaginationItemState.Disabled">
            <summary>
            Used for links that appear un-clickable.
            </summary>
        </member>
        <member name="T:Blazorise.States.ProgressState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Progress"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Color">
            <summary>
            Defines the progress bar color.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Size">
            <summary>
            Size of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Striped">
            <summary>
            Set to true to make the progress bar stripped.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Animated">
            <summary>
            Set to true to make the progress bar animated.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Indeterminate">
            <summary>
            Set to true to show that an operation is being executed.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Min">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Max">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.States.ProgressState.Value">
            <summary>
            The progress value.
            </summary>
        </member>
        <member name="T:Blazorise.States.StepsContentState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.StepsContentState.SelectedPanel">
            <summary>
            Gets the name of the selected step panel.
            </summary>
        </member>
        <member name="T:Blazorise.States.StepsState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.StepsState.SelectedStep">
            <summary>
            Gets the name of the selected step item.
            </summary>
        </member>
        <member name="T:Blazorise.States.TabsContentState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.TabsContent"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsContentState.SelectedPanel">
            <summary>
            Gets or sets currently selected panel name.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsContentState.RenderMode">
            <summary>
            Gets or sets the tabs rendering mode.
            </summary>
        </member>
        <member name="T:Blazorise.States.TabsState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Tabs"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsState.Pills">
            <summary>
            Makes the tab items to appear as pills.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsState.FullWidth">
            <summary>
            Makes the tab items to extend the full available width.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsState.Justified">
            <summary>
            Makes the tab items to extend the full available width, but every item will be the same width.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsState.TabPosition">
            <summary>
            Position of tab items.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsState.RenderMode">
            <summary>
            Gets or sets the tabs rendering mode.
            </summary>
        </member>
        <member name="P:Blazorise.States.TabsState.SelectedTab">
            <summary>
            Gets or sets currently selected tab name.
            </summary>
        </member>
        <member name="T:Blazorise.States.ToastState">
            <summary>
            Holds the information about the current state of the <see cref="T:Blazorise.Toast"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.States.ToastState.Visible">
            <summary>
            Defines the visibility of the toast.
            </summary>
        </member>
        <member name="P:Blazorise.States.ToastState.Showing">
            <summary>
            Flag that indicates that the showing animation is currently active.
            </summary>
        </member>
        <member name="P:Blazorise.States.ToastState.Hiding">
            <summary>
            Flag that indicates that the hiding animation is currently active.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColor">
            <summary>
            Defines the color and its shade options.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColor.#ctor(System.String,System.String)">
            <summary>
            A default <see cref="T:Blazorise.ThemeColor"/> constructor.
            </summary>
            <param name="key">Color key.</param>
            <param name="name">Color display name.</param>
        </member>
        <member name="P:Blazorise.ThemeColor.Key">
            <summary>
            Gets the color key.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColor.Name">
            <summary>
            Gets the color display name.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColor.Shades">
            <summary>
            Gets the list of color shades.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorAmber">
            <summary>
            Defines the Amber color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorAmber.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorAmber"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorBlue">
            <summary>
            Defines the Blue color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorBlue.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorBlue"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorBlueGray">
            <summary>
            Defines the Blue-Gray color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorBlueGray.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorBlueGray"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorBrown">
            <summary>
            Defines the Brown color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorBrown.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorBrown"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorCyan">
            <summary>
            Defines the Cyan color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorCyan.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorCyan"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorDeepOrange">
            <summary>
            Defines the Deep-Orange color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorDeepOrange.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorDeepOrange"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorDeepPurple">
            <summary>
            Defines the Deep-Purple color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorDeepPurple.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorDeepPurple"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorGray">
            <summary>
            Defines the Gray color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorGray.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorGray"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorGreen">
            <summary>
            Defines the Green color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorGreen.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorGreen"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorIndigo">
            <summary>
            Defines the Indigo color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorIndigo.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorIndigo"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorLightBlue">
            <summary>
            Defines the Light-Blue color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorLightBlue.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorLightBlue"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorLightGreen">
            <summary>
            Defines the Light-Green color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorLightGreen.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorLightGreen"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorLime">
            <summary>
            Defines the Lime color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorLime.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorLime"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorOrange">
            <summary>
            Defines the Orange color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorOrange.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorOrange"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorPink">
            <summary>
            Defines the Pink color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorPink.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorPink"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorPurple">
            <summary>
            Defines the Purple color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorPurple.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorPurple"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorRed">
            <summary>
            Defines the Red color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorRed.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorRed"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColors">
            <summary>
            Default all the theme colors. 
            </summary>
            <remarks>
            Source: https://htmlcolorcodes.com/color-chart/material-design-color-chart/
            </remarks>
        </member>
        <member name="P:Blazorise.ThemeColors.Red">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorRed">Red</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Pink">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorPink">Pink</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Purple">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorPurple">Purple</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.DeepPurple">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorDeepPurple">Deep Purple</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Indigo">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorIndigo">Indigo</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Blue">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorBlue">Blue</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.LightBlue">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorLightBlue">Light Blue</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Cyan">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorCyan">Cyan</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Teal">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorTeal">Teal</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Green">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorGreen">Green</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.LightGreen">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorLightGreen">Light Green</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Lime">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorLime">Lime</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Yellow">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorYellow">Yellow</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Amber">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorAmber">Amber</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Orange">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorOrange">Orange</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.DeepOrange">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorDeepOrange">Deep Orange</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Brown">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorBrown">Brown</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Gray">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorGray">Gray</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.BlueGray">
            <summary>
            Gets the theme <see cref="T:Blazorise.ThemeColorBlueGray">Blue Gray</see> color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColors.Items">
            <summary>
            Gets or sets the map of all theme colors.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorShade">
            <summary>
            Defines the color shade.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorShade.#ctor(System.String,System.String,System.String)">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorShade"/> constructor.
            </summary>
            <param name="key">Shade key.</param>
            <param name="name">Shade display name.</param>
            <param name="value">Shade color.</param>
        </member>
        <member name="P:Blazorise.ThemeColorShade.Key">
            <summary>
            Gets the shade key.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorShade.Name">
            <summary>
            Gets the shade display name.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorShade.Value">
            <summary>
            Gets the shade color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorTeal">
            <summary>
            Defines the Teal color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorTeal.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorTeal"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorYellow">
            <summary>
            Defines the Yellow color along with its color shades.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorYellow.#ctor">
            <summary>
            A default <see cref="T:Blazorise.ThemeColorYellow"/> constructor
            </summary>
        </member>
        <member name="T:Blazorise.ThemeAlertOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Alert"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeAlertOptions.BackgroundLevel">
            <summary>
            Defines a level of background color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="P:Blazorise.ThemeAlertOptions.BorderLevel">
            <summary>
            Defines a level of border color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="P:Blazorise.ThemeAlertOptions.ColorLevel">
            <summary>
            Defines a level of text color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="P:Blazorise.ThemeAlertOptions.GradientBlendPercentage">
            <summary>
            Defines the percentage of how much the colors will blend together.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBackgroundOptions">
            <summary>
            Defines the map of background colors.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.ColorMap">
            <summary>
            Map of background colors.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeBackgroundOptions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeBackgroundOptions.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Item(System.String)">
            <summary>
            Gets the color handler associated with the specified color key.
            </summary>
            <param name="key">Color key.</param>
            <returns>Return the color getter.</returns>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Primary">
            <summary>
            Gets or sets the background primary color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Secondary">
            <summary>
            Gets or sets the background secondary color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Success">
            <summary>
            Gets or sets the background success color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Info">
            <summary>
            Gets or sets the background info color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Warning">
            <summary>
            Gets or sets the background warning color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Danger">
            <summary>
            Gets or sets the background danger color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Light">
            <summary>
            Gets or sets the background light color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Dark">
            <summary>
            Gets or sets the background dark color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Body">
            <summary>
            Gets or sets the background body color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBackgroundOptions.Muted">
            <summary>
            Gets or sets the background muted color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBadgeOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Badge"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBarBrandColorOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.BarBrand"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarBrandColorOptions.BackgroundColor">
            <summary>
            Gets or sets the brand background color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBarColorOptions">
            <summary>
            Defines the color options for the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarColorOptions.BackgroundColor">
            <summary>
            Gets or sets the bar background color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarColorOptions.GradientBlendPercentage">
            <summary>
            Defines the percentage of how much the background colors will blend together.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarColorOptions.Color">
            <summary>
            Gets or sets the bar text color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarColorOptions.ItemColorOptions">
            <summary>
            Gets or sets the <see cref="T:Blazorise.BarDropdownItem"/> color options.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarColorOptions.DropdownColorOptions">
            <summary>
            Gets or sets the <see cref="T:Blazorise.BarDropdown"/> color options.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarColorOptions.BrandColorOptions">
            <summary>
            Gets or sets the <see cref="T:Blazorise.BarBrand"/> color options.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBarDropdownColorOptions">
            <summary>
            Defines the color options for the <see cref="T:Blazorise.BarDropdown"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarDropdownColorOptions.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBarItemColorOptions">
            <summary>
            Defines the color options for the <see cref="T:Blazorise.BarDropdownItem"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarItemColorOptions.ActiveBackgroundColor">
            <summary>
            Gets or sets the item background color when it is selected.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarItemColorOptions.ActiveColor">
            <summary>
            Gets or sets the item text color when it is selected.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarItemColorOptions.HoverBackgroundColor">
            <summary>
            Gets or sets the item background color when it is hovered.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarItemColorOptions.HoverColor">
            <summary>
            Gets or sets the item text color when it is hovered.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBarOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Bar"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.VerticalWidth">
            <summary>
            Gets or sets the width of the <see cref="T:Blazorise.Bar"/> in vertical mode.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.VerticalSmallWidth">
            <summary>
            Gets or sets the width of the <see cref="T:Blazorise.Bar"/> in vertical collapsed mode.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.VerticalBrandHeight">
            <summary>
            Gets or sets the size of the <see cref="T:Blazorise.BarBrand"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.VerticalPopoutMenuWidth">
            <summary>
            Gets or sets the width of the dropdown-menu in vertical mode.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.HorizontalHeight">
            <summary>
            Gets or sets the height of the <see cref="T:Blazorise.Bar"/> in horizontal mode (only for Bar that is placed inside of <see cref="T:Blazorise.LayoutHeader"/>).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.DarkColors">
            <summary>
            Gets or sets the theme settings for the <see cref="T:Blazorise.Bar"/> dark color scheme.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBarOptions.LightColors">
            <summary>
            Gets or sets the theme settings for the <see cref="T:Blazorise.Bar"/> light color scheme.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBasicOptions">
            <summary>
            Base class for all theme options.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBasicOptions.BorderRadius">
            <summary>
            Defines the size of the element border radius.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeBasicOptions.HasOptions">
            <summary>
            Checks if the options has any option attribute defined.
            </summary>
            <returns>True if at least one attribute is defined.</returns>
        </member>
        <member name="T:Blazorise.ThemeBodyOptions">
            <summary>
            Defines the body theme options.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBodyOptions.BackgroundColor">
            <summary>
            Gets or sets the body background color.
            </summary>
            <remarks>
            If defined it will also override any <see cref="F:Blazorise.Background.Body"/>.
            </remarks>
        </member>
        <member name="P:Blazorise.ThemeBodyOptions.TextColor">
            <summary>
            Gets or sets the body text color.
            </summary>
            <remarks>
            If defined it will also override any <see cref="F:Blazorise.TextColor.Body"/>.
            </remarks>
        </member>
        <member name="T:Blazorise.ThemeBreadcrumbOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Breadcrumb"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBreadcrumbOptions.Color">
            <summary>
            Gets or sets the breadcrumb text color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeBreakpointOptions">
            <summary>
            Defines the map of media breakpoints.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.BreakpointMap">
            <summary>
            Map of media breakpoints.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeBreakpointOptions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeBreakpointOptions.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.Item(System.String)">
            <summary>
            Gets the breakpoint handler associated with the specified breakpoint key.
            </summary>
            <param name="key">Breakpoint key</param>
            <returns>Return the breakpoint getter.</returns>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.Mobile">
            <summary>
            Gets or sets the breakpoint size for mobile screens. Defaults to 0px.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.Tablet">
            <summary>
            Gets or sets the breakpoint size for tablet screens. Defaults to 576px.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.Desktop">
            <summary>
            Gets or sets the breakpoint size for desktop screens. Defaults to 768px.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.Widescreen">
            <summary>
            Gets or sets the breakpoint size for wide screens. Defaults to 992px.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeBreakpointOptions.FullHD">
            <summary>
            Gets or sets the breakpoint size for largest screens. Defaults to 1200px.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeButtonOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Button"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.Padding">
            <summary>
            Gets or sets the padding for the button element.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.Margin">
            <summary>
            Gets or sets the margin for the button element.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.BoxShadowSize">
            <summary>
            Gets or sets the box shadow size of the button element.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.BoxShadowTransparency">
            <summary>
            Gets or sets the box shadow transparency of the button element(range 0-255)
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.HoverDarkenColor">
            <summary>
            Defines how much the color will darken when element is hovered(range 0-100).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.HoverLightenColor">
            <summary>
            Defines how much the color will lighten when element is hovered(range 0-100).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.ActiveDarkenColor">
            <summary>
            Defines how much the color will darken when element is active(range 0-100).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.ActiveLightenColor">
            <summary>
            Defines how much the color will lighten when element is active(range 0-100).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.LargeBorderRadius">
            <summary>
            Defines the button border radius when it is <see cref="F:Blazorise.Size.Large"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.SmallBorderRadius">
            <summary>
            Defines the button border radius when it is <see cref="F:Blazorise.Size.Small"/>.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.GradientBlendPercentage">
            <summary>
            Defines the percentage of how much the colors will blend together.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.DisabledOpacity">
            <summary>
            Defined the opacity of disabled button(range 0-1).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeButtonOptions.Size">
            <summary>
            Gets or sets the global size for button components.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeCardOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Card"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeCardOptions.ImageTopRadius">
            <summary>
            Defines the top radius of the image element placed inside of the card.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeColorOptions">
            <summary>
            Defines the map of main theme colors.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeColorOptions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeColorOptions.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Item(System.String)">
            <summary>
            Gets the color handler associated with the specified color key.
            </summary>
            <param name="key">Color key</param>
            <returns>Return the color getter.</returns>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Primary">
            <summary>
            Gets or sets the primary theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Secondary">
            <summary>
            Gets or sets the secondary theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Success">
            <summary>
            Gets or sets the success theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Info">
            <summary>
            Gets or sets the info theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Warning">
            <summary>
            Gets or sets the warning theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Danger">
            <summary>
            Gets or sets the danger theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Light">
            <summary>
            Gets or sets the light theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Dark">
            <summary>
            Gets or sets the dark theme color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeColorOptions.Link">
            <summary>
            Gets or sets the link theme color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeContainerMaxWidthOptions">
            <summary>
            Defines the map of container breakpoint sizes.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeContainerMaxWidthOptions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeContainerMaxWidthOptions.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ThemeContainerMaxWidthOptions.Item(System.String)">
            <summary>
            Gets the breakpoint handler associated with the specified breakpoint key.
            </summary>
            <param name="key">Breakpoint key</param>
            <returns>Return the breakpoint getter.</returns>
        </member>
        <member name="P:Blazorise.ThemeContainerMaxWidthOptions.Mobile">
            <summary>
            Gets or sets the breakpoint size for mobile screens.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeContainerMaxWidthOptions.Tablet">
            <summary>
            Gets or sets the breakpoint size for tablet screens.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeContainerMaxWidthOptions.Desktop">
            <summary>
            Gets or sets the breakpoint size for desktop screens.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeContainerMaxWidthOptions.Widescreen">
            <summary>
            Gets or sets the breakpoint size for wide screens.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeContainerMaxWidthOptions.FullHD">
            <summary>
            Gets or sets the breakpoint size for largest screens.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeDividerOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Divider"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDividerOptions.Color">
            <summary>
            Gets or sets the divider color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDividerOptions.Thickness">
            <summary>
            Gets or sets the divider thickness.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDividerOptions.TextSize">
            <summary>
            Gets or sets the size of the divider text.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDividerOptions.DividerType">
            <summary>
            Gets or sets the default <see cref="P:Blazorise.ThemeDividerOptions.DividerType">divider type</see>.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeDropdownOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Dropdown"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDropdownOptions.GradientBlendPercentage">
            <summary>
            Defines the percentage of how much the colors will blend together.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDropdownOptions.ToggleIconVisible">
            <summary>
            Defines the visibility of dropdown toggle icon.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeDropdownOptions.Size">
            <summary>
            Gets or sets the global size for dropdown components.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeInputOptions">
            <summary>
            Defines the theme options for the input component(s).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeInputOptions.Color">
            <summary>
            Gets or sets the input text color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeInputOptions.CheckColor">
            <summary>
            Gets or sets the checkbox color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeInputOptions.SliderColor">
            <summary>
            Gets or sets the slider text color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeInputOptions.Size">
            <summary>
            Gets or sets the global size for input components.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeInputOptions.HasOptions">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ThemeJumbotronOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Jumbotron"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeListGroupItemOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.ListGroupItem"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeListGroupItemOptions.BackgroundLevel">
            <summary>
            Defines a level of background color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="P:Blazorise.ThemeListGroupItemOptions.ColorLevel">
            <summary>
            Defines a level of text color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="P:Blazorise.ThemeListGroupItemOptions.GradientBlendPercentage">
            <summary>
            Defines the percentage of how much the colors will blend together.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeModalOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Modal"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ThemePaginationOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Pagination"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemePaginationOptions.LargeBorderRadius">
            <summary>
            Gets or sets the border radius of the large pagination.
            </summary>
        </member>
        <member name="P:Blazorise.ThemePaginationOptions.Size">
            <summary>
            Gets or sets the global size for pagination components.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeParagraphOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Paragraph"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeProgressOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Progress"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeProgressOptions.PageProgressDefaultColor">
            <summary>
            Default color of the progress bar.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeProgressOptions.Size">
            <summary>
            Gets or sets the global size for progress components.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeRatingOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Rating"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeRatingOptions.HoverOpacity">
            <summary>
            Gets or sets the mouse hover opacity for the rating item(range 0-1).
            </summary>
        </member>
        <member name="T:Blazorise.ThemeSidebarOptions">
            <summary>
            Defines the theme options for the Sidebar component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSidebarOptions.Width">
            <summary>
            Gets or sets the width of the sidebar.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSidebarOptions.BackgroundColor">
            <summary>
            Gets or sets the background color of the sidebar.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSidebarOptions.Color">
            <summary>
            Gets or sets the text color of the sidebar items.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeSnackbarOptions">
            <summary>
            Defines the theme options for the Snackbar component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSnackbarOptions.BackgroundColor">
            <summary>
            Default snackbar color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSnackbarOptions.TextColor">
            <summary>
            Default text color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSnackbarOptions.ButtonColor">
            <summary>
            Default button color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSnackbarOptions.ButtonHoverColor">
            <summary>
            Default button hover color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSnackbarOptions.VariantBackgroundColorLevel">
            <summary>
            Defines a level of background color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="T:Blazorise.ThemeSpacingOptions">
            <summary>
            Defines the map of spacing sizes.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.SpacingMap">
            <summary>
            Map of text colors.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeSpacingOptions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeSpacingOptions.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Item(System.String)">
            <summary>
            Gets the spacing associated with the specified key.
            </summary>
            <param name="key">Spacing key</param>
            <returns>Return the spacing getter.</returns>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Is0">
            <summary>
            Gets or sets the zero spacing size.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Is1">
            <summary>
            Gets or sets the spacing for the extra small sizes.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Is2">
            <summary>
            Gets or sets the spacing for the small sizes.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Is3">
            <summary>
            Gets or sets the spacing for the default sizes.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Is4">
            <summary>
            Gets or sets the spacing for the large sizes.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpacingOptions.Is5">
            <summary>
            Gets or sets the spacing for the extra large sizes.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeSpinKitOptions">
            <summary>
            Defines the theme options for the SpinKit component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpinKitOptions.Color">
            <summary>
            SpinKit color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSpinKitOptions.Size">
            <summary>
            SpinKit size.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeStepsOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Steps"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemIconColor">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> icon color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemIconCompleted">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> icon color for completed state.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemIconCompletedYiq">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> icon contrast color for completed state.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemIconActive">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> icon color for active state.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemIconActiveYiq">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> icon contrast color for active state.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemTextColor">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> text color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemTextCompleted">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> text color for completed state.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeStepsOptions.StepsItemTextActive">
            <summary>
            Gets or sets the <see cref="T:Blazorise.Step"/> text color for active state.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeSwitchOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Switch`1">Switch</see> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwitchOptions.BoxShadowLightenColor">
            <summary>
            Gets or sets how much the switch box-shadow will lighten(range 0-100).
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwitchOptions.DisabledLightenColor">
            <summary>
            Gets or sets how much the switch disabled color will lighten(range 0-100).
            </summary>
        </member>
        <member name="T:Blazorise.ThemeTableOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Table"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTableOptions.BackgroundLevel">
            <summary>
            Defines a level of background color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="P:Blazorise.ThemeTableOptions.BorderLevel">
            <summary>
            Defines a level of border color.
            </summary>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
        </member>
        <member name="T:Blazorise.ThemeTabsOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Tabs"/> component.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeTextColorOptions">
            <summary>
            Defines the map of text colors.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.ColorMap">
            <summary>
            Map of text colors.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeTextColorOptions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeTextColorOptions.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Item(System.String)">
            <summary>
            Gets the color handler associated with the specified color key.
            </summary>
            <param name="key">Color key</param>
            <returns>Return the color getter.</returns>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Primary">
            <summary>
            Gets or sets the text primary color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Secondary">
            <summary>
            Gets or sets the text secondary color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Success">
            <summary>
            Gets or sets the text success color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Info">
            <summary>
            Gets or sets the text info color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Warning">
            <summary>
            Gets or sets the text warning color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Danger">
            <summary>
            Gets or sets the text danger color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Light">
            <summary>
            Gets or sets the text light color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Dark">
            <summary>
            Gets or sets the text dark color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Body">
            <summary>
            Gets or sets the text body color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Muted">
            <summary>
            Gets or sets the text muted color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.White">
            <summary>
            Gets or sets the text white color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.Black50">
            <summary>
            Gets or sets the text black-50% color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTextColorOptions.White50">
            <summary>
            Gets or sets the text white-50% color.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeTooltipOptions">
            <summary>
            Defines the theme options for the <see cref="T:Blazorise.Tooltip"/> component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.BackgroundColor">
            <summary>
            Tooltip background color. Can contain alpha value in 8-hex formatted color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.Color">
            <summary>
            Tooltip text color. Can contain alpha value in 8-hex formatted color.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.FontSize">
            <summary>
            Gets or sets the tooltip font-size.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.FadeTime">
            <summary>
            Gets or sets the duration of the tooltip fade animation.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.MaxWidth">
            <summary>
            Gets or sets the maximum width of the tooltip.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.Padding">
            <summary>
            Gets or sets the padding of the tooltip container.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeTooltipOptions.ZIndex">
            <summary>
            Gets or sets the tooltip z-index.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeVariables">
            <summary>
            Defines all the built-in CSS variable names.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeVariables.White">
            <summary>
            Gets the theme white color variable name.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeVariables.Black">
            <summary>
            Gets the theme black color variable name.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeVariables.BodyBackgroundColor">
            <summary>
            Gets the body background color variable name.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeVariables.BodyTextColor">
            <summary>
            Gets the body text color variable name.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeVariables.Color(System.String)">
            <summary>
            Gets the theme color variable name.
            </summary>
            <param name="variant">Color variant name.</param>
            <returns>Color variant name.</returns>
        </member>
        <member name="M:Blazorise.ThemeVariables.BackgroundColor(System.String)">
            <summary>
            Gets the theme background color variable name.
            </summary>
            <param name="variant">Color variant name.</param>
            <returns>Background variant name.</returns>
        </member>
        <member name="M:Blazorise.ThemeVariables.BackgroundYiqColor(System.String)">
            <summary>
            Gets the theme background contrast variable name.
            </summary>
            <param name="variant">Color variant name.</param>
            <returns>Contrast variant name.</returns>
        </member>
        <member name="M:Blazorise.ThemeVariables.TextColor(System.String)">
            <summary>
            Gets the theme text color variable name.
            </summary>
            <param name="variant">Text color variant name.</param>
            <returns>Text color variant name.</returns>
        </member>
        <member name="M:Blazorise.ThemeVariables.Breakpoint(System.String)">
            <summary>
            Gets the breakpoint variable name.
            </summary>
            <param name="name">Breakpoint name.</param>
            <returns>Breakpoint name.</returns>
        </member>
        <member name="T:Blazorise.HslColor">
            <summary>
            HlsColor represents colors by their Hue-Saturation-Luminosity value rather than the traditional RGB value.
            </summary>
        </member>
        <member name="M:Blazorise.HslColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates instance of the class with the specified hue, saturation, and luminosity.
            </summary>
            <param name="hue">Starting hue value.</param>
            <param name="saturation">Starting saturation value.</param>
            <param name="luminosity">Starting luminosity value.</param>
        </member>
        <member name="P:Blazorise.HslColor.Hue">
            <summary>
            Gets or sets the Hue property.
            </summary>
        </member>
        <member name="P:Blazorise.HslColor.Saturation">
            <summary>
            Gets or sets the Saturation property.
            </summary>
        </member>
        <member name="P:Blazorise.HslColor.Luminosity">
            <summary>
            Gets or sets the Luminosity property.
            </summary>
        </member>
        <member name="F:Blazorise.HslColor.Empty">
            <summary>
            Represents a color that is null.-
            </summary>
        </member>
        <member name="M:Blazorise.HslColor.ToColor">
            <summary>
            Converts an HslColor value to a Color.
            </summary>
            <returns>Converted color.</returns>
        </member>
        <member name="T:Blazorise.ThemeSwatch">
            <summary>
            Defines the color swatch.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.Key">
            <summary>
            Gets the swatch key.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.HexColor">
            <summary>
            Gets the swatch color in hex format.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.Hue">
            <summary>
            Gets the swatch hls-color hue component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.HueScale">
            <summary>
            Gets the swatch hls-color hue scale.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.Saturation">
            <summary>
            Gets the swatch hls-color saturation component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.SaturationScale">
            <summary>
            Gets the swatch hls-color saturation scale.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatch.Lightness">
            <summary>
            Gets the swatch hls-color lightness component.
            </summary>
        </member>
        <member name="T:Blazorise.ThemeSwatchOptions">
            <summary>
            Defines the options to build the color swatches.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatchOptions.HexColor">
            <summary>
            Gets or sets the color in HEX format.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatchOptions.Hue">
            <summary>
            Gets or sets the palete Hue component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatchOptions.Saturation">
            <summary>
            Gets or sets the palete Saturation component.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatchOptions.LightnessMin">
            <summary>
            Gets or sets the Lightness/Luminance Distribution 0-100.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatchOptions.LightnessMax">
            <summary>
            Lightness/Luminance Distribution 0-100.
            </summary>
        </member>
        <member name="P:Blazorise.ThemeSwatchOptions.UseLightness">
            <summary>
            Set to true if you want to calculate colors based on lightness instead of luminance.
            </summary>
        </member>
        <member name="T:Blazorise.Theme">
            <summary>
            Holds the options for the theme.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.Enabled">
            <summary>
            Globaly enable or disable the theme.
            </summary>
        </member>
        <member name="E:Blazorise.Theme.Changed">
            <summary>
            Event raised after the theme options has changed.
            </summary>
        </member>
        <member name="M:Blazorise.Theme.ThemeHasChanged">
            <summary>
            Must be called to rebuild the theme.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.White">
            <summary>
            Defines the base theme light color.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.Black">
            <summary>
            Defines the base theme dark color.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.LuminanceThreshold">
            <summary>
            The yiq lightness value that determines when the lightness of color changes from "dark" to "light". Acceptable values are between 0 and 255.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.IsGradient">
            <summary>
            Enables the gradient background colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.IsRounded">
            <summary>
            Globaly enables rounded elements.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ValidBreakpoints">
            <summary>
            Gets the valid breakpoints.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ValidContainerMaxWidths">
            <summary>
            Gets the valid sizes for container.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ValidColors">
            <summary>
            Gets the valid variant colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ValidBackgroundColors">
            <summary>
            Gets the valid background colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ValidTextColors">
            <summary>
            Gets the valid text colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.BodyOptions">
            <summary>
            Defined the body options.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.BreakpointOptions">
            <summary>
            Global options for media breakpoints.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ContainerMaxWidthOptions">
            <summary>
            Define the maximum width of container for different screen sizes.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ColorOptions">
            <summary>
            Used to override default theme colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.BackgroundOptions">
            <summary>
            Used to override default background colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.TextColorOptions">
            <summary>
            Used to override default background colors.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ThemeColorInterval">
            <summary>
            Set a specific jump point for requesting color jumps
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ButtonOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Button"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.DropdownOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Dropdown"/> styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.InputOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.BaseInputComponent`1">Input</see> component(s) styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.CardOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Card"/> styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ModalOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Modal">Modal dialog</see> styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.TabsOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Tabs"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ProgressOptions">
            <summary>
            Theme options to override the <see cref="T:System.Progress`1">Progress</see> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.RatingOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Rating"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.AlertOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Alert"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.TableOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Table"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.BreadcrumbOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Breadcrumb"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.BadgeOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Badge"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.SwitchOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Switch`1">Switch</see> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.PaginationOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Pagination"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.SidebarOptions">
            <summary>
            Theme options to override the Sidebar component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.SnackbarOptions">
            <summary>
            Theme options to override the Snackbar component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.StepsOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Steps"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.BarOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Bar"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.DividerOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Divider"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.TooltipOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.Tooltip"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.SpinKitOptions">
            <summary>
            Theme options to override the SpinKit component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.ListGroupItemOptions">
            <summary>
            Theme options to override the <see cref="T:Blazorise.ListGroupItem"/> component styles.
            </summary>
        </member>
        <member name="P:Blazorise.Theme.SpacingOptions">
            <summary>
            Theme options to override the spacing utilities.
            </summary>
        </member>
        <member name="M:Blazorise.Theme.Equals(Blazorise.Theme)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Theme.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Themes.ThemeCache">
            <summary>
            Default implementation of <see cref="T:Blazorise.IThemeCache"/>.
            </summary>
        </member>
        <member name="M:Blazorise.Themes.ThemeCache.#ctor(Blazorise.BlazoriseOptions)">
            <summary>
            A default <see cref="T:Blazorise.Themes.ThemeCache"/> constructor.
            </summary>
            <param name="options">Blazorise global settings.</param>
        </member>
        <member name="M:Blazorise.Themes.ThemeCache.CacheVariables(Blazorise.Theme,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Themes.ThemeCache.CacheStyles(Blazorise.Theme,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Themes.ThemeCache.TryGetVariablesFromCache(Blazorise.Theme,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Themes.ThemeCache.TryGetStylesFromCache(Blazorise.Theme,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Themes.ThemeCache.ThemeCachedResource">
            <summary>
            Holds a cached resource
            </summary>
        </member>
        <member name="T:Blazorise.ThemeGenerator">
            <summary>
            Default implementation of <see cref="T:Blazorise.IThemeGenerator"/>.
            </summary>
        </member>
        <member name="M:Blazorise.ThemeGenerator.#ctor(Blazorise.IThemeCache)">
            <summary>
            A default <see cref="T:Blazorise.ThemeGenerator"/> constructor.
            </summary>
            <param name="themeCache">Cache used to save build results.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateVariables(Blazorise.Theme)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBodyVariables(Blazorise.Theme)">
            <summary>
            Generates the body CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBreakpointVariables(Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the breakpoint CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="name">Name of the breakpoint.</param>
            <param name="size">Size of the breakpoint.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateColorVariables(Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="value">Color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateButtonColorVariables(Blazorise.Theme,System.String,System.String,System.String,Blazorise.ThemeButtonOptions)">
            <summary>
            Generates the button color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="inBackgroundColor">Button background color.</param>
            <param name="inBorderColor">Button border color.</param>
            <param name="options">Button options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateOutlineButtonColorVariables(Blazorise.Theme,System.String,System.String,Blazorise.ThemeButtonOptions)">
            <summary>
            Generates the outline button color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="inBorderColor">Button border color.</param>
            <param name="options">Button options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateSnackbarColorVariables(Blazorise.Theme,System.String,System.String,Blazorise.ThemeSnackbarOptions)">
            <summary>
            Generates the snackbar color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="inColor">Snackbar color.</param>
            <param name="options">Snackbar options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateStepsColorVariables(Blazorise.Theme,System.String,System.String,Blazorise.ThemeStepsOptions)">
            <summary>
            Generates the steps color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="inColor">Steps color.</param>
            <param name="options">Steps options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateProgressColorVariables(Blazorise.Theme,System.String,System.String,Blazorise.ThemeProgressOptions)">
            <summary>
            Generates the progress-bar color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="inColor">Progress-bar color.</param>
            <param name="options">Progress-bar options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateRatingColorVariables(Blazorise.Theme,System.String,System.String,Blazorise.ThemeRatingOptions)">
            <summary>
            Generates the rating color CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Color variant name.</param>
            <param name="inColor">Rating color.</param>
            <param name="options">Rating options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBackgroundVariables(Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the background CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Background variant name.</param>
            <param name="inColor">Background color.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateTextColorVariables(Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the text CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="variant">Text variant name.</param>
            <param name="inColor">Text color.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateSidebarVariables(Blazorise.Theme,Blazorise.ThemeSidebarOptions)">
            <summary>
            Generates the text CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="sidebarOptions">Sidebar options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBarVariables(Blazorise.Theme,Blazorise.ThemeBarOptions)">
            <summary>
            Generates the bar component CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="barOptions">Bar options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateSnackbarVariables(Blazorise.Theme,Blazorise.ThemeSnackbarOptions)">
            <summary>
            Generates the snackbar CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="snackbarOptions">Snackbar options</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateDividerVariables(Blazorise.Theme,Blazorise.ThemeDividerOptions)">
            <summary>
            Generates the divider CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="dividerOptions">Divider options</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateTooltipVariables(Blazorise.Theme,Blazorise.ThemeTooltipOptions)">
            <summary>
            Generates the tooltip CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="tooltipOptions">Tooltip options</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBreadcrumbVariables(Blazorise.Theme,Blazorise.ThemeBreadcrumbOptions)">
            <summary>
            Generates the breadcrumb CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="breadcrumbOptions">Breadcrumb options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateStepsVariables(Blazorise.Theme,Blazorise.ThemeStepsOptions)">
            <summary>
            Generates the steps CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="stepsOptions">Steps options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateSpinKitVariables(Blazorise.Theme,Blazorise.ThemeSpinKitOptions)">
            <summary>
            Generates the spinkit CSS variables.
            </summary>
            <param name="theme">Currently used theme options.</param>
            <param name="spinKitOptions">SpinKit options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Var(System.String,System.String)">
            <summary>
            Gets the variable value.
            </summary>
            <param name="name">Variable name.</param>
            <param name="defaultValue">Fallback value if variable is not found.</param>
            <returns>Variable value.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateStyles(Blazorise.Theme)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBodyStyles(System.Text.StringBuilder,Blazorise.Theme)">
            <summary>
            Generates the body styles.
            </summary>
            <param name="sb">Result of the generator.</param>
            <param name="theme">Currently used theme options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBreakpointStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the breakpoint styles.
            </summary>
            <param name="sb">Result of the generator.</param>
            <param name="theme">Currently used theme options.</param>
            <param name="breakpoint">Breakpoint options.</param>
            <param name="value">Breakpoint size.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateColorStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates color styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBackgroundStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the background styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateTypographyVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the text styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBackgroundVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String)">
            <summary>
            Generates the background styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBorderVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String)">
            <summary>
            Generates the border styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateButtonVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,Blazorise.ThemeButtonOptions)">
            <summary>
            Generates the button styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
            <param name="options">Button options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateButtonOutlineVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,Blazorise.ThemeButtonOptions)">
            <summary>
            Generates the outline button styles that are based on the variant names.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Variant name.</param>
            <param name="options">Button options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateButtonStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeButtonOptions)">
            <summary>
            Generates the button styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Button options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateDropdownStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeDropdownOptions)">
            <summary>
            Generates the dropdown styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Dropdown options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateInputStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeInputOptions)">
            <summary>
            Generates the input element styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Input options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBadgeVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the badge styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Badge variant name.</param>
            <param name="inBackgroundColor">Badge color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateSwitchVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,Blazorise.ThemeSwitchOptions)">
            <summary>
            Generates the switch styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Switch variant name.</param>
            <param name="inBackgroundColor">Switch color value.</param>
            <param name="switchOptions">Switch options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateStepsVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,Blazorise.ThemeStepsOptions)">
            <summary>
            Generates the steps styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Steps variant name.</param>
            <param name="inBackgroundColor">Steps color value.</param>
            <param name="stepsOptions">Steps options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateProgressVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,Blazorise.ThemeProgressOptions)">
            <summary>
            Generates the progress styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Progress variant name.</param>
            <param name="inBackgroundColor">Progress color value.</param>
            <param name="progressOptions">Progress options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateRatingVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,Blazorise.ThemeRatingOptions)">
            <summary>
            Generates the rating styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Rating variant name.</param>
            <param name="inBackgroundColor">Rating color value.</param>
            <param name="ratingOptions">Rating options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateAlertVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,System.String,System.String,Blazorise.ThemeAlertOptions)">
            <summary>
            Generates the alert styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Alert variant name.</param>
            <param name="inBackgroundColor">Alert background value.</param>
            <param name="inBorderColor">Alert border value.</param>
            <param name="inColor">Alert text color value.</param>
            <param name="options">Alert options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateTableVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,System.String)">
            <summary>
            Generates the table styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Table variant name.</param>
            <param name="inBackgroundColor">Table background value.</param>
            <param name="inBorderColor">Table border value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateCardStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeCardOptions)">
            <summary>
            Generates the card styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Card options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateModalStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeModalOptions)">
            <summary>
            Generates the modal styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Modal options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateTabsStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeTabsOptions)">
            <summary>
            Generates the tabs styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Tabs options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateProgressStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeProgressOptions)">
            <summary>
            Generates the progress styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Progress options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateAlertStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeAlertOptions)">
            <summary>
            Generates the alert styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Alert options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBreadcrumbStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeBreadcrumbOptions)">
            <summary>
            Generates the breadcrumb styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Breadcrumb options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBadgeStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeBadgeOptions)">
            <summary>
            Generates the badge styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Badge options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GeneratePaginationStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemePaginationOptions)">
            <summary>
            Generates the pagination styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Pagination options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateBarStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeBarOptions)">
            <summary>
            Generates the bar styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Bar options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateStepsStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeStepsOptions)">
            <summary>
            Generates the steps styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Steps options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateRatingStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeRatingOptions)">
            <summary>
            Generates the rating styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Rating options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateParagraphVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the paragraph variant styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Color variant name.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateInputVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String)">
            <summary>
            Generates the input variant styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">Color variant name.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateListGroupItemStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeListGroupItemOptions)">
            <summary>
            Generates the list-group-item styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">ListGroupItem options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateListGroupItemVariantStyles(System.Text.StringBuilder,Blazorise.Theme,System.String,System.String,System.String,Blazorise.ThemeListGroupItemOptions)">
            <summary>
            Generates the list-group-item variant styles.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="variant">ListGroupItem variant name.</param>
            <param name="inBackgroundColor">ListGroupItem background value.</param>
            <param name="inColor">ListGroupItem text color value.</param>
            <param name="options">ListGroupItem options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GenerateSpacingStyles(System.Text.StringBuilder,Blazorise.Theme,Blazorise.ThemeSpacingOptions)">
            <summary>
            Generates the spacing utilities bases on the breakpoint and spacing sizes.
            </summary>
            <param name="sb">Target string builder.</param>
            <param name="theme">Theme settings.</param>
            <param name="options">Spacing options.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.AddColorVariable(System.String,System.String,System.Boolean)">
            <summary>
            Handles the adding of color into the list of CSS variables.
            </summary>
            <param name="name">Variable name.</param>
            <param name="hexColor">Color in hex format.</param>
            <param name="addRgbParts">If true, rgb parts will also be defined in the variables.</param>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GetBorderRadius(Blazorise.Theme,System.String,System.String)">
            <summary>
            Determines the border radius from the supplied parameters.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="borderRadius">Border radius.</param>
            <param name="fallbackRadius">Fallback radius if <paramref name="borderRadius">border radius</paramref> is undefined.</param>
            <returns>The right border radius or 0rem if none is defined.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GetGradientBg(Blazorise.Theme,System.String,System.Nullable{System.Single},System.Boolean)">
            <summary>
            Builds the gradient or background CSS style.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="color">Background color.</param>
            <param name="percentage">Percentage of blend if gradient is used.</param>
            <param name="important">If true, !important flag will be set.</param>
            <returns>Gradient or background CSS style.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.GetGradientBgValue(Blazorise.Theme,System.String,System.Nullable{System.Single},System.Boolean)">
            <summary>
            Builds the gradient or background CSS style.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="color">Background color.</param>
            <param name="percentage">Percentage of blend if gradient is used.</param>
            <param name="important">If true, !important flag will be set.</param>
            <returns>Gradient or background CSS style.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ThemeColorLevel(Blazorise.Theme,System.String,System.Int32)">
            <summary>
            Lightens or darkens the color based on the supplied level.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="inColor">Base color.</param>
            <param name="level">Level to adjust the color.</param>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ThemeColorLevel(Blazorise.Theme,System.Drawing.Color,System.Int32)">
            <summary>
            Lightens or darkens the color based on the supplied level.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="color">Base color.</param>
            <param name="level">Level to adjust the color.</param>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ThemeColorLevelHex(Blazorise.Theme,System.String,System.Int32)">
            <summary>
            Lightens or darkens the color based on the supplied level.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="inColor">Base color.</param>
            <param name="level">Level to adjust the color.</param>
            <remarks>Negative level values will lighten the color, while higher levels will darken.</remarks>
            <returns>The adjusted color in hex format.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ParseColor(System.String)">
            <summary>
            Parses the supplied string value and converts it to a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="value">String that represents a color.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Rgba2Rgb(System.Drawing.Color,System.Drawing.Color,System.Nullable{System.Single})">
            <summary>
            Converts the RGBA to RGB color format.
            </summary>
            <param name="background">Tha background color of the system.</param>
            <param name="color">The color to convert.</param>
            <param name="customAlpha">Alpha component of a new color value.</param>
            <returns>A blend of all the supplied color value.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.HexStringToColor(System.String)">
            <summary>
            Converts the hexadecimal string into a <see cref="T:System.Drawing.Color">Color</see> value.
            </summary>
            <param name="hexColor">A color represented as hexadecimal string.</param>
            <returns>Parsed color value or <see cref="F:System.Drawing.Color.Empty">Empty</see> if failed.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.HexStringToHslColor(System.String)">
            <summary>
            Converts the hexadecimal string into a <see cref="T:Blazorise.HslColor">HlsColor</see> value.
            </summary>
            <param name="hexColor">A color represented as hexadecimal string.</param>
            <returns>Parsed color value or <see cref="F:Blazorise.HslColor.Empty">Empty</see> if failed.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.LuminanceFromColor(System.Drawing.Color)">
            <summary>
            Gets the relative brightness of any point in a colorspace, normalized to 0 for darkest black and 1 for lightest white.
            </summary>
            <param name="color">The color from which to calculate luminance.</param>
            <returns>Rteurns the relative brightness of any point in a colorspace, normalized to 0 for darkest black and 1 for lightest white.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.LuminanceFromColor(System.String)">
            <summary>
            Gets the relative brightness of any point in a colorspace, normalized to 0 for darkest black and 1 for lightest white.
            </summary>
            <param name="hexColor">The hex color from which to calculate luminance.</param>
            <returns>Rteurns the relative brightness of any point in a colorspace, normalized to 0 for darkest black and 1 for lightest white.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.CssRgbaFunctionToColor(System.String)">
            <summary>
            Converts the function call into into a <see cref="T:System.Drawing.Color">Color</see> value.
            </summary>
            <param name="cssColor">A color represented as (rgb or rgba) function call.</param>
            <returns>Parsed color value or <see cref="F:System.Drawing.Color.Empty">Empty</see> if failed.</returns>
        </member>
        <member name="F:Blazorise.ThemeGenerator.IsHexDigit">
            <summary>
            Checks for characters that are Hexadecimal
            </summary>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ExtractHexDigits(System.String)">
            <summary>
            Extract only the hex digits from a string.
            </summary>
            <param name="input">A string to extract.</param>
            <returns>A new hex string.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ToHex(System.Drawing.Color)">
            <summary>
            Converts the color to a 6 digit hexadecimal, or 8 digit hexadecimal string if alpha is defined.
            </summary>
            <param name="color">Color to convert.</param>
            <returns>A 6 or 8 hexadecimal digit representation of color value.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ToHexRGBA(System.Drawing.Color)">
            <summary>
            Converts the color 8 digit hexadecimal string.
            </summary>
            <param name="color">Color to convert.</param>
            <returns>A 8 hexadecimal representation of color value.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ToHex(Blazorise.HslColor)">
            <summary>
            Converts the hslColor to a 6 digit hexadecimal, or 8 digit hexadecimal string if alpha is defined.
            </summary>
            <param name="hslColor">Color to convert.</param>
            <returns>A 6 or 8 hexadecimal digit representation of color value.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Transparency(System.String,System.Int32)">
            <summary>
            Applied the transparency to the supplied color.
            </summary>
            <param name="hexColor">Hexadecimal representation of color value.</param>
            <param name="alpha">The alpha component. Valid values are 0 through 255.</param>
            <returns>New transparent color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Transparency(System.Drawing.Color,System.Int32)">
            <summary>
            Applied the transparency to the supplied color.
            </summary>
            <param name="color">Color value.</param>
            <param name="alpha">The alpha component. Valid values are 0 through 255.</param>
            <returns>New transparent color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Darken(System.String,System.Single)">
            <summary>
            Darkens the color based on the defined percentage.
            </summary>
            <param name="hexColor">Hexadecimal representation of the color to darken.</param>
            <param name="percentage">Percentage of how much to darken the color.</param>
            <returns>Darkened color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Darken(System.Drawing.Color,System.Single)">
            <summary>
            Darkens the color based on the defined percentage.
            </summary>
            <param name="color">Color to darken.</param>
            <param name="percentage">Percentage of how much to darken the color.</param>
            <returns>Darkened color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Lighten(System.String,System.Single)">
            <summary>
            Lightens the color based on the defined percentage.
            </summary>
            <param name="hexColor">Hexadecimal representation of the color to darken.</param>
            <param name="percentage">Percentage of how much to lighten the color.</param>
            <returns>Lightened color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Lighten(System.Drawing.Color,System.Single)">
            <summary>
            Lightens the color based on the defined percentage.
            </summary>
            <param name="color">Color to lighten.</param>
            <param name="percentage">Percentage of how much to lighten the color.</param>
            <returns>Lightened color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Invert(System.Drawing.Color)">
            <summary>
            Inverts the supplied color.
            </summary>
            <param name="color">Color to invert.</param>
            <returns>Inverted color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.ChangeColorBrightness(System.Drawing.Color,System.Single)">
            <summary>
            Applies the correction factor on a color to make it brighter.
            </summary>
            <param name="color">Color to brighten.</param>
            <param name="correctionFactor">How much to correct the color.</param>
            <returns>Brightened color.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Contrast(Blazorise.Theme,System.String)">
            <summary>
            Applies the theme contrast to supplied color value.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="hexColor">Hexadecimal representation of the color.</param>
            <returns>New color with the applied contrast.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Contrast(Blazorise.Theme,System.Drawing.Color,System.Nullable{System.Byte})">
            <summary>
            Applies the theme contrast to supplied color value.
            </summary>
            <param name="theme">Theme settings.</param>
            <param name="color">Color to change.</param>
            <param name="luminanceThreshold">The threshold that controls the contrast level.</param>
            <returns>New color with the applied contrast.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.Blend(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Blends the two color based on the supplied percentage.
            </summary>
            <param name="color">First color.</param>
            <param name="color2">Second color.</param>
            <param name="percentage">The level of blend.</param>
            <returns>Combination of two colors.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.FirstNotEmpty(System.String@,System.String[])">
            <summary>
            Gets the first string that is not null or empty.
            </summary>
            <param name="first">First found string that is not empty.</param>
            <param name="values">Array of string to search.</param>
            <returns>True if the result is not null.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.FirstNonEmptyString(System.String[])">
            <summary>
            Gets the first string that is not null or empty.
            </summary>
            <param name="values">Array of string to search.</param>
            <returns>First found string that is not empty.</returns>
        </member>
        <member name="M:Blazorise.ThemeGenerator.MediaBreakpointUp(System.String,System.String)">
            <summary>
            Builds the media breakpoint.
            </summary>
            <param name="size">Size of the media breakpoint.</param>
            <param name="content">Content of media breakpoint.</param>
            <returns>CSS style with media breakpoint.</returns>
        </member>
        <member name="P:Blazorise.ThemeGenerator.ThemeCache">
            <summary>
            Gets the currently used theme cache.
            </summary>
        </member>
        <member name="F:Blazorise.ThemeGenerator.Variables">
            <summary>
            Map of all variables currently used.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.AsyncCountdownTimer">
            <summary>
            Represents a countdown timer that can be extended, paused, and resumed, and allows for actions to be taken on each tick and upon completion.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.#ctor(System.Double,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazorise.Utilities.CountdownTimer"/> class.
            </summary>
            <param name="timeout">The initial timeout duration in milliseconds.</param>    
            <param name="cancellationToken">A cancellation token that can be used to cancel the timer. Defaults to an empty token.</param>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Finalize">
            <summary>
            <see cref="T:Blazorise.Utilities.AsyncCountdownTimer"/> finalizer.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Blazorise.Utilities.CountdownTimer"/>.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Blazorise.Utilities.CountdownTimer"/>.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Ticked(System.Func{System.Double,System.Threading.Tasks.Task})">
            <summary>
            Sets the delegate to be invoked on each tick of the timer.
            </summary>
            <param name="updateProgressDelegate">The delegate to invoke on each tick, which receives the percent complete as an argument.</param>
            <returns>The <see cref="T:Blazorise.Utilities.CountdownTimer"/> instance for chaining.</returns>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Elapsed(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Sets the delegate to be invoked when the timer elapses.
            </summary>
            <param name="elapsedDelegate">The action to perform when the timer elapses.</param>
            <returns>The <see cref="T:Blazorise.Utilities.CountdownTimer"/> instance for chaining.</returns>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Start">
            <summary>
            Starts the countdown timer.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Pause">
            <summary>
            Pauses the countdown timer.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.Resume(System.Double)">
            <summary>
            Resumes the countdown timer, optionally using an extended timeout.
            </summary>
            <param name="extendedTimeout">The extended timeout duration in milliseconds. Defaults to 0.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation of resuming the timer.</returns>
        </member>
        <member name="M:Blazorise.Utilities.AsyncCountdownTimer.DoWorkAsync">
            <summary>
            Performs the timer's work, waiting for ticks, updating progress, and invoking delegates appropriately.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.AsyncDisposable">
            <summary>
            Helper class for asynchronously disposing of short lived objects.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.AsyncDisposable.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            A default <see cref="T:Blazorise.Utilities.AsyncDisposable"/> constructor.
            </summary>
            <param name="action">Asynchronous action with operations to run before disposed.</param>
        </member>
        <member name="M:Blazorise.Utilities.AsyncDisposable.Create(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Create a new <see cref="T:Blazorise.Utilities.AsyncDisposable"/> object.
            </summary>
            <param name="action">Asynchronous action with operations to run before disposed.</param>
            <returns>Returns a new <see cref="T:System.IAsyncDisposable"/> object.</returns>
        </member>
        <member name="M:Blazorise.Utilities.AsyncDisposable.DisposeAsync">
            <summary>
            Asynchronously disposes of any resources.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.ClassBuilder">
            <summary>
            Helper class for easier building of CSS classnames with additional conditions and rules.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ClassBuilder.#ctor(System.Action{Blazorise.Utilities.ClassBuilder})">
            <summary>
            Default class builder constructor that accepts build action.
            </summary>
            <param name="buildClasses">Action responsible for building the classes.</param>
        </member>
        <member name="M:Blazorise.Utilities.ClassBuilder.Append(System.String)">
            <summary>
            Appends a copy of the specified string to this instance.
            </summary>
            <param name="value">The string to append.</param>
        </member>
        <member name="M:Blazorise.Utilities.ClassBuilder.Append(System.String,System.Boolean)">
            <summary>
            Appends a copy of the specified string to this instance if <paramref name="condition"/> is true.
            </summary>
            <param name="value">The string to append.</param>
            <param name="condition">Condition that must be true.</param>
        </member>
        <member name="M:Blazorise.Utilities.ClassBuilder.Append(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends a copy of the specified list of strings to this instance.
            </summary>
            <param name="values">The list of strings to append.</param>
        </member>
        <member name="M:Blazorise.Utilities.ClassBuilder.Dirty">
            <summary>
            Marks the builder as dirty to rebuild the values.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.ClassBuilder.Class">
            <summary>
            Gets the class-names.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.Converters">
            <summary>
            Helper methods for easier conversion between different data types.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.Converters.ToDictionary(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts an object to a dictionary object without the properties which have a null value or a [DataMember( EmitDefaultValue = false )] applied.
            This can be used as a workaround for System.Text.Json which will always serialize null values which breaks ChartJS functionality.
            </summary>
            <param name="source">The source object, can be null.</param>
            <param name="addEmptyObjects">Objects which do not have any properties are also added to the dictionary. Default value is true.</param>
            <param name="forceCamelCase">Force to use CamelCase, even if a DataMember has another casing defined. Default value is true.</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:Blazorise.Utilities.Converters.ChangeType``1(System.Object)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="TValue">The type of object to return.</typeparam>
            <param name="value">An object that implements the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>An object whose type is conversionType and whose value is equivalent to value.</returns>
            <remarks>
            https://stackoverflow.com/a/1107090/833106
            </remarks>
        </member>
        <member name="M:Blazorise.Utilities.Converters.TryChangeType``1(System.Object,``0@,System.Globalization.CultureInfo)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="TValue">The type of object to return.</typeparam>
            <param name="value">An object that implements the <see cref="T:System.IConvertible"/> interface.</param>
            <param name="result">New instance of object whose value is equivalent to the specified object.</param>
            <param name="cultureInfo">Culture info to use for conversion.</param>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:Blazorise.Utilities.Converters.TryParseAndLimitLargeNumber``1(System.String,``0@,System.Globalization.CultureInfo)">
            <summary>
            Tries to parse a large string representing a number and returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="TValue">The type of object to return.</typeparam>
            <param name="value">The numeric string representation.</param>
            <param name="result">New instance of object whose value is equivalent to the specified object.</param>
            <param name="cultureInfo">Culture info to use for conversion.</param>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:Blazorise.Utilities.Converters.GetMinMaxValueOfType``1">
            <summary>
            Gets the min and max possible value based on the supplied value type
            </summary>
            <typeparam name="TValue">Value data type.</typeparam>
            <returns>Returns the min and max value of supplied value type.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when value type is unknown.</exception>
        </member>
        <member name="T:Blazorise.Utilities.CountdownTimer">
            <summary>
            Timer that will execute an event after it elapsed.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.CountdownTimer.interval">
            <summary>
            Saved the timer interval when it was first initialized.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.CountdownTimer.timer">
            <summary>
            Internal timer used to delay the value.
            </summary>
        </member>
        <member name="E:Blazorise.Utilities.CountdownTimer.Elapsed">
            <summary>
            Event raised after the interval has passed.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.CountdownTimer.#ctor(System.Double)">
            <summary>
            Default constructor.
            </summary>
            <param name="interval">Interval by which the timer will countdown.</param>
        </member>
        <member name="M:Blazorise.Utilities.CountdownTimer.Start">
            <summary>
            Starts the countdown.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.CountdownTimer.Delay(System.Double)">
            <summary>
            Delays the timer.
            </summary>
            <param name="interval">Interval by which the timer will be delayed.</param>
        </member>
        <member name="M:Blazorise.Utilities.CountdownTimer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.Utilities.CountdownTimer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Blazorise.Utilities.CountdownTimer"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">True if the component is in the disposing process.</param>
        </member>
        <member name="P:Blazorise.Utilities.CountdownTimer.Disposed">
            <summary>
            Flag that indicates if the component is already fully disposed.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.Disposable">
            <summary>
            Helper class for disposing of short lived objects.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.Disposable.#ctor(System.Action)">
            <summary>
            A default <see cref="T:Blazorise.Utilities.Disposable"/> constructor.
            </summary>
            <param name="action">Action with operations to run before disposed.</param>
        </member>
        <member name="M:Blazorise.Utilities.Disposable.Create(System.Action)">
            <summary>
            Create a new <see cref="T:Blazorise.Utilities.Disposable"/> object.
            </summary>
            <param name="action">Action with operations to run before disposed.</param>
            <returns>Returns a new <see cref="T:System.IDisposable"/> object.</returns>
        </member>
        <member name="M:Blazorise.Utilities.Disposable.Dispose">
            <summary>
            Disposes of any resources.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.ExpressionConverter">
            <summary>
            Helper methods to convert a <see cref="T:System.Linq.Expressions.LambdaExpression"/> to valid JavaScript.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ExpressionConverter.ToTemplatedStringLiteral(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.LambdaExpression"/> to valid Templated String Literal.
            </summary>
            <param name="expression">The expression</param>
            <returns>The Templated String Literal</returns>
        </member>
        <member name="T:Blazorise.Utilities.Formaters">
            <summary>
            Helper methods for easier formating of values into strings.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.Formaters.FormatDateValueAsString``1(``0,System.String)">
            <summary>
            Formats the supplied value to it's valid string representation.
            </summary>
            <param name="value">Value to format.</param>
            <param name="dateFormat">Date format.</param>
            <returns>Returns value formatted as string.</returns>
        </member>
        <member name="M:Blazorise.Utilities.Formaters.GetBytesReadable(System.Int64)">
            <summary>
            Returns the human-readable file size for an arbitrary, 64-bit file size 
            The default format is "0.### XB", e.g. "4.2 KB" or "1.434 GB"
            </summary>
            <Remarks>Adapted from : https://www.somacon.com/p576.php</Remarks>
            <param name="bytes">Bytes to format.</param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Utilities.Formaters.ToFileSize(System.Int64)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Utilities.Formaters.PascalCaseToFriendlyName(System.String)">
            <summary>
            Formats the supplied Pascal Case value to a friendly name with spaces.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Blazorise.Utilities.HtmlColorCodeParser">
            <summary>
            Utility methods for parsing of color codes.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.HtmlColorCodeParser.TryParse(System.String,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Parses the supplied HTML color code. This can be defined in short ot long hexadecimal form, or as text.
            </summary>
            <param name="code">The code to parse</param>
            <param name="red">The red value</param>
            <param name="green">The green value</param>
            <param name="blue">The blue value </param>
            <returns><see langword="true"/> if the <paramref name="code"/> is parsed successfully, else <see langword="false"/></returns>
        </member>
        <member name="T:Blazorise.Utilities.IdGenerator">
            <summary>
            Inspired by <see href="https://github.com/aspnet/KestrelHttpServer/blob/6fde01a825cffc09998d3f8a49464f7fbe40f9c4/src/Kestrel.Core/Internal/Infrastructure/CorrelationIdGenerator.cs"/>,
            this class generates an efficient ID which is the <c>base32</c> encoded version of a <see cref="T:System.Int64"/>
            using the alphabet <c>1-9</c> and <c>A-V</c>.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.IdGenerator.Generate">
            <summary>
            Returns a random ID. e.g: <c>0HLH7Q6V92BQE</c>
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.JsonConverters.CamelCaseEnumJsonConverter">
            <summary>
            JsonConverter for enums that converts to and from a Camel Case result
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.JsonConverters.CamelCaseEnumJsonConverter.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Blazorise.Utilities.JsonConverters.SingleValueOrArrayJsonConverter`1">
            <summary>
            JsonConverter for a <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/>
            </summary>
            <typeparam name="TItem">Type of value or array of values</typeparam>
        </member>
        <member name="P:Blazorise.Utilities.JsonConverters.SingleValueOrArrayJsonConverter`1.CanWrite">
            <summary>
            True if JsonConverter can be used to write values
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.JsonConverters.SingleValueOrArrayJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.JsonConverters.SingleValueOrArrayJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,Blazorise.Utilities.SingleValueOrArray{`0},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Blazorise.Utilities.MathUtils`1">
            <summary>
            Helper class for running math calculations on generic types.
            </summary>
            <typeparam name="T">Type-parameter of the values being calculated.</typeparam>
        </member>
        <member name="M:Blazorise.Utilities.MathUtils`1.Add(`0,`0)">
            <summary>
            Adds two numbers together and returns the result.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
            <returns>Sum of two numbers.</returns>
        </member>
        <member name="M:Blazorise.Utilities.MathUtils`1.Subtract(`0,`0)">
            <summary>
            Subtract two numbers and returns the result.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
            <returns>Subtraction of two numbers.</returns>
        </member>
        <member name="T:Blazorise.Utilities.MathUtils">
            <summary>
            Helper class for running math calculations on known types.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.MathUtils.Round(System.Double,System.Int32)">
            <summary>
            Rounds a double value to the nearest integer or to a specified number of decimal places.
            </summary>
            <param name="value">The value to round.</param>
            <param name="precision">The number of decimal places to round to. If not specified, the value will be rounded to the nearest integer.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:Blazorise.Utilities.MathUtils.Clamp``1(``0,``0,``0)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
            <typeparam name="TValue">Type-parameter of the values being calculated.</typeparam>
            <param name="value">The value to be clamped.</param>
            <param name="min">The upper bound of the result.</param>
            <param name="max">The lower bound of the result.</param>
            <returns>Returns value clamped to the inclusive range of min and max.</returns>
        </member>
        <member name="M:Blazorise.Utilities.MathUtils.GetPercent(System.Object,System.Object,System.Object)">
            <summary>
            Calculates the percentage of provided number in the range of min and max.
            </summary>
            <remarks>
            Note: internally numbers will be converted to <c>double</c> type.
            </remarks>
            <param name="value">The value to be calculated.</param>
            <param name="min">The upper bound of the result.</param>
            <param name="max">The lower bound of the result.</param>
            <returns>Returns the percentage of provided number in the range of min and max.</returns>
        </member>
        <member name="T:Blazorise.Utilities.Parsers">
            <summary>
            Various methods for parsing dates and times.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.InternalDateFormat">
            <summary>
            Internal date format. Compatible with HTML date inputs.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.InternalDateTimeFormat">
            <summary>
            Internal date-time format. Compatible with HTML date inputs.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.InternalMonthFormat">
            <summary>
            Internal month format. Compatible with HTML date inputs.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.ExternalDateFormat">
            <summary>
            Default date format.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.ExternalDateTimeFormat">
            <summary>
            Default date format.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.ExternalMonthFormat">
            <summary>
            Default month format.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.InternalTimeFormat">
            <summary>
            Internal time format. Compatible with HTML time inputs.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.SupportedParseDateFormats">
            <summary>
            Possible date formats.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.SupportedParseDateTimeFormats">
            <summary>
            Possible date-time formats.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.SupportedParseMonthFormats">
            <summary>
            Possible month formats.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.SupportedParseTimeSpanTimeFormats">
            <summary>
            Possible time formats.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.SupportedParseTimeOnlyTimeFormats">
            <summary>
            Possible time formats.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.Parsers.SupportedParseDateTimeTimeFormats">
            <summary>
            Possible time formats.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.Parsers.GetInternalDateFormat(Blazorise.DateInputMode)">
            <summary>
            Gets the internal input date format based on the input mode.
            </summary>
            <param name="inputMode">Input mode.</param>
            <returns>Valid date format.</returns>
        </member>
        <member name="M:Blazorise.Utilities.Parsers.TryParseDate``1(System.String,Blazorise.DateInputMode,``0@)">
            <summary>
            Tries to parse a date from a given string value.
            </summary>
            <typeparam name="TValue">The type of object to return.</typeparam>
            <param name="value">String value to parse.</param>
            <param name="inputMode">Hint for parsing method.</param>
            <param name="result">An object whose value represents the parsed string.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Blazorise.Utilities.Parsers.TryParseTime``1(System.String,``0@)">
            <summary>
            Tries to parse a time from a given string value.
            </summary>
            <typeparam name="TValue">The type of object to return.</typeparam>
            <param name="value">String to parse.</param>
            <param name="result">An object whose value represents the parsed string.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="T:Blazorise.Utilities.ReflectionHelper">
            <summary>
            An helper for reflection based apis.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ReflectionHelper.GetPublicProperties``1">
            <summary>
            Gets the public instance properties of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Blazorise.Utilities.ReflectionHelper.ResolveCaption(System.Reflection.PropertyInfo)">
            <summary>
            Based on this particular property, tries to resolve a caption out of the attributes.
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Blazorise.Utilities.SingleValueOrArray`1">
            <summary>
            Represents the union of a type or an array of the same type.
            </summary>
            <typeparam name="TValue">Type of the value or array of values.</typeparam>
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/> from an array of values.
            </summary>
            <param name="values">Enumerable of values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the enumerable is null.</exception>
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.#ctor(`0)">
            <summary>
            Instantiates a new <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/> from a single value.
            </summary>
            <param name="value">Single value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null.</exception>
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:Blazorise.Utilities.SingleValueOrArray`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Blazorise.Utilities.SingleValueOrArray`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.op_Implicit(`0)~Blazorise.Utilities.SingleValueOrArray{`0}">
            <summary>
            Implicitly converts a single value to a <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/>.
            </summary>
            <param name="value">Single value to convert.</param>
            <returns>A <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/> representing the value.</returns>
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.op_Implicit(System.Collections.Generic.List{`0})~Blazorise.Utilities.SingleValueOrArray{`0}">
            <summary>
            Implicitly converts a list of values to a <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/>.
            </summary>
            <param name="values">List of values to convert.</param>
            <returns>A <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/> representing the values.</returns>
        </member>
        <member name="M:Blazorise.Utilities.SingleValueOrArray`1.op_Implicit(`0[])~Blazorise.Utilities.SingleValueOrArray{`0}">
            <summary>
            Implicitly converts an array of values to a <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/>.
            </summary>
            <param name="values">Array of values to convert.</param>
            <returns>A <see cref="T:Blazorise.Utilities.SingleValueOrArray`1"/> representing the values.</returns>
        </member>
        <member name="P:Blazorise.Utilities.SingleValueOrArray`1.Values">
            <summary>
            List of values.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.SingleValueOrArray`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Blazorise.Utilities.StyleBuilder">
            <summary>
            Helper class for easier building of html styles with additional conditions and rules.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.StyleBuilder.#ctor(System.Action{Blazorise.Utilities.StyleBuilder})">
            <summary>
            Default style builder constructor that accepts build action.
            </summary>
            <param name="buildStyles">Action responsible for building the styles.</param>
        </member>
        <member name="M:Blazorise.Utilities.StyleBuilder.Append(System.String)">
            <summary>
            Appends a copy of the specified string to this instance.
            </summary>
            <param name="value">The string to append.</param>
        </member>
        <member name="M:Blazorise.Utilities.StyleBuilder.Append(System.String,System.Boolean)">
            <summary>
            Appends a copy of the specified string to this instance if <paramref name="condition"/> is true.
            </summary>
            <param name="value">The string to append.</param>
            <param name="condition">Condition that must be true.</param>
        </member>
        <member name="M:Blazorise.Utilities.StyleBuilder.Dirty">
            <summary>
            Marks the builder as dirty to rebuild the values.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.StyleBuilder.Styles">
            <summary>
            Get the styles.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.TypeHelper">
            <summary>
            Helper methods used to determine types.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines if the supplied type is a number.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if the type is a number.</returns>
        </member>
        <member name="M:Blazorise.Utilities.TypeHelper.IsInteger(System.Type)">
            <summary>
            Determines if the supplied type is an integer.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if the type is an integer.</returns>
        </member>
        <member name="T:Blazorise.Utilities.ValidationAttributeHelper">
            <summary>
            Helper methods for the validation process.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValidationAttributeHelper.PlaceholderPrefix">
            <summary>
            Original placeholder prefix.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValidationAttributeHelper.PlaceholderSuffix">
            <summary>
            Original placeholder suffix.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValidationAttributeHelper.TempPlaceholderPrefix">
            <summary>
            Replaced placeholder prefix.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValidationAttributeHelper.TempPlaceholderSuffix">
            <summary>
            Replaced placeholder suffix.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValidationAttributeHelper.SetDefaultErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Sets the default error message on a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> by replacing it with
            modified ErrorMessageString.
            </summary>
            <param name="validationAttribute">Validation attributes to modify.</param>
        </member>
        <member name="M:Blazorise.Utilities.ValidationAttributeHelper.SetErrorMessagePlaceholders(System.String)">
            <summary>
            Replaces the placeholder characters for string formatting, ie. {0} to [0]
            </summary>
            <param name="errorMessage">String to be formatted.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:Blazorise.Utilities.ValidationAttributeHelper.RevertErrorMessagePlaceholders(System.String)">
            <summary>
            Revert the formatted string into the original with the placeholder characters for string formatting, ie. [0] to {0}
            </summary>
            <param name="errorMessage">String to be formatted.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="F:Blazorise.Utilities.ValidationAttributeHelper.ValidationAttributeErrorMessageStringProperty">
            <summary>
            Gets the internal ErrorMessageString of the ValidationAttribute.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValidationAttributeHelper.ValidationAttributeCustomErrorMessageSetProperty">
            <summary>
            Gets the internal CustomErrorMessageSet of the ValidationAttribute.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValidationAttributeHelper.GetValidationAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Gets the list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s in a given property.
            </summary>
            <param name="propertyInfo">Property object.</param>
            <returns>List of found attributes.</returns>
        </member>
        <member name="T:Blazorise.Utilities.IValidationMessageLocalizerAttributeFinder">
            <summary>
            Compares two strings and find the differences.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.IValidationMessageLocalizerAttributeFinder.FindAll(System.String,System.String)">
            <summary>
            Find all the differences from two string.
            </summary>
            <param name="first">First string.</param>
            <param name="second">Second string.</param>
            <returns>Return the list of differences if any is found</returns>
        </member>
        <member name="T:Blazorise.Utilities.ValidationMessageLocalizerAttributeFinder">
            <summary>
            Default implementation of <see cref="T:Blazorise.Utilities.IValidationMessageLocalizerAttributeFinder"/>.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValidationMessageLocalizerAttributeFinder.FindAll(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Utilities.ValidationMessageResultStore">
            <summary>
            Holds the list of validation message results and their arguments.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValidationMessageResultStore.Clear(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)">
            <summary>
            Clears the messages for the supplied <see cref="T:Microsoft.AspNetCore.Components.Forms.FieldIdentifier"/>.
            </summary>
            <param name="fieldIdentifier">Field identifier to which messages belong.</param>
        </member>
        <member name="M:Blazorise.Utilities.ValidationMessageResultStore.Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier,Blazorise.Utilities.ValidationMessageResult)">
            <summary>
            Adds the message and apply it to the field identifier.
            </summary>
            <param name="fieldIdentifier">Field identifier to which messages belong.</param>
            <param name="message">Message result.</param>
        </member>
        <member name="M:Blazorise.Utilities.ValidationMessageResultStore.Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier,System.Collections.Generic.IEnumerable{Blazorise.Utilities.ValidationMessageResult})">
            <summary>
            Adds the list of messages and apply it to the field identifier.
            </summary>
            <param name="fieldIdentifier">Field identifier to which messages belong.</param>
            <param name="messages"></param>
        </member>
        <member name="P:Blazorise.Utilities.ValidationMessageResultStore.Item(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)">
            <summary>
            Gets the list of messages for the supplied field identifier.
            </summary>
            <param name="fieldIdentifier">Field identifier to which messages belong.</param>
            <returns>Return the list of messages.</returns>
        </member>
        <member name="T:Blazorise.Utilities.ValidationMessageResult">
            <summary>
            Holds the validation message data.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValidationMessageResult.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Default validation message constructor.
            </summary>
            <param name="message">Validation message.</param>
            <param name="messageArguments">List of arguments(if any) for manual <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="memberNames"></param>
        </member>
        <member name="P:Blazorise.Utilities.ValidationMessageResult.Message">
            <summary>
            Gets the validation message.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.ValidationMessageResult.MessageArguments">
            <summary>
            Gets the list of arguments that needs to be placed inside of <see cref="P:Blazorise.Utilities.ValidationMessageResult.Message"/> when formatted.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.ValidationMessageResult.MemberNames">
            <summary>
            Gets the collection of member names that indicate which fields have validation errors.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.ValueDebouncer">
            <summary>
            Debounces the value by the defined interval.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValueDebouncer.timer">
            <summary>
            Internal timer used to debounce the value.
            </summary>
        </member>
        <member name="F:Blazorise.Utilities.ValueDebouncer.value">
            <summary>
            Holds the last updated value.
            </summary>
        </member>
        <member name="E:Blazorise.Utilities.ValueDebouncer.Debounce">
            <summary>
            Event raised after the interval has passed and with new updated value.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValueDebouncer.#ctor(System.Int32)">
            <summary>
            Default debouncer constructor.
            </summary>
            <param name="interval">Interval by which the value will be debounced.</param>
        </member>
        <member name="M:Blazorise.Utilities.ValueDebouncer.OnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Invokes the <see cref="E:Blazorise.Utilities.ValueDebouncer.Debounce"/> event.
            </summary>
            <param name="source">Reference to the object tha raised the event.</param>
            <param name="eventArgs">Timer event arguments.</param>
        </member>
        <member name="M:Blazorise.Utilities.ValueDebouncer.Update(System.String)">
            <summary>
            Updates the internal value.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="M:Blazorise.Utilities.ValueDebouncer.Flush">
            <summary>
            Stops the debouncer and raises the <see cref="E:Blazorise.Utilities.ValueDebouncer.Debounce"/> event if <see cref="P:Blazorise.Utilities.ValueDebouncer.Running"/> is enabled.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.ValueDebouncer.Dispose">
            <summary>
            Releases all subscribed events.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.ValueDebouncer.Running">
            <summary>
            Returns true if debouncer timer is running.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.Vendors.BaseDateTimeFormatConverter">
            <summary>
            Base class for internal date time formaters.
            </summary>
        </member>
        <member name="M:Blazorise.Utilities.Vendors.BaseDateTimeFormatConverter.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.Utilities.Vendors.BaseDateTimeFormatConverter.FormatTokens">
            <summary>
            Gets the list of mapped format tokens.
            </summary>
        </member>
        <member name="T:Blazorise.Utilities.Vendors.FlatPickrDateTimeDisplayFormatConverter">
            <summary>
            Defauult implementation of <see cref="T:Blazorise.Vendors.IFlatPickrDateTimeDisplayFormatConverter"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.Vendors.FlatPickrDateTimeDisplayFormatConverter.FormatTokens">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.Utilities.Vendors.InputMaskDateTimeInputFormatConverter">
            <summary>
            Default implementation of <see cref="T:Blazorise.Vendors.IInputMaskDateTimeInputFormatConverter"/>.
            </summary>
        </member>
        <member name="P:Blazorise.Utilities.Vendors.InputMaskDateTimeInputFormatConverter.FormatTokens">
            <inheritdoc/>
        </member>
        <member name="T:Blazorise.ExpressionCompiler">
            <summary>
            Helper for various expression based methods.
            </summary>
        </member>
        <member name="M:Blazorise.ExpressionCompiler.GetProperty``1(System.Object,System.String)">
            <summary>
            Gets a property in an unknown instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ExpressionCompiler.CreatePropertyGetter``1(System.Object,System.String)">
            <summary>
            Generates a function getter for a property in an unknown instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ExpressionCompiler.GetField``1(System.Object,System.String)">
            <summary>
            Gets a field in an unknown instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ExpressionCompiler.CreateFieldGetter``1(System.Object,System.String)">
            <summary>
            Generates a function getter for a field in an unknown instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.ExpressionCompiler.CreateFieldGetter``1(System.Type,System.String)">
            <summary>
            Generates a function getter for a field in an unknown instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceType"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Blazorise.FileEntry">
            <summary>
            Helper class for handling the read and write of uploaded file.
            </summary>
        </member>
        <member name="M:Blazorise.FileEntry.Init(Blazorise.IFileEntryOwner)">
            <summary>
            Initialized the <see cref="T:Blazorise.FileEntry"/> object.
            </summary>
            <param name="owner">File-entry parent component.</param>
        </member>
        <member name="M:Blazorise.FileEntry.WriteToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEntry.OpenReadStream(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Blazorise.FileEntry.Cancel">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.Owner">
            <summary>
            Gets or sets the file-entry parent component.
            </summary>
        </member>
        <member name="P:Blazorise.FileEntry.Id">
            <summary>
            Gets or sets the file-entry id.
            </summary>
        </member>
        <member name="P:Blazorise.FileEntry.LastModified">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.Name">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.RelativePath">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.Size">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.Type">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.UploadUrl">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.ErrorMessage">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.Status">
            <inheritdoc/>
        </member>
        <member name="P:Blazorise.FileEntry.FileUploadEndedCallback">
            <summary>
            Provides a completion source to delay completion until after the file operation has been fully completed.
            </summary>
        </member>
        <member name="T:Blazorise.FileEntryStatus">
            <summary>
            Determines the File Entry Status
            </summary>
        </member>
        <member name="F:Blazorise.FileEntryStatus.Ready">
            <summary>
            The file is ready to be uploaded.
            </summary>
        </member>
        <member name="F:Blazorise.FileEntryStatus.Uploading">
            <summary>
            The file is being uploaded.
            </summary>
        </member>
        <member name="F:Blazorise.FileEntryStatus.Uploaded">
            <summary>
            The file has been uploaded.
            </summary>
        </member>
        <member name="F:Blazorise.FileEntryStatus.ExceedsMaximumSize">
            <summary>
            The file exceeds the maximum configured size.
            </summary>
        </member>
        <member name="F:Blazorise.FileEntryStatus.Error">
            <summary>
            Something wrong ocorred when trying to upload the file.
            </summary>
        </member>
        <member name="T:Blazorise.IFileEntry">
            <summary>
            Defines the upload file.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.Id">
            <summary>
            Gets the file-entry id.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.LastModified">
            <summary>
            Returns the last modified time of the file.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.Name">
            <summary>
            Returns the name of the file.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.RelativePath">
            <summary>
            Returns the relative path of the file.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.Size">
            <summary>
            Returns the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.Type">
            <summary>
            Returns the MIME type of the file.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.UploadUrl">
            <summary>
            Provides a way to tell the location of the uploaded file or image.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.ErrorMessage">
            <summary>
            Provides a way to tell if any error happened.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.Status">
            <summary>
            Gets or sets the File Entry Status.
            </summary>
        </member>
        <member name="M:Blazorise.IFileEntry.WriteToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Provides the access to the underline file through the stream.
            </summary>
            <param name="stream">Stream to which the upload process if writing.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of streaming file data.</param>
            <returns></returns>
        </member>
        <member name="M:Blazorise.IFileEntry.OpenReadStream(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Opens the stream for reading the uploaded file.
            </summary>
            <param name="maxAllowedSize">
            The maximum number of bytes that can be supplied by the Stream. Defaults to 500 KB.
            <para>
            Calling <see cref="M:Blazorise.IFileEntry.OpenReadStream(System.Int64,System.Threading.CancellationToken)" />
            will throw if the file's size, as specified by <see cref="P:Blazorize.IFileEntry.Size" /> is larger than
            <paramref name="maxAllowedSize" />. By default, if the user supplies a file larger than 500 KB, this method will throw an exception.
            </para>
            <para>
            It is valuable to choose a size limit that corresponds to your use case. If you allow excessively large files, this
            may result in excessive consumption of memory or disk/database space, depending on what your code does
            with the supplied <see cref="T:System.IO.Stream" />.
            </para>
            <para>
            For Blazor Server in particular, beware of reading the entire stream into a memory buffer unless you have
            passed a suitably low size limit, since you will be consuming that memory on the server.
            </para>
            </param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of streaming file data.</param>
            <exception cref="T:System.IO.IOException">Thrown if the file's length exceeds the <paramref name="maxAllowedSize" /> value.</exception>
        </member>
        <member name="M:Blazorise.IFileEntry.Cancel">
            <summary>
            Cancels any ongoing FileEntry operation.
            </summary>
        </member>
        <member name="P:Blazorise.IFileEntry.FileUploadEndedCallback">
            <summary>
            Provides a completion source to delay completion until after the file operation has been fully completed.
            </summary>
        </member>
        <member name="T:Blazorise.IFileEntryNotifier">
            <summary>
            Notifies the component of file upload progress.
            </summary>
        </member>
        <member name="M:Blazorise.IFileEntryNotifier.UpdateFileStartedAsync(Blazorise.IFileEntry)">
            <summary>
            Notifies the component that file upload is about to start.
            </summary>
            <param name="fileEntry">File entry to be uploaded.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IFileEntryNotifier.UpdateFileEndedAsync(Blazorise.IFileEntry,System.Boolean,Blazorise.FileInvalidReason)">
            <summary>
            Notifies the component that file upload has ended.
            </summary>
            <param name="fileEntry">Uploaded file entry.</param>
            <param name="success">True if the file upload was successful.</param>
            <param name="fileInvalidReason">Provides information about the invalid file.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IFileEntryNotifier.UpdateFileWrittenAsync(Blazorise.IFileEntry,System.Int64,System.Byte[])">
            <summary>
            Updates component with the latest file data.
            </summary>
            <param name="fileEntry">Currently processed file entry.</param>
            <param name="position">The current position of this stream.</param>
            <param name="data">Currerntly read data.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IFileEntryNotifier.UpdateFileProgressAsync(Blazorise.IFileEntry,System.Int64)">
            <summary>
            Updated the component with the latest upload progress.
            </summary>
            <param name="fileEntry">Currently processed file entry.</param>
            <param name="progressProgress">Progress value.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Blazorise.IFileEntryOwner">
            <summary>
            Owner object used to handle the file streaming.
            </summary>
        </member>
        <member name="M:Blazorise.IFileEntryOwner.WriteToStreamAsync(Blazorise.FileEntry,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the file data to the target stream.
            </summary>
            <param name="fileEntry">Currently processed file entry.</param>
            <param name="stream">Target stream.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of streaming file data.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Blazorise.IFileEntryOwner.OpenReadStream(Blazorise.FileEntry,System.Threading.CancellationToken)">
            <summary>
            Opens the stream for reading the uploaded file.
            </summary>
            <param name="fileEntry">Currently processed file entry.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of streaming file data.</param>
            <returns>Returns the stream for the uploaded file entry.</returns>
        </member>
        <member name="M:Blazorise.RemoteFileEntryStreamReader.RefreshUI">
            <summary>
            If we're running on WebAssembly, then we should give time for the single thread to catch up and refresh the UI.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blazorise.ModalProviderParameterBuilder`1">
            <summary>
            Provides a builder with helper methods to help you build your component parameters.
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="P:Blazorise.ModalProviderParameterBuilder`1.Parameters">
            <summary>
            Parameters to be passed onto TComponent instantiation.
            </summary>
        </member>
        <member name="M:Blazorise.ModalProviderParameterBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Adds a new TComponent parameter.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="selector">Select that will resolve the parameter name</param>
            <param name="value">Parameter Value</param>
        </member>
        <member name="M:Blazorise.ModalProviderParameterBuilder`1.Add(System.String,System.Object)">
            <summary>
            Adds a new parameter.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="T:Blazorise.DeepCloner.DeepClonerExtensions">
            <summary>
            Extensions for object cloning
            <para>This is based on the original implementation of DeepCloner from https://github.com/force-net/DeepCloner</para>
            </summary>
        </member>
        <member name="M:Blazorise.DeepCloner.DeepClonerExtensions.DeepClone``1(``0)">
            <summary>
            Performs deep (full) copy of object and related graph
            </summary>
        </member>
        <member name="M:Blazorise.DeepCloner.DeepClonerExtensions.DeepCloneTo``2(``0,``1)">
            <summary>
            Performs deep (full) copy of object and related graph to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Blazorise.DeepCloner.DeepClonerExtensions.ShallowCloneTo``2(``0,``1)">
            <summary>
            Performs shallow copy of object to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Blazorise.DeepCloner.DeepClonerExtensions.ShallowClone``1(``0)">
            <summary>
            Performs shallow (only new object returned, without cloning of dependencies) copy of object
            </summary>
        </member>
        <member name="M:Blazorise.DeepCloner.Helpers.DeepClonerCache.ClearCache">
            <summary>
            This method can be used when we switch between safe / unsafe variants (for testing)
            </summary>
        </member>
        <member name="T:Blazorise.DeepCloner.Helpers.DeepClonerSafeTypes">
            <summary>
            Safe types are types, which can be copied without real cloning. e.g. simple structs or strings (it is immutable)
            </summary>
        </member>
        <member name="T:Blazorise.DeepCloner.Helpers.ShallowObjectCloner">
            <summary>
            Internal class but due implementation restriction should be public
            </summary>
        </member>
        <member name="M:Blazorise.DeepCloner.Helpers.ShallowObjectCloner.DoCloneObject(System.Object)">
            <summary>
            Abstract method for real object cloning
            </summary>
        </member>
        <member name="M:Blazorise.DeepCloner.Helpers.ShallowObjectCloner.CloneObject(System.Object)">
            <summary>
            Performs real shallow object clone
            </summary>
        </member>
        <member name="M:Blazorise.DeepCloner.Helpers.ShallowObjectCloner.SwitchTo(System.Boolean)">
            <summary>
            Purpose of this method is testing variants
            </summary>
        </member>
    </members>
</doc>
